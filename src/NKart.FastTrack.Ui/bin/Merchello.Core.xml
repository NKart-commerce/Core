<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Merchello.Core</name>
    </assembly>
    <members>
        <member name="T:NKart.Core.Acquired.Configuration.RawXmlConfigurationElement">
            <summary>
            A configuration section that simply exposes the entire raw xml of the section itself which inheritors can use
            to do with as they please.
            </summary>
            UMBRACO
        </member>
        <member name="M:NKart.Core.Acquired.Configuration.RawXmlConfigurationElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Acquired.Configuration.RawXmlConfigurationElement"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Acquired.Configuration.RawXmlConfigurationElement.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Acquired.Configuration.RawXmlConfigurationElement"/> class.
            </summary>
            <param name="rawXml">
            The raw xml.
            </param>
        </member>
        <member name="P:NKart.Core.Acquired.Configuration.RawXmlConfigurationElement.RawXml">
            <summary>
            Gets the raw xml.
            </summary>
        </member>
        <member name="M:NKart.Core.Acquired.Configuration.RawXmlConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Deserializes the xml contents of an element.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/>.
            </param>
            <param name="serializeCollectionKey">
            A value indicating whether or not to serialize the collection key. Not used.
            </param>
        </member>
        <member name="T:NKart.Core.Acquired.NetworkHelper">
            <summary>
            Currently just used to get the machine name in med trust and to format a machine name for use with file names
            </summary>
        </member>
        <member name="P:NKart.Core.Acquired.NetworkHelper.FileSafeMachineName">
            <summary>
            Returns the machine name that is safe to use in file paths.
            </summary>
            <remarks>
            see: https://github.com/Shandem/ClientDependency/issues/4
            </remarks>
        </member>
        <member name="P:NKart.Core.Acquired.NetworkHelper.MachineName">
            <summary>
            Returns the current machine name
            </summary>
            <remarks>
            Tries to resolve the machine name, if it cannot it uses the config section.
            </remarks>
        </member>
        <member name="T:NKart.Core.ActivatorHelper">
            <summary>
            Helper methods for Activation
            </summary>
        </member>
        <member name="M:NKart.Core.ActivatorHelper.CreateInstance``1">
            <summary>
            Creates an instance of a type using that type's default constructor.
            </summary>
            <typeparam name="T">The type of instance to create</typeparam>
            <returns>An instantiation of T</returns>
        </member>
        <member name="M:NKart.Core.ActivatorHelper.CreateInstance``1(System.Type,System.Type[],System.Object[])">
            <summary>
            Creates an instance of a type using a constructor with specific arguments
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> or base class</typeparam>
            <param name="type">The <see cref="T:System.Type"/> to be instantiated</param>
            <param name="ctrArgs">The constructor arguments</param>
            <param name="ctrValues">The constructor argument values</param>
            <returns>An instantiated type of T</returns>
        </member>
        <member name="M:NKart.Core.ActivatorHelper.CreateInstance``1(System.String,System.Object[])">
            <summary>
            Creates an instance of a type using a constructor with specific arguments
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> or base class</typeparam>
            <param name="typeName">The TypeName information of the object to be instantiated</param>
            <param name="constructorArgumentValues">Object array containing constructor arguments</param>
            <returns>The result of the <see cref="T:Umbraco.Core.Attempt`1"/> to instantiate the object</returns>
        </member>
        <member name="M:NKart.Core.ActivatorHelper.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Creates an instance of a type using a constructor with specific arguments
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> or base class</typeparam>
            <param name="type">The type of the object to be instantiated</param>
            <param name="constructorArgumentValues">Object array containing constructor arguments</param>
            <returns>The result of the <see cref="T:Umbraco.Core.Attempt`1"/> to instantiate the object</returns>
        </member>
        <member name="T:NKart.Core.Configuration.Elements.CountriesElement">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Configuration.Elements.CountriesElement.Countries">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Configuration.Elements.CountriesElement.CreateCountry(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.ICountry"/> from configuration XML data.
            </summary>
            <param name="xCountry">
            The XML configuration element representing the country.
            </param>
            <param name="xRegion">
            The a corresponding XML configuration element representing the region.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICountry"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Elements.CountriesElement.CreateProvince(System.Xml.Linq.XElement)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IProvince"/>.
            </summary>
            <param name="xr">
            The <see cref="T:System.Xml.Linq.XElement"/> representation of the province configuration XML.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProvince"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.IDashboardConfiguration">
            <summary>
            Represents a back office tree.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.IDashboardConfiguration.Icon">
            <summary>
            Gets the icon.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.IDashboardConfiguration.ParentRouteId">
            <summary>
            Gets the id for the parent route.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.IDashboardConfiguration.RouteId">
            <summary>
            Gets the id for the route to dashboard or section represented.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.IDashboardConfiguration.RoutePath">
            <summary>
            Gets the actual path for the route.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.IDashboardConfiguration.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.IDashboardConfiguration.Title">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.ContentFinderCultureCollection">
            <summary>
            The content finder culture collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.ContentFinderCultureCollection.Item(System.Object)">
            <summary>
            Gets the <see cref="T:NKart.Core.Configuration.Outline.RouteElement"/> with the index of index from the collection
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Configuration.Outline.RouteElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.ContentFinderCultureCollection.Routes">
            <summary>
            The get trees.
            </summary>
            <returns>
            The collection of <see cref="T:NKart.Core.Configuration.Outline.TreeElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.ContentFinderCultureCollection.CreateNewElement">
            <summary>
            The create new element.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.ContentFinderCultureCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            The get element key.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.CurrencyFormatCollection">
            <summary>
            The currency format collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.CurrencyFormatCollection.Item(System.Object)">
            <summary>
            Default. Returns the CurrencyFormatElement with the index of index from the collection
            </summary>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.CurrencyFormatCollection.CreateNewElement">
            <summary>
            The create new element.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.CurrencyFormatCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.CurrencyFormatElement">
            <summary>
            The currency format element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.CurrencyFormatElement.CurrencyCode">
            <summary>
            Gets or sets the currency 'code' (key) for the currency format collection element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.CurrencyFormatElement.Format">
            <summary>
            Gets or sets a format of the currency ex: {0}{1:0.00}
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.CurrencyFormatElement.Symbol">
            <summary>
            Gets or sets a currency symbol.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.CustomerElement">
            <summary>
            The customer element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.CustomerElement.MemberTypes">
            <summary>
            Gets or sets the member types.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.EntityCollectionProviderCollection">
            <summary>
            The self managed entity collection provider collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.EntityCollectionProviderCollection.Item(System.Object)">
            <summary>
            The this.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Configuration.Outline.EntityCollectionProviderElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.EntityCollectionProviderCollection.EntityCollectionProviders">
            <summary>
            The get trees.
            </summary>
            <returns>
            The collection of <see cref="T:NKart.Core.Configuration.Outline.TreeElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.EntityCollectionProviderCollection.CreateNewElement">
            <summary>
            The create new element.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.EntityCollectionProviderCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            The get element key.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.EntityCollectionProviderElement">
            <summary>
            The entity collection provider element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.EntityCollectionProviderElement.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.EntityCollectionProviderElement.Icon">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.EntityCollectionProviderElement.Visible">
            <summary>
            Gets or sets a value indicating whether the tree is visible.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.EntityCollectionProviderElement.Ref">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.EntitySpecificationCollectionAttributesElement">
            <summary>
            Provides a configuration element for assigning entity collection providers to be available for entity specification collection selection
            by entity type.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.EntitySpecificationCollectionAttributesElement.Products">
            <summary>
            Gets the products entity collection providers collection
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.PluggableCollection">
            <summary>
            A configuration collection for pluggable objects.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.PluggableCollection.Item(System.Object)">
            <summary>
            Finds an object in the collection with the index (key alias) provided
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Configuration.Outline.PluggableObjectElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.PluggableCollection.CreateNewElement">
            <summary>
            Creates a new PluggableObjectElement
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Configuration.Outline.PluggableObjectElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.PluggableCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Returns the alias (key) of the configuration element.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.PluggableObjectElement">
            <summary>
            A configuration element for pluggable objects.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.PluggableObjectElement.Alias">
            <summary>
            Gets or sets the alias (key) value for the strategies collection element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.PluggableObjectElement.Type">
            <summary>
            Gets or sets the type associated with the setting.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.RouteElement">
            <summary>
            The route element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.RouteElement.CultureName">
            <summary>
            Gets or sets the culture name (key) that is expected on the respective route.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.RouteElement.ProductSlugPrefix">
            <summary>
            Gets or sets the product slug prefix.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.StrategyElement">
            <summary>
            The strategy element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.StrategyElement.Alias">
            <summary>
            Gets or sets the alias (key) value for the strategies collection element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.StrategyElement.Type">
            <summary>
            Gets or sets the type associated with the setting.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.TreeCollection">
            <summary>
            The back office collection
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeCollection.Item(System.Object)">
            <summary>
            The this.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Configuration.Outline.TreeElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TreeCollection.GetTrees">
            <summary>
            The get trees.
            </summary>
            <returns>
            The collection of <see cref="T:NKart.Core.Configuration.Outline.TreeElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TreeCollection.Add(NKart.Core.Configuration.Outline.TreeElement)">
            <summary>
            Adds an element to the collection
            </summary>
            <param name="element">
            The element.
            </param>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TreeCollection.CreateNewElement">
            <summary>
            The create new element.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TreeCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            The get element key.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.ReplacementCollection">
            <summary>
            Defines a PatternElement
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.ReplacementCollection.Item(System.Object)">
            <summary>
            Default. Returns the ReplacementElement with the index of index from the collection
            </summary>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.ReplacementCollection.GetReplacements">
            <summary>
            The get replacements.
            </summary>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.ReplacementCollection.CreateNewElement">
            <summary>
            The create new element.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.ReplacementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            The get element key.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.ReplaceElement">
            <summary>
            Defines the ReplaceElement
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.ReplaceElement.Alias">
            <summary>
            Gets or sets the alias (key) value for the settings collection element.  
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.ReplaceElement.Pattern">
            <summary>
            Gets or sets the pattern value for the settings collection element.  
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.ReplaceElement.Replacement">
            <summary>
            Gets or sets the replacement.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.ReplaceElement.ReplacementInMonitor">
            <summary>
            Gets or sets a value indicating whether replacement in monitor.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.TreeElement">
            <summary>
            The tree element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.LocalizeArea">
            <summary>
            Gets or sets the localize area.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.LocalizeName">
            <summary>
            Gets or sets the localize area.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.Icon">
            <summary>
            Gets or sets the icon.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.RoutePath">
            <summary>
            Gets or sets the route path.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.Visible">
            <summary>
            Gets or sets a value indicating whether the tree is visible.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.ChildSettings">
            <summary>
            Gets or sets the sub tree.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.SubTree">
            <summary>
            Gets or sets the sub tree.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TreeElement.SelfManagedEntityCollectionProviderCollections">
            <summary>
            Gets or sets the self managed entity collection provider collections.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.ProvinceConfigurationCollection">
            <summary>
            The province configuration collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.ProvinceConfigurationCollection.Item(System.Object)">
            <summary>
            Gets the <see cref="T:NKart.Core.Configuration.Outline.ProvinceElement"/> with the index of index from the collection
            </summary>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.ProvinceConfigurationCollection.CreateNewElement">
            <summary>
            The create new element.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.ProvinceConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the code 'key' for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
            The <see cref="T:NKart.Core.Configuration.Outline.TypeFieldElement"/>
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.ProvinceElement">
            <summary>
            The province element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.ProvinceElement.Code">
            <summary>
            Gets or sets the province 'code' (key) for the province collection element.  Presumably this is an enum value.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.ProvinceElement.Name">
            <summary>
            Gets or sets the name associated with the province.
            </summary>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.RegionalProvinceCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.RegionalProvinceCollection.Item(System.Object)">
            <summary>
            Default. Returns the RegionElement with the index of index from the collection
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.RegionElement">
            <summary>
            The region element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.RegionElement.Code">
            <summary>
            Gets or sets the region 'code' (key) for the region collection element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.RegionElement.RequirePostalCode">
            <summary>
            Gets or sets a value indicating whether or not the region requires a postal code.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.RegionElement.ProvinceLabel">
            <summary>
            Gets or sets the label for provinces (for US this may be 'States')
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.RegionElement.ProvincesConfiguration">
            <summary>
            Gets the province collection
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.SettingsCollection">
            <summary>
            The settings collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.SettingsCollection.Item(System.Object)">
            <summary>
            Default indexer
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Configuration.Outline.SettingsElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.SettingsCollection.AllSettings">
            <summary>
            The get trees.
            </summary>
            <returns>
            The collection of <see cref="T:NKart.Core.Configuration.Outline.SettingsElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.SettingsCollection.CreateNewElement">
            <summary>
            The create new element.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.SettingsCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.SettingsElement">
            <summary>
            The settings element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.SettingsElement.Alias">
            <summary>
            Gets or sets the alias (key) value for the settings collection element.  Presumably this is an enumerated value.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.SettingsElement.Value">
            <summary>
            Gets or sets the value associated with the setting.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.StrategiesCollection">
            <summary>
            The strategies collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.StrategiesCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:NKart.Core.Configuration.Outline.StrategyElement"/>.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.StrategiesCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element"> Then <see cref="T:NKart.Core.Configuration.Outline.TypeFieldElement"/></param>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.StrategiesCollection.Item(System.Object)">
            <summary>
            Default. Returns the SettingsItemsElement with the index of index from the collection
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TaskChainElement.Alias">
            <summary>
            Gets/sets the 'alias' (key) for the <see cref="T:NKart.Core.Configuration.Outline.TaskChainsCollection"/> element. 
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TaskChainElement.TaskConfigurationCollection">
            <summary>
            Gets the tasks collection
            </summary>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TaskChainsCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the code 'key' for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element"><see cref="T:NKart.Core.Configuration.Outline.TypeFieldElement"/></param>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TaskChainsCollection.Item(System.Object)">
            <summary>
            Default. Returns the ProvinceElement with the index of index from the collection
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.TaskElement">
            <summary>
            Defines a task chain task configuration element
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TaskElement.Type">
            <summary>
            The type of the task to instantiate
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.TasksConfigurationCollection">
            <summary>
            The tasks configuration collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TasksConfigurationCollection.Item(System.Object)">
            <summary>
            Default. Returns the ProvinceElement with the index of index from the collection
            </summary>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TasksConfigurationCollection.GetAllTypes">
            <summary>
            The get all types.
            </summary>
            <returns>
            The collection of all <see cref="T:NKart.Core.Configuration.Outline.TaskElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TasksConfigurationCollection.CreateNewElement">
            <summary>
            The create new element.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TasksConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            The get element key.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement">
            <summary>
            The type field definitions element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.CustomerAddress">
            <summary>
            Gets the dbTypeFields configuration collection for <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.CampaignActivities">
            <summary>
            Gets the campaign offers.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.ItemCache">
            <summary>
            Gets the dbTypeFields configuration collection for <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.Entities">
            <summary>
            Gets the dbTypeFields configuration collection for Entities
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.ShipMethod">
            <summary>
            Gets the dbTypeFields configuration collection for <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.InvoiceItem">
            <summary>
            Gets the dbTypeFields configuration collection for <see cref="T:NKart.Core.Models.IInvoiceLineItem"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.PaymentMethod">
            <summary>
            Gets the dbTypeFields configuration collection for <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.Product">
            <summary>
            Gets the dbTypeFields configuration collection for <see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.AppliedPayment">
            <summary>
            Gets the dbTypeFields configuration collection for <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.GatewayProvider">
            <summary>
            Gets the dbTypeFields configuration collection for <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldDefinitionsElement.LineItem">
            <summary>
            Gets the dbTypeFields configuration collection for <see cref="T:NKart.Core.Models.ILineItem"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.TypeFieldCollection">
            <summary>
            The type field collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TypeFieldCollection.CreateNewElement">
            <summary>
            Creates a new <see cref="T:NKart.Core.Configuration.Outline.TypeFieldElement">ConfigurationElement</see>.
            CreateNewElement must be overridden in classes that derive from the ConfigurationElementCollection class.
            </summary>
            <returns>
            The <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TypeFieldCollection.GetTypeFields">
            <summary>
            The gets the collection of type fields.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.Outline.TypeFieldCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">
            The <see cref="T:NKart.Core.Configuration.Outline.TypeFieldElement"/>
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldCollection.Item(System.Object)">
            <summary>
            Default. Returns the DbTypeFieldElement with the index of index from the collection
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.TypeFieldElement">
            <summary>
            The type field element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldElement.Alias">
            <summary>
            Gets or sets the alias (key) value for the data type field collection element.  Presumably this is an enumeration value.
            </summary>
            <remarks>
            This corresponds to the alias field in the "merchDbTypeField" table
            </remarks>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldElement.Name">
            <summary>
            Gets or sets the descriptive name associated with the referenced type field.  ex. InvoiceItemTypes -> Product, Shipping, Tax, Credit
            </summary>
            <remarks>
            This corresponds to the name field in the merchDbTypeField table
            </remarks>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.TypeFieldElement.TypeKey">
            <summary>
            Gets or sets the guid associated with the referenced type field.  
            </summary>
            <remarks>
            This corresponds to the 'key' database column in the merchDbTypefield table
            </remarks>
        </member>
        <member name="T:NKart.Core.Configuration.Outline.MerchelloSection">
            <summary>
            Defines the Merchello main configuration section.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.DefaultConnectionStringName">
            <summary>
            Gets or sets the default connection string name for Merchello database connectivity
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.DefaultCountryCode">
            <summary>
            Gets or sets the default country code, primarily used for UI controls
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.EnableLogging">
            <summary>
            Gets or sets a value indicating whether logging is enabled
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.EnableInstallTracking">
            <summary>
            Gets or sets a value indicating whether or not installs and upgrades can be tracked.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.LogLocalization">
            <summary>
            Gets or sets the log localization defaults to "en"
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.Settings">
            <summary>
            Gets the settings collection
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.OptionUi">
            <summary>
            Gets the settings collection
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.EntitySpecificationCollections">
            <summary>
            Gets the EntitySpecificationCollection configurations.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.CheckoutContextSettings">
            <summary>
            Gets the checkout context settings collection
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.Customer">
            <summary>
            Gets the customer element.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.TypeFields">
            <summary>
            Gets the type field definitions element
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.NKart#Core#Configuration#Sections#IMerchelloCountriesSection#Countries">
            <summary>
            Gets the list of countries.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.Countries">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.Pluggable">
            <summary>
            Gets the pluggable collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.ContentFinderCulture">
            <summary>
            Gets the content finder culture.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.Strategies">
            <summary>
            Gets the strategies collection
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.TaskChains">
            <summary>
            Gets the task chain collection
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.PatternFormatter">
            <summary>
            Gets the tasks collection
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.BackOffice">
            <summary>
            Gets the sub tree.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Outline.MerchelloSection.CurrencyFormats">
            <summary>
            Gets the CurrencyFormat collection
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Sections.IMerchelloCountriesSection">
            <summary>
            Represents a configuration section for configuring Countries and Regions bu Merchello.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Sections.IMerchelloCountriesSection.Countries">
            <summary>
            Gets the countries.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.Sections.MerchelloCountriesSection">
            <summary>
            Represents a Merchello countries configuration section.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Sections.MerchelloCountriesSection.NKart#Core#Configuration#Sections#IMerchelloCountriesSection#Countries">
            <summary>
            Gets the list of countries.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.Sections.MerchelloCountriesSection.Countries">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Configuration.Sections.IMerchelloSection">
            <summary>
            Represents a Merchello section within the configuration file.
            </summary>
            <remarks>
            <para>The requirement for these sections is to be read-only.</para>
            <para>However for unit tests purposes it is internally possible to override some values, and
            then calling <c>>ResetSection</c> should cancel these changes and bring the section back to
            what it was originally.</para>
            <para>The <c>MerchelloSettings.For{T}</c> method will return a section, either one that
            is in the configuration file, or a section that was created with default values.</para>
            </remarks>
        </member>
        <member name="T:NKart.Core.Configuration.Sections.MerchelloSection">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Configuration.Sections.MerchelloSection.IsPresent">
            <summary>
            Gets a value indicating whether the section actually is in the configuration file.
            </summary>
        </member>
        <member name="T:NKart.Core.Configuration.MerchelloConfiguration">
            <summary>
            Provides quick access to the Merchello configuration section.
            </summary>
        </member>
        <member name="F:NKart.Core.Configuration.MerchelloConfiguration.ApplicationName">
            <summary>
            Gets the application name.
            </summary>
        </member>
        <member name="F:NKart.Core.Configuration.MerchelloConfiguration.MerchelloMigrationName">
            <summary>
            Gets the merchello migration name.
            </summary>
            <remarks>
            Configuration Status - (Upgrades) 
            </remarks>
        </member>
        <member name="F:NKart.Core.Configuration.MerchelloConfiguration.Lazy">
            <summary>
            The lazy loaded configuration section
            </summary>
        </member>
        <member name="F:NKart.Core.Configuration.MerchelloConfiguration._rootDir">
            <summary>
            The root directory.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.Current">
            <summary>
            Gets the current instance
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.ConfigurationName">
            <summary>
            Gets the configuration name.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.ConfigurationStatus">
            <summary>
            Gets or sets the configuration status. This will return the version number of the currently installed merchello instance.
            </summary>
            <value>The configuration status.</value>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.ConfigurationStatusVersion">
            <summary>
            Gets the configuration status version.
            </summary>
        </member>
        <member name="M:NKart.Core.Configuration.MerchelloConfiguration.MerchelloCountries">
            <summary>
            Gets the Merchello Countries Configuration Section.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Configuration.Sections.IMerchelloCountriesSection"/>.
            </returns>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.Section">
            <summary>
            Gets the <see cref="T:NKart.Core.Configuration.Outline.MerchelloSection"/> Configuration Element
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.CheckoutContextSettings">
            <summary>
            Gets the configured <see cref="T:NKart.Core.Checkout.ICheckoutContextSettings"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.OptionUiSettings">
            <summary>
            Gets the option UI settings.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.CustomerMemberTypes">
            <summary>
            Gets the customer member types.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.DefaultSkuSeparator">
            <summary>
            Gets the default SKU separator.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.AlwaysApproveOrderCreation">
            <summary>
            Gets a value indicating whether to always approve order creation.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.RemoveTrailingSlashFromProductUrls">
            <summary>
            Gets a value indicating whether to remove the trailing slash off product urls
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.AutoUpdateDbSchema">
            <summary>
            Gets a value indicating whether auto update database schema.
            </summary>
            <remarks>
            If true, Merchello will automatically attempt to update the database schema (if required) 
            when the boot strapping detects a Merchello version update
            </remarks>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.AnonymousCustomersMaxDays">
            <summary>
            Gets the days beyond which the anonymous customers will be deleted via a scheduled task.
            </summary>
            <remarks>
            The number of days beyond which the anonymous customers will be deleted via a scheduled task.
            </remarks>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.AnonymousCustomerCookieExpiresDays">
            <summary>
            Gets the number of days to persist an anonymous customer cookie.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.QuoteShipmentUsingOnSalePrice">
            <summary>
            Gets a value indicating whether shipments should be quoted based on an item's sale price if it's on sale.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.PatternFormatter">
            <summary>
            Gets the pattern formatter.
            </summary>
            <remarks>
            Returns the pattern formatter for a given group
            </remarks>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.EntitySpecificationCollections">
            <summary>
            Gets the Entity Specification Collection Specification section.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.BackOffice">
            <summary>
            Gets the back office.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloConfiguration.FullpathToRoot">
            <summary>
            Gets the full path to root.
            </summary>
            <value>The fullpath to root.</value>
        </member>
        <member name="M:NKart.Core.Configuration.MerchelloConfiguration.GetProductSlugCulturePrefix(System.String)">
            <summary>
            The get product slug culture prefix.
            </summary>
            <param name="cultureName">
            The culture name.
            </param>
            <returns>
            The product slug prefix.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.MerchelloConfiguration.GetPluggableObjectElement(System.String)">
            <summary>
            Gets a pluggable object configuration element.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Configuration.Outline.PluggableObjectElement"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.MerchelloConfiguration.GetStrategyElement(System.String)">
            <summary>
            Gets the <see cref="T:NKart.Core.Configuration.Outline.StrategyElement"/> by it's configuration alias
            </summary>
            <param name="alias">The alias (configuration key) of the <see cref="T:NKart.Core.Configuration.Outline.StrategyElement"/></param>
            <returns>
            <see cref="T:NKart.Core.Configuration.Outline.StrategyElement"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.MerchelloConfiguration.GetTaskChainElement(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Configuration.Outline.TaskChainElement"/> by its configuration alias
            </summary>
            <param name="alias">The alias (configuration key) of the <see cref="T:NKart.Core.Configuration.Outline.TaskChainElement"/></param>
            <returns><see cref="T:NKart.Core.Configuration.Outline.TaskChainElement"/></returns>
        </member>
        <member name="M:NKart.Core.Configuration.MerchelloConfiguration.GetSetting(System.String)">
            <summary>
            The get setting.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            The <see cref="T:System.String"/> value of the setting.
            </returns>
        </member>
        <member name="M:NKart.Core.Configuration.MerchelloConfiguration.SaveAppSetting(System.String,System.String)">
            <summary>
            Saves a setting into the web configuration file.
            </summary>
            <param name="key">Key of the setting to be saved.</param>
            <param name="value">Value of the setting to be saved.</param>
        </member>
        <member name="M:NKart.Core.Configuration.MerchelloConfiguration.GetRootDirectorySafe">
            <summary>
            Returns the path to the root of the application, by getting the path to where the assembly where this
            method is included is present, then traversing until it's past the /bin directory. This makes it work
            even if the assembly is in a /bin/debug or /bin/release folder
            </summary>
            <returns>
            The root directory path
            </returns>
        </member>
        <member name="T:NKart.Core.Configuration.MerchelloVersion">
            <summary>
            The merchello version.
            </summary>
        </member>
        <member name="F:NKart.Core.Configuration.MerchelloVersion.Version">
            <summary>
            The version.
            </summary>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloVersion.Current">
            <summary>
            Gets the current version of Merchello.
            Version class with the specified major, minor, build (Patch), and revision numbers.
            </summary>
            <remarks>
            CURRENT MERCHELLO VERSION ID.
            </remarks>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloVersion.CurrentComment">
            <summary>
            Gets the version comment (like beta or RC).
            </summary>
            <value>The version comment.</value>
        </member>
        <member name="P:NKart.Core.Configuration.MerchelloVersion.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
            <remarks>
            Get the version of the Merchello by looking at a class in that dll
            Had to do it like this due to medium trust issues, see: http://haacked.com/archive/2010/11/04/assembly-location-and-medium-trust.aspx
            </remarks>
        </member>
        <member name="T:NKart.Core.Builders.CheckoutInvoiceBuilderChain">
            <summary>
            A builder chain used by the checkout manager to create invoices.
            </summary>
            <remarks>
            Supersedes the <see cref="T:NKart.Core.Builders.CheckoutInvoiceBuilderChain"/>
            </remarks>
        </member>
        <member name="F:NKart.Core.Builders.CheckoutInvoiceBuilderChain._checkoutManager">
            <summary>
            Gets the <see cref="T:NKart.Core.Checkout.CheckoutManagerBase"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.CheckoutInvoiceBuilderChain._constructorParameters">
            <summary>
            Constructor parameters for the base class activator
            </summary>
        </member>
        <member name="M:NKart.Core.Builders.CheckoutInvoiceBuilderChain.#ctor(NKart.Core.Checkout.ICheckoutManagerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Builders.CheckoutInvoiceBuilderChain"/> class.
            </summary>
            <param name="checkoutManager">
            The checkout manager.
            </param>
        </member>
        <member name="P:NKart.Core.Builders.CheckoutInvoiceBuilderChain.TaskCount">
            <summary>
            Gets the count of tasks - Used for testing
            </summary>
        </member>
        <member name="P:NKart.Core.Builders.CheckoutInvoiceBuilderChain.ConstructorArgumentValues">
            <summary>
            Gets the constructor argument values.
            </summary>
        </member>
        <member name="M:NKart.Core.Builders.CheckoutInvoiceBuilderChain.Build">
            <summary>
            Builds the invoice
            </summary>
            <returns>The Attempt{IInvoice} representing the successful creation of an invoice</returns>
        </member>
        <member name="T:NKart.Core.Builders.BuildChainBase`1">
            <summary>
            Represents the build chain base class
            </summary>
            <typeparam name="T"><see cref="T:Umbraco.Core.Attempt"/> of T</typeparam>
        </member>
        <member name="M:NKart.Core.Builders.BuildChainBase`1.Build">
            <summary>
            Performs the "build" work
            </summary>
            <returns><see cref="T:Umbraco.Core.Attempt"/> of T</returns>
        </member>
        <member name="T:NKart.Core.Builders.InvoiceBuilderChain">
            <summary>
            Represents an invoice builder
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.InvoiceBuilderChain._salePreparation">
            <summary>
            The sale preparation.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.InvoiceBuilderChain._constructorParameters">
            <summary>
            Constructor parameters for the base class activator
            </summary>
        </member>
        <member name="M:NKart.Core.Builders.InvoiceBuilderChain.#ctor(NKart.Core.Sales.SalePreparationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Builders.InvoiceBuilderChain"/> class.
            </summary>
            <param name="salePreparation">
            The sale preparation.
            </param>
        </member>
        <member name="P:NKart.Core.Builders.InvoiceBuilderChain.TaskCount">
            <summary>
            Gets the count of tasks - Used for testing
            </summary>
        </member>
        <member name="P:NKart.Core.Builders.InvoiceBuilderChain.ConstructorArgumentValues">
            <summary>
            Gets the constructor argument values.
            </summary>
        </member>
        <member name="M:NKart.Core.Builders.InvoiceBuilderChain.Build">
            <summary>
            Builds the invoice
            </summary>
            <returns>The Attempt{IInvoice} representing the successful creation of an invoice</returns>
        </member>
        <member name="T:NKart.Core.Builders.OrderBuilderChain">
            <summary>
            Represents the OrderBuilderChain
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.OrderBuilderChain._invoice">
            <summary>
            The invoice.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.OrderBuilderChain._orderStatus">
            <summary>
            The order status.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.OrderBuilderChain._constructorParameters">
            <summary>
            Constructor parameters for the base class activator
            </summary>
        </member>
        <member name="M:NKart.Core.Builders.OrderBuilderChain.#ctor(NKart.Core.Models.IOrderStatus,NKart.Core.Models.IInvoice)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Builders.OrderBuilderChain"/> class.
            </summary>
            <param name="orderStatus">
            The order status.
            </param>
            <param name="invoice">
            The invoice.
            </param>
        </member>
        <member name="P:NKart.Core.Builders.OrderBuilderChain.TaskCount">
            <summary>
            Gets the task count. Used for testing
            </summary>
        </member>
        <member name="P:NKart.Core.Builders.OrderBuilderChain.ConstructorArgumentValues">
            <summary>
            Gets the constructor argument values.
            </summary>
        </member>
        <member name="M:NKart.Core.Builders.OrderBuilderChain.Build">
            <summary>
            Builds the order
            </summary>
            <returns>The Attempt{IOrder}</returns>
        </member>
        <member name="T:NKart.Core.Builders.ShipmentBuilderChain">
            <summary>
            Builds a shipment
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.ShipmentBuilderChain._shipmentStatusKey">
            <summary>
            The shipment status key.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.ShipmentBuilderChain._shipMethodKey">
            <summary>
            The ship method key.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.ShipmentBuilderChain._order">
            <summary>
            The _order.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.ShipmentBuilderChain._keysToShip">
            <summary>
            A collection of order line item keys to be included in the shipment
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.ShipmentBuilderChain._carrier">
            <summary>
            The shipping carrier.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.ShipmentBuilderChain._trackingNumber">
            <summary>
            The shipment tracking number.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.ShipmentBuilderChain._trackingUrl">
            <summary>
            The tracking url.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.ShipmentBuilderChain._merchelloContext">
            <summary>
            The merchello context.
            </summary>
        </member>
        <member name="F:NKart.Core.Builders.ShipmentBuilderChain._constructorParameters">
            <summary>
            Constructor parameters for the base class activator
            </summary>
        </member>
        <member name="M:NKart.Core.Builders.ShipmentBuilderChain.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IOrder,System.Collections.Generic.IEnumerable{System.Guid},System.Guid,System.Guid,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Builders.ShipmentBuilderChain"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="order">
            The order.
            </param>
            <param name="keysToShip">
            A collection of line item keys which identifies which line items in the order are to be included in the shipment being packaged
            </param>
            <param name="shipMethodKey">
            The ship Method Key.
            </param>
            <param name="shipmentStatusKey">
            The shipment Status Key.
            </param>
            <param name="trackingNumber">
            The tracking Number.
            </param>
            <param name="trackingUrl">
            The tracking Url.
            </param>
            <param name="carrier">
            The carrier.
            </param>
        </member>
        <member name="P:NKart.Core.Builders.ShipmentBuilderChain.TaskCount">
            <summary>
            Gets the task count. Used for testing
            </summary>
        </member>
        <member name="P:NKart.Core.Builders.ShipmentBuilderChain.ConstructorArgumentValues">
            <summary>
            Gets the constructor argument values.
            </summary>
        </member>
        <member name="M:NKart.Core.Builders.ShipmentBuilderChain.Build">
            <summary>
            Builds the order
            </summary>
            <returns>The Attempt{IShipment}</returns>
        </member>
        <member name="T:NKart.Core.Builders.IBuilderChain`1">
            <summary>
            Defines builder objects
            </summary>
            <typeparam name="T">
            The type of object to build
            </typeparam>
        </member>
        <member name="M:NKart.Core.Builders.IBuilderChain`1.Build">
            <summary>
            Performs the "build" work
            </summary>
            <returns><see cref="T:Umbraco.Core.Attempt"/> of T</returns>
        </member>
        <member name="T:NKart.Core.Cache.IPagedKeyQueryCache">
            <summary>
            Defines a paged query cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Cache.IPagedKeyQueryCache.CachePage(System.String,Umbraco.Core.Persistence.Page{System.Guid})">
            <summary>
            Caches a page.
            </summary>
            <param name="cacheKey">
            The cache key.
            </param>
            <param name="p">
            The p.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.IPagedKeyQueryCache.GetPageByCacheKey(System.String)">
            <summary>
            Gets a page by it's cache key.
            </summary>
            <param name="cacheKey">
            The cache key.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.IPagedKeyQueryCache.GetPagedQueryCacheKey``1(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets a cache key for storing paged collection query results.
            </summary>
            <typeparam name="TSender">
            The type of the sender
            </typeparam>
            <param name="methodName">
            The method name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="args">
            The args.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.IPagedKeyQueryCache.GetPagedQueryCacheKey``1(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets a cache key for storing paged collection query results.
            </summary>
            <typeparam name="TSender">
            The type of the sender
            </typeparam>
            <param name="methodName">
            The method name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Whether to include unavailable products
            </param>
            <param name="args">
            The args.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Cache.PagedKeyQueryCache">
            <summary>
            Represents a cache for paged Queries.
            </summary>
        </member>
        <member name="F:NKart.Core.Cache.PagedKeyQueryCache._cache">
            <summary>
            The <see cref="T:Umbraco.Core.Cache.ICacheProvider"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Cache.PagedKeyQueryCache.#ctor(Umbraco.Core.CacheHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Cache.PagedKeyQueryCache"/> class.
            </summary>
            <param name="cache">
            The cache.
            </param>
        </member>
        <member name="M:NKart.Core.Cache.PagedKeyQueryCache.CachePage(System.String,Umbraco.Core.Persistence.Page{System.Guid})">
            <summary>
            Caches a page.
            </summary>
            <param name="cacheKey">
            The cache key.
            </param>
            <param name="p">
            The p.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.PagedKeyQueryCache.GetPageByCacheKey(System.String)">
            <summary>
            Gets a page by it's cache key.
            </summary>
            <param name="cacheKey">
            The cache key.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.PagedKeyQueryCache.GetPagedQueryCacheKey``1(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets a cache key for storing paged collection query results.
            </summary>
            <typeparam name="TSender">
            The type of the sender
            </typeparam>
            <param name="methodName">
            The method name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="args">
            The args.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.PagedKeyQueryCache.GetPagedQueryCacheKey``1(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets a cache key for storing paged collection query results.
            </summary>
            <typeparam name="TSender">
            The type of the sender
            </typeparam>
            <param name="methodName">
            The method name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Whether to include unavailable products
            </param>
            <param name="args">
            The args.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.PagedKeyQueryCache.GetPagedPrefix``1">
            <summary>
            Gets the paged prefix.
            </summary>
            <typeparam name="TSender">
            The type of the sender
            </typeparam>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Cache.CacheKeys">
            <summary>
            Merchello cache keys.
            </summary>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.CustomerCacheKey(System.Guid)">
            <summary>
            Returns a cache key intended for runtime caching of a <see cref="T:NKart.Core.Models.ICustomerBase"/>
            </summary>
            <param name="entityKey">
            The entity key of the customer
            </param>
            <returns>
            The customer cache key
            </returns>
            <remarks>
            Note the entity key is not the same as the primary key (or key).
            This is because of the implementation / mapping between an anonymous customer and and customer
            </remarks>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.CustomerIsLoggedIn(System.Guid)">
            <summary>
            CacheKey for request cache only. Used to check if the customer is logged in.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.CustomerMembershipUserName(System.Guid)">
            <summary>
            CacheKey for request cache only.  Used to store the membership username / login name
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.CustomerMembershipProviderKey(System.Guid)">
            <summary>
            CacheKey for request cache only.  Used to store the membership provider key or id
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.EnsureIsLoggedInCustomerValidated(System.Guid)">
            <summary>
            CacheKey for request cache only. Used to check if current customer login has been validated against the member.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.ItemCacheCacheKey(System.Guid,System.Guid,System.Guid)">
            <summary>
            Returns a cache key intend for runtime caching of a <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
            <param name="entityKey">
            The entity key of the entity associated with the <see cref="T:NKart.Core.Models.IItemCache"/>
            </param>
            <param name="itemCacheTfKey">The type field key for the cache</param>
            <param name="versionKey">The version key for the cache</param>
            <returns>
            The cache key for an <see cref="T:NKart.Core.Models.IItemCache"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.GatewayShipMethodCacheKey(System.Guid)">
            <summary>
            Returns a cache key intended for runtime caching of a <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/>
            </summary>
            <param name="shipMethodKey">The unique key (GUID) of the <see cref="T:NKart.Core.Models.IShipMethod"/></param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipMethod"/> cache key
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.ShippingGatewayShipMethodsCacheKey(System.Guid)">
            <summary>
            Returns a cache key intended for runtime caching of ShippingGateway ship methods
            </summary>
            <param name="providerKey">The provider key</param>
            <returns>
            The ship methods cache key
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.ShippingGatewayProviderShippingRateQuoteCacheKey(System.Guid,System.Guid,System.Guid,System.String)">
            <summary>
            Returns a cache key intended for ShippingGatewayProviders rate quotes
            </summary>
            <param name="shipmentKey">
            The shipment key
            </param>
            <param name="shipMethodKey">
            The ship method key
            </param>
            <param name="versionKey">
            The version key
            </param>
            <param name="addressArgs">
            The address arguments - usually the country code and the region.
            </param>
            <returns>
            The shipping rate quote cache key
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.GetEntityCacheKey``1(System.Guid)">
            <summary>
            Returns a cache key intended for use in repository caching
            </summary>
            <typeparam name="TEntity">Type of the entity</typeparam>
            <param name="key">
            The primary key of the entity
            </param>
            <returns>
            The entity cache key.
            </returns>
            <remarks>
            Primarily used in repository caching of entities
            </remarks>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.GetLocalizationCacheKey(System.String)">
            <summary>
            Returns the cache key used to store the Umbraco lang file.
            </summary>
            <param name="lang">
            The lang.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.CacheKeys.GetCheckoutOfferKey(System.Guid,System.String)">
            <summary>
            Returns the offer cache key.
            </summary>
            <param name="versionKey">
            The version key.
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Cache.NullCacheProvider">
            <summary>
            The null cache provider.
            </summary>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.ClearAllCache">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.ClearCacheItem(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="key">
            The key.
            </param>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.ClearCacheObjectTypes(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="typeName">
            The type name.
            </param>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.ClearCacheObjectTypes``1">
            <summary>
            Does nothing
            </summary>
            <typeparam name="T">
            The type of T
            </typeparam>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.ClearCacheObjectTypes``1(System.Func{System.String,``0,System.Boolean})">
            <summary>
            Does nothing
            </summary>
            <param name="predicate">
            The predicate.
            </param>
            <typeparam name="T">
            The type of T
            </typeparam>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.ClearCacheByKeySearch(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="keyStartsWith">
            The key starts with.
            </param>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.ClearCacheByKeyExpression(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="regexString">
            The regex string.
            </param>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.GetCacheItemsByKeySearch(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="keyStartsWith">
            The key starts with.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.GetCacheItemsByKeyExpression(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="regexString">
            The regex string.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.GetCacheItem(System.String)">
            <summary>
            Does nothing
            </summary>
            <param name="cacheKey">
            The cache key.
            </param>
            <returns>
            The default <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.GetCacheItem(System.String,System.Func{System.Object})">
            <summary>
            Does nothing
            </summary>
            <param name="cacheKey">
            The cache key.
            </param>
            <param name="getCacheItem">
            The get cache item.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.GetCacheItem(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <summary>
            Does nothing
            </summary>
            <param name="cacheKey">
            The cache key.
            </param>
            <param name="getCacheItem">
            The get cache item.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="isSliding">
            The is sliding.
            </param>
            <param name="priority">
            The priority.
            </param>
            <param name="removedCallback">
            The removed callback.
            </param>
            <param name="dependentFiles">
            The dependent files.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Cache.NullCacheProvider.InsertCacheItem(System.String,System.Func{System.Object},System.Nullable{System.TimeSpan},System.Boolean,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.String[])">
            <summary>
            Does nothing
            </summary>
            <param name="cacheKey">
            The cache key.
            </param>
            <param name="getCacheItem">
            The get cache item.
            </param>
            <param name="timeout">
            The timeout.
            </param>
            <param name="isSliding">
            The is sliding.
            </param>
            <param name="priority">
            The priority.
            </param>
            <param name="removedCallback">
            The removed callback.
            </param>
            <param name="dependentFiles">
            The dependent files.
            </param>
        </member>
        <member name="T:NKart.Core.Cache.ObjectCacheRuntimeCacheProvider">
            <summary>
            A cache provider that wraps the logic of a System.Runtime.Caching.ObjectCache
            </summary>
        </member>
        <member name="T:NKart.Core.Cache.StaticCacheProvider">
            <summary>
            A cache provider that statically caches everything in an in memory dictionary
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.ConfigurationChainBase`1">
            <summary>
            The configuration chain base.
            </summary>
            <typeparam name="T">
            The type of object the chain deals with
            </typeparam>
        </member>
        <member name="F:NKart.Core.Chains.ConfigurationChainBase`1._taskHandlers">
            <summary>
            The _task handlers.
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.ConfigurationChainBase`1.ConstructorArgumentValues">
            <summary>
            Gets the arguments required by the task's constructors to instantiate the chain
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.ConfigurationChainBase`1.TaskHandlers">
            <summary>
            Gets the list of task handlers
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.ConfigurationChainBase`1.ResolveChain(System.String)">
            <summary>
            Constructs the task chain
            </summary>
            <param name="chainConfigurationAlias">
            The chain Configuration Alias.
            </param>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.CopyEntityAttemptChainBase`1">
            <summary>
            The copy entity attempt chain base.
            </summary>
            <typeparam name="T">
            The type of Merchello Entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.CopyEntityAttemptChainBase`1.Copy">
            <summary>
            The copy.
            </summary>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.CopyEntityTaskBase`1">
            <summary>
            The copy entity task base.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.EntityBase.IEntity"/>
            </typeparam>
        </member>
        <member name="F:NKart.Core.Chains.CopyEntity.CopyEntityTaskBase`1._merchelloContext">
            <summary>
            The _merchello context.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.CopyEntity.CopyEntityTaskBase`1._original">
            <summary>
            The original entity
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.CopyEntityTaskBase`1.#ctor(NKart.Core.IMerchelloContext,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.CopyEntityTaskBase`1"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="original">
            The original.
            </param>
        </member>
        <member name="P:NKart.Core.Chains.CopyEntity.CopyEntityTaskBase`1.Original">
            <summary>
            Gets the original entity
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.CopyEntity.CopyEntityTaskBase`1.Services">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IServiceContext"/>.
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.ICopyEntityChain`1">
            <summary>
            The CopyEntityChain interface.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.EntityBase.Entity"/>
            </typeparam>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.ICopyEntityChain`1.Copy">
            <summary>
            The copy.
            </summary>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.Product.AddProductToWarehouseCatalogsTask">
            <summary>
            The add product to warehouse catalogs task.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.CopyEntity.Product.AddProductToWarehouseCatalogsTask._warehouseCatalogs">
            <summary>
            The collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.AddProductToWarehouseCatalogsTask.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.Product.AddProductToWarehouseCatalogsTask"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="original">
            The original.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.AddProductToWarehouseCatalogsTask.PerformTask(NKart.Core.Models.IProduct)">
            <summary>
            Adds the product to the same warehouse catalogs as the original product.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.AddProductToWarehouseCatalogsTask.AddToCatalog(NKart.Core.Models.IProductVariant)">
            <summary>
            Adds the variants to the catalog.
            </summary>
            <param name="variant">
            The variant.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.AddProductToWarehouseCatalogsTask.Initialize">
            <summary>
            Initializes the task.
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.Product.CopyDetachedContentTask">
            <summary>
            The copy detached content task.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyDetachedContentTask.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.Product.CopyDetachedContentTask"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="original">
            The original.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyDetachedContentTask.PerformTask(NKart.Core.Models.IProduct)">
            <summary>
            The perform task.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyDetachedContentTask.BuildDetachedContent(System.Guid,System.String,NKart.Core.Models.DetachedContent.IProductVariantDetachedContent)">
            <summary>
            The build detached content.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="originalDetachedContent">
            The original detached content.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IProductVariantDetachedContent"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.Product.CopyProductCollectionsTask">
            <summary>
            The copy product collections task.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductCollectionsTask.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.Product.CopyProductCollectionsTask"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="original">
            The original.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductCollectionsTask.PerformTask(NKart.Core.Models.IProduct)">
            <summary>
            The perform task.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.Product.CopyProductOptionsTask">
            <summary>
            Copies any product options.
            </summary>
            <remarks>
            Requires a save which will generate any product variants
            </remarks>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductOptionsTask.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.Product.CopyProductOptionsTask"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="original">
            The original.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductOptionsTask.PerformTask(NKart.Core.Models.IProduct)">
            <summary>
            Copies the options (if any).
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskBase">
            <summary>
            The copy product task base.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskBase.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskBase"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="original">
            The original.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskBase.GetOrignalMatchingVariant(NKart.Core.Models.IProductVariant)">
            <summary>
            Gets the original variant matching the newly generated one.
            </summary>
            <param name="entitiesVariant">
            The entities variant.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskBase.GetClonedMathingVariant(NKart.Core.Models.IProduct,NKart.Core.Models.IProductVariant)">
            <summary>
            The get cloned mathing variant.
            </summary>
            <param name="clone">
            The clone.
            </param>
            <param name="originalVariant">
            The original variant.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain">
            <summary>
            The copy product task chain.
            </summary>
            <remarks>
            We could do this with a deep clone but some people want control over which bits are copied and 
            the ability to augment the process without having to handle an event each time.
            </remarks>
        </member>
        <member name="F:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain._merchelloContext">
            <summary>
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain._original">
            <summary>
            The original <see cref="T:NKart.Core.Models.IProduct"/>
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain._name">
            <summary>
            The new product name.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain._sku">
            <summary>
            The new products SKU.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain._constructorParameters">
            <summary>
            Constructor parameters for the base class activator
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain.#ctor(NKart.Core.Models.IProduct,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain"/> class.
            </summary>
            <param name="original">
            The original <see cref="T:NKart.Core.Models.IProduct"/>
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IProduct,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="original">
            The original <see cref="T:NKart.Core.Models.IProduct"/>
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
        </member>
        <member name="P:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain.TaskCount">
            <summary>
            Gets the count of tasks - Used for testing
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain.ConstructorArgumentValues">
            <summary>
            Gets the constructor argument values.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain.Copy">
            <summary>
            Executes the tasks in the task chain
            </summary>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>        
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.CopyProductTaskChain.ValidateSku">
            <summary>
            Asserts the SKU does not already exist.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.Product.MapProductVariantDataTask">
            <summary>
            Maps the variant specific information.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.MapProductVariantDataTask.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.Product.MapProductVariantDataTask"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="original">
            The original <see cref="T:NKart.Core.Models.IProduct"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.MapProductVariantDataTask.PerformTask(NKart.Core.Models.IProduct)">
            <summary>
            The perform task.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.CopyEntity.Product.SaveProductCopyTask">
            <summary>
            Saves the copied product.
            </summary>    
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.SaveProductCopyTask.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IProduct)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.CopyEntity.Product.SaveProductCopyTask"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="original">
            The original.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.CopyEntity.Product.SaveProductCopyTask.PerformTask(NKart.Core.Models.IProduct)">
            <summary>
            Saves the product.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.IDataModifierChain`1">
            <summary>
            Defines a DataModifierChain.
            </summary>
            <typeparam name="T">
            The type of object to Modify
            </typeparam>
        </member>
        <member name="M:NKart.Core.Chains.IDataModifierChain`1.Modify(`0)">
            <summary>
            Attempts to modify the data.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.AddBillingInfoToInvoiceTask">
            <summary>
            Represents a task responsible for adding billing information collected a checkout process to the
            invoice.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.AddBillingInfoToInvoiceTask.#ctor(NKart.Core.Checkout.ICheckoutManagerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.AddBillingInfoToInvoiceTask"/> class.
            </summary>
            <param name="checkoutManager">
            The checkout manager.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.AddBillingInfoToInvoiceTask.PerformTask(NKart.Core.Models.IInvoice)">
            <summary>
            Adds billing information to the invoice
            </summary>
            <param name="value">
            The <see cref="T:NKart.Core.Models.IInvoice"/>
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.AddInvoiceNumberPrefixTask">
            <summary>
            Adds the invoice number prefix to the invoice.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.AddInvoiceNumberPrefixTask.#ctor(NKart.Core.Checkout.ICheckoutManagerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.AddInvoiceNumberPrefixTask"/> class.
            </summary>
            <param name="checkoutManager">
            The checkout manager.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.AddInvoiceNumberPrefixTask.PerformTask(NKart.Core.Models.IInvoice)">
            <summary>
            Adds the invoice number prefix to the invoice if it has been set.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ApplyTaxesToInvoiceTask">
            <summary>
            Responsible for apply taxes to invoice tax.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ApplyTaxesToInvoiceTask.#ctor(NKart.Core.Checkout.ICheckoutManagerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ApplyTaxesToInvoiceTask"/> class.
            </summary>
            <param name="checkoutManager">
            The checkout manager.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ApplyTaxesToInvoiceTask.PerformTask(NKart.Core.Models.IInvoice)">
            <summary>
            Performs the task of applying taxes to the invoice.
            </summary>
            <param name="value">
            The <see cref="T:NKart.Core.Models.IInvoice"/>
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ApplyTaxesToInvoiceTask.SetTaxableSetting(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Sets or resets the tax setting.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="taxable">
            The taxable.
            </param>
            <remarks>
            In cases where a product already includes the tax and we still need to calculate taxes for shipping
            and custom line items on the invoice we set the taxable setting on the products to false and then set them back
            to true after the tax calculation has been completed.
            </remarks>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ConvertItemCacheItemsToInvoiceItemsTask">
            <summary>
            Converts ItemCacheLineItem(s) to InvoiceLineItems
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ConvertItemCacheItemsToInvoiceItemsTask.#ctor(NKart.Core.Checkout.ICheckoutManagerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ConvertItemCacheItemsToInvoiceItemsTask"/> class.
            </summary>
            <param name="checkoutManager">
            The <see cref="T:NKart.Core.Checkout.ICheckoutManagerBase"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ConvertItemCacheItemsToInvoiceItemsTask.PerformTask(NKart.Core.Models.IInvoice)">
            <summary>
            Task converts ItemCacheLineItems to InvoiceLineItems and adds them to the invoice
            </summary>
            <param name="value">The <see cref="T:NKart.Core.Models.IInvoice"/> to which to add the line items</param>
            <returns>The <see cref="T:Umbraco.Core.Attempt"/></returns>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.CheckoutManagerInvoiceCreationAttemptChainTaskBase">
            <summary>
            The invoice creation attempt chain task base.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.CheckoutManagerInvoiceCreationAttemptChainTaskBase.#ctor(NKart.Core.Checkout.ICheckoutManagerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.CheckoutManagerInvoiceCreationAttemptChainTaskBase"/> class.
            </summary>
            <param name="checkoutManager">
            The checkout manager.
            </param>
        </member>
        <member name="P:NKart.Core.Chains.InvoiceCreation.CheckoutManager.CheckoutManagerInvoiceCreationAttemptChainTaskBase.CheckoutManager">
            <summary>
            Gets the <see cref="T:NKart.Core.Checkout.ICheckoutManagerBase"/>.
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ValidateCommonCurrency">
            <summary>
            The validate common currency.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ValidateCommonCurrency.#ctor(NKart.Core.Checkout.ICheckoutManagerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ValidateCommonCurrency"/> class.
            </summary>
            <param name="checkoutManager">
            The <see cref="T:NKart.Core.Checkout.ICheckoutManagerBase"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.CheckoutManager.ValidateCommonCurrency.PerformTask(NKart.Core.Models.IInvoice)">
            <summary>
            Performs the task of asserting everything is billed in a common currency.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ApplyTaxesToInvoiceTax">
            <summary>
            Responsible for apply taxes to invoice tax.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ApplyTaxesToInvoiceTax.#ctor(NKart.Core.Sales.SalePreparationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ApplyTaxesToInvoiceTax"/> class.
            </summary>
            <param name="salePreparation">
            The sale preparation.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ApplyTaxesToInvoiceTax.PerformTask(NKart.Core.Models.IInvoice)">
            <summary>
            Performs the task of applying taxes to the invoice.
            </summary>
            <param name="value">
            The <see cref="T:NKart.Core.Models.IInvoice"/>
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ApplyTaxesToInvoiceTax.SetTaxableSetting(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Sets or resets the tax setting.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="taxable">
            The taxable.
            </param>
            <remarks>
            In cases where a product already includes the tax and we still need to calculate taxes for shipping
            and custom line items on the invoice we set the taxable setting on the products to false and then set them back
            to true after the tax calculation has been completed.
            </remarks>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.AddBillingInfoToInvoiceTask">
            <summary>
            Represents a task responsible for adding billing information collected a checkout process to the
            invoice.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.AddBillingInfoToInvoiceTask.#ctor(NKart.Core.Sales.SalePreparationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.AddBillingInfoToInvoiceTask"/> class.
            </summary>
            <param name="salePreparation">
            The sale preparation.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.AddBillingInfoToInvoiceTask.PerformTask(NKart.Core.Models.IInvoice)">
            <summary>
            Adds billing information to the invoice
            </summary>
            <param name="value">
            The <see cref="T:NKart.Core.Models.IInvoice"/>
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.InvoiceCreationAttemptChainTaskBase">
            <summary>
            The invoice creation attempt chain task base.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.InvoiceCreation.SalesPreparation.InvoiceCreationAttemptChainTaskBase._salePreparation">
            <summary>
            The sale preparation.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.InvoiceCreationAttemptChainTaskBase.#ctor(NKart.Core.Sales.SalePreparationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.InvoiceCreationAttemptChainTaskBase"/> class.
            </summary>
            <param name="salePreparation">
            The sale preparation.
            </param>
        </member>
        <member name="P:NKart.Core.Chains.InvoiceCreation.SalesPreparation.InvoiceCreationAttemptChainTaskBase.SalePreparation">
            <summary>
            Gets the <see cref="T:NKart.Core.Sales.SalePreparationBase"/> object
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ConvertItemCacheItemsToInvoiceItemsTask">
            <summary>
            Converts ItemCacheLineItem(s) to InvoiceLineItems
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ConvertItemCacheItemsToInvoiceItemsTask.#ctor(NKart.Core.Sales.SalePreparationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ConvertItemCacheItemsToInvoiceItemsTask"/> class.
            </summary>
            <param name="salePreparation">
            The sale preparation.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ConvertItemCacheItemsToInvoiceItemsTask.PerformTask(NKart.Core.Models.IInvoice)">
            <summary>
            Task converts ItemCacheLineItems to InvoiceLineItems and adds them to the invoice
            </summary>
            <param name="value">The <see cref="T:NKart.Core.Models.IInvoice"/> to which to add the line items</param>
            <returns>The <see cref="T:Umbraco.Core.Attempt"/></returns>
        </member>
        <member name="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ValidateCommonCurrency">
            <summary>
            Validates that all line items are priced in the same currency.  If a currency has not been set
            the line item is tagged with the default currency from Store Settings
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ValidateCommonCurrency.#ctor(NKart.Core.Sales.SalePreparationBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ValidateCommonCurrency"/> class.
            </summary>
            <param name="salePreparation">
            The sale preparation.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.InvoiceCreation.SalesPreparation.ValidateCommonCurrency.PerformTask(NKart.Core.Models.IInvoice)">
            <summary>
            The perform task.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.OfferConstraints.IOfferProcessor">
            <summary>
            The OfferAttemptChain interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.OfferConstraints.IOfferProcessor.IsInitialized">
            <summary>
            Gets a value indicating whether offer processor is initialized.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.IOfferProcessor.Initialize(System.Collections.Generic.IEnumerable{NKart.Core.Marketing.Constraints.OfferConstraintComponentBase},NKart.Core.Marketing.Rewards.OfferRewardComponentBase)">
            <summary>
            Initializes the processor
            </summary>
            <param name="constraints">
            The constraints.
            </param>
            <param name="reward">
            The reward.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.IOfferProcessor.TryApplyConstraints(System.Object,NKart.Core.Models.ICustomerBase)">
            <summary>
            Executes the task chain to apply the constraints
            </summary>
            <param name="validatedAgainst">
            The validated against.
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.IOfferProcessor.TryAward(System.Object,NKart.Core.Models.ICustomerBase)">
            <summary>
            Try to apply the award
            </summary>
            <param name="validatedAgainst">
            The validated against.
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.OfferConstraints.IOfferProcessorFactory">
            <summary>
            Defines a OfferProcessorFactory.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.IOfferProcessorFactory.Build(NKart.Core.Marketing.Offer.OfferBase)">
            <summary>
            Builds the <see cref="T:NKart.Core.Chains.OfferConstraints.IOfferProcessor"/>
            </summary>
            <param name="offer">
            The offer.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Chains.OfferConstraints.IOfferProcessor"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.OfferConstraints.IOfferConstraintChainTask">
            <summary>
            Marker interface for OfferConstraintChainTask.
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.OfferConstraints.LineItemContainerOfferProcessor">
            <summary>
            The line item collection offer constraint chain.
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.OfferConstraints.LineItemContainerOfferConstraintTask">
            <summary>
            A constraint task for constraints that pass <see cref="T:NKart.Core.Models.LineItemCollection"/>s
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.LineItemContainerOfferConstraintTask.#ctor(NKart.Core.Marketing.Constraints.OfferConstraintComponentBase{NKart.Core.Models.ILineItemContainer},NKart.Core.Models.ICustomerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.OfferConstraints.LineItemContainerOfferConstraintTask"/> class.
            </summary>
            <param name="component">
            The component.
            </param>
            <param name="customer">
            The customer.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.LineItemContainerOfferConstraintTask.PerformTask(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Executes the component task
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2">
            <summary>
            The offer constraint chain base.
            </summary>
            <typeparam name="TAward">
            The type of the award by parameter
            </typeparam>
            <typeparam name="TConstraint">
            The type of constraints
            </typeparam>
        </member>
        <member name="F:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2._taskHandlers">
            <summary>
            The _task handlers.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2._constraints">
            <summary>
            The constraints.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2._reward">
            <summary>
            The reward.
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2.IsInitialized">
            <summary>
            Gets a value indicating whether is initialized.
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2.TaskHandlers">
            <summary>
            Gets the list of task handlers
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2.TryApplyConstraints(System.Object,NKart.Core.Models.ICustomerBase)">
            <summary>
            Applies the constraints
            </summary>
            <param name="validatedAgainst">
            The constrain by.
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2.TryAward(System.Object,NKart.Core.Models.ICustomerBase)">
            <summary>
            Try to apply the award
            </summary>
            <param name="validatedAgainst">
            The validated against.
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2.Initialize(System.Collections.Generic.IEnumerable{NKart.Core.Marketing.Constraints.OfferConstraintComponentBase},NKart.Core.Marketing.Rewards.OfferRewardComponentBase)">
            <summary>
            Initializes the processor.
            </summary>
            <param name="constraints">
            The constraints.
            </param>
            <param name="reward">
            The reward.
            </param>
            <remarks>
            We need this for because we don't know the types upfront
            </remarks>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2.ConvertConstraintToTask(NKart.Core.Marketing.Constraints.OfferConstraintComponentBase{`0},NKart.Core.Models.ICustomerBase)">
            <summary>
            Convert constraint to task.
            </summary>
            <param name="constraint">
            The constraint.
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Chains.OfferConstraints.OfferConstraintChainTask`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.OfferProcessorBase`2.BuildConstraintChain(System.Collections.Generic.IEnumerable{NKart.Core.Chains.OfferConstraints.OfferConstraintChainTask{`0}})">
            <summary>
            The build chain.
            </summary>
            <param name="tasks">
            The tasks.
            </param>
        </member>
        <member name="T:NKart.Core.Chains.OfferConstraints.OfferConstraintChainForAttribute">
            <summary>
            The offer constraint chain for attribute.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.OfferConstraintChainForAttribute.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.OfferConstraints.OfferConstraintChainForAttribute"/> class.
            </summary>
            <param name="constraintType">
            The type of constraint.
            </param>
            <param name="rewardType">
            The reward Type.
            </param>
        </member>
        <member name="P:NKart.Core.Chains.OfferConstraints.OfferConstraintChainForAttribute.ConstraintType">
            <summary>
            Gets the chain type.
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.OfferConstraints.OfferConstraintChainForAttribute.RewardType">
            <summary>
            Gets the reward type.
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.OfferConstraints.OfferProcessorFactory">
            <summary>
            The offer constraint chain resolver.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.OfferConstraints.OfferProcessorFactory._instanceTypes">
            <summary>
            The instance types.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.OfferProcessorFactory.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.OfferConstraints.OfferProcessorFactory"/> class.
            </summary>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.OfferConstraints.OfferProcessorFactory.Build(NKart.Core.Marketing.Offer.OfferBase)">
            <summary>
            Builds the <see cref="T:NKart.Core.Chains.OfferConstraints.IOfferProcessor"/>
            </summary>
            <param name="offer">
            The offer.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Chains.OfferConstraints.IOfferProcessor"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.OfferConstraints.OfferConstraintChainTask`1">
            <summary>
            The offer constraint chain task.
            </summary>
            <typeparam name="T">
            The type of 
            </typeparam>
        </member>
        <member name="F:NKart.Core.Chains.OfferConstraints.OfferConstraintChainTask`1._component">
            <summary>
            The <see cref="T:NKart.Core.Marketing.Offer.OfferComponentBase"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.OfferConstraints.OfferConstraintChainTask`1._customer">
            <summary>
            The <see cref="T:NKart.Core.Models.ICustomerBase"/>.
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.AttemptChainTaskBase`1">
            <summary>
            The attempt chain task base.
            </summary>
            <typeparam name="T">
            The type of value
            </typeparam>
        </member>
        <member name="M:NKart.Core.Chains.AttemptChainTaskBase`1.PerformTask(`0)">
            <summary>
            Defines an attempt chain task
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.ChainTaskResolver">
            <summary>
            Utility class to resolve chain tasks
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.ChainTaskResolver.ResolveAttemptChainByAlias``1(System.String)">
            <summary>
            Resolves a chain of tasks, where the tasks do not require have parameters in the constructor
            </summary>
            <typeparam name="T">The type of the task</typeparam>
            <param name="chainAlias">The 'configuration' alias of the chain.  This is the merchello.config value</param>
            <returns>A collection of instantiated of AttemptChainTask</returns>
        </member>
        <member name="M:NKart.Core.Chains.ChainTaskResolver.ResolveAttemptChainByAlias``1(System.String,System.Object[])">
            <summary>
            Resolves a chain of task, where task require parameters in the constructor
            </summary>
            <typeparam name="T">The type of the task</typeparam>
            <param name="chainAlias">The 'configuration' alias of the chain.  This is the merchello.config value</param>
            <param name="ctrValues">Constructor values</param>
            <returns>A collection of instantiated of AttemptChainTask</returns>
        </member>
        <member name="M:NKart.Core.Chains.ChainTaskResolver.GetTypesForChain(System.String)">
            <summary>
            Gets a list of types from the merchello.config file
            </summary>
            <param name="chainAlias">The 'configuration' alias of the chain.  This is the merchello.config value</param>
            <returns>The collection of types to instantiate</returns>
        </member>
        <member name="T:NKart.Core.Chains.OrderCreation.ConvertInvoiceItemsToOrderItemsTask">
            <summary>
            The convert invoice items to order items task.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.OrderCreation.ConvertInvoiceItemsToOrderItemsTask.#ctor(NKart.Core.Models.IInvoice)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.OrderCreation.ConvertInvoiceItemsToOrderItemsTask"/> class.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.OrderCreation.ConvertInvoiceItemsToOrderItemsTask.PerformTask(NKart.Core.Models.IOrder)">
            <summary>
            Task converts InvoiceLineItems to OrderLineItems and adds them to the order
            </summary>
            <param name="value">The <see cref="T:NKart.Core.Models.IOrder"/> to which to add the line items</param>
            <returns>The <see cref="T:Umbraco.Core.Attempt"/></returns>
        </member>
        <member name="T:NKart.Core.Chains.OrderCreation.OrderCreationAttemptChainTaskBase">
            <summary>
            The order creation attempt chain task base.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.OrderCreation.OrderCreationAttemptChainTaskBase._invoice">
            <summary>
            The invoice.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.OrderCreation.OrderCreationAttemptChainTaskBase.#ctor(NKart.Core.Models.IInvoice)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.OrderCreation.OrderCreationAttemptChainTaskBase"/> class.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
        </member>
        <member name="P:NKart.Core.Chains.OrderCreation.OrderCreationAttemptChainTaskBase.Invoice">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IInvoice"/> object
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.ShipmentCreation.OrderAttemptChainTaskBase">
            <summary>
            The order attempt chain task base.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.ShipmentCreation.OrderAttemptChainTaskBase._merchelloContext">
            <summary>
            The _merchello context.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.ShipmentCreation.OrderAttemptChainTaskBase._order">
            <summary>
            The _order.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.ShipmentCreation.OrderAttemptChainTaskBase._keysToShip">
            <summary>
            The collection of keys associated with the order line items that are to be added to the shipment
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.ShipmentCreation.OrderAttemptChainTaskBase.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IOrder,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.ShipmentCreation.OrderAttemptChainTaskBase"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="order">
            The order.
            </param>
            <param name="keysToShip">
            The keys to ship.
            </param>
        </member>
        <member name="P:NKart.Core.Chains.ShipmentCreation.OrderAttemptChainTaskBase.MerchelloContext">
            <summary>
            Gets the <see cref="T:NKart.Core.IMerchelloContext"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.ShipmentCreation.OrderAttemptChainTaskBase.Order">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IOrder"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.ShipmentCreation.OrderAttemptChainTaskBase.KeysToShip">
            <summary>
            Gets the keys to ship.
            </summary>
        </member>
        <member name="T:NKart.Core.Chains.ShipmentCreation.AddShippableOrderLineItemsToShipmentTask">
            <summary>
            The add shippable order line items to shipment task.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.ShipmentCreation.AddShippableOrderLineItemsToShipmentTask.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IOrder,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.ShipmentCreation.AddShippableOrderLineItemsToShipmentTask"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="order">
            The order.
            </param>
            <param name="keysToShip">
            The keys To Ship.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.ShipmentCreation.AddShippableOrderLineItemsToShipmentTask.PerformTask(NKart.Core.Models.IShipment)">
            <summary>
            The perform task.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.ShipmentCreation.RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask">
            <summary>
            Removes order items from inventory
            </summary>
            <remarks>
            
            Note: this behavior is different than most other tasks as it actually updates database information.
            
            </remarks>
        </member>
        <member name="F:NKart.Core.Chains.ShipmentCreation.RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask._shipmentService">
            <summary>
            The shipment service.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.ShipmentCreation.RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask._orderService">
            <summary>
            The order service.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.ShipmentCreation.RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask._productVariantService">
            <summary>
            The product variant service.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.ShipmentCreation.RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IOrder,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.ShipmentCreation.RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="order">
            The order.
            </param>
            <param name="keysToShip">
            The keys to ship.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.ShipmentCreation.RemoveShipmentOrderItemsFromInventoryAndPersistShipmentTask.PerformTask(NKart.Core.Models.IShipment)">
            <summary>
            The perform task.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.ShipmentCreation.SetOrderStatusTask">
            <summary>
            The set order status task.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.ShipmentCreation.SetOrderStatusTask._orderService">
            <summary>
            The _order service.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.ShipmentCreation.SetOrderStatusTask._shipmentService">
            <summary>
            The _shipment service.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.ShipmentCreation.SetOrderStatusTask.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IOrder,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.ShipmentCreation.SetOrderStatusTask"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="order">
            The order.
            </param>
            <param name="keysToShip">
            The keys To Ship.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.ShipmentCreation.SetOrderStatusTask.PerformTask(NKart.Core.Models.IShipment)">
            <summary>
            The perform task.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.ShipmentCreation.SetOrderStatusTask.SaveOrderStatus(NKart.Core.Models.IShipment,System.Guid)">
            <summary>
            The save order status.
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.IAttemptChainTask`1">
            <summary>
            Defines a pipeline task
            </summary>
            <typeparam name="T">
            The type of value
            </typeparam>
        </member>
        <member name="M:NKart.Core.Chains.IAttemptChainTask`1.PerformTask(`0)">
            <summary>
            Defines an attempt chain task
            </summary>
            <param name="arg">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Chains.IAttemptChainTaskHandler`1">
            <summary>
            Defines the AttemptChainTaskHandler
            </summary>
            <typeparam name="T">The type of value</typeparam>
        </member>
        <member name="M:NKart.Core.Chains.IAttemptChainTaskHandler`1.Execute(`0)">
            <summary>
            Attempt to execute the task.  If successful, executes the next task until.  This process is repeated until
            the end of chain Task is reached.
            </summary>
            <param name="arg">
            The type of value
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.IAttemptChainTaskHandler`1.RegisterNext(NKart.Core.Chains.IAttemptChainTaskHandler{`0})">
            <summary>
            Registers the next task in the chain.
            </summary>
            <param name="next">
            The next task.
            </param>
        </member>
        <member name="T:NKart.Core.Chains.AttemptChainEndOfChainHandler`1">
            <summary>
            Represents an end of chain PipelineTaskHander.  This terminates the task chain.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:NKart.Core.Chains.AttemptChainEndOfChainHandler`1._instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="P:NKart.Core.Chains.AttemptChainEndOfChainHandler`1.Instance">
            <summary>
            Gets the instance.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.AttemptChainEndOfChainHandler`1.Execute(`0)">
            <summary>
            Executes the task
            </summary>
            <param name="arg"></param>
            <returns><see cref="T:Umbraco.Core.Attempt"/> of T</returns>
        </member>
        <member name="M:NKart.Core.Chains.AttemptChainEndOfChainHandler`1.RegisterNext(NKart.Core.Chains.IAttemptChainTaskHandler{`0})">
            <summary>
            Registers the next task
            </summary>
            <param name="next"></param>
        </member>
        <member name="T:NKart.Core.Chains.AttemptChainTaskHandler`1">
            <summary>
            Represents a PipelineTaskHandler
            </summary>
            <typeparam name="T">The type of value passed in the chain</typeparam>
        </member>
        <member name="F:NKart.Core.Chains.AttemptChainTaskHandler`1._task">
            <summary>
            The task.
            </summary>
        </member>
        <member name="F:NKart.Core.Chains.AttemptChainTaskHandler`1._next">
            <summary>
            The next.
            </summary>
        </member>
        <member name="M:NKart.Core.Chains.AttemptChainTaskHandler`1.#ctor(NKart.Core.Chains.IAttemptChainTask{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Chains.AttemptChainTaskHandler`1"/> class.
            </summary>
            <param name="task">
            The task.
            </param>
        </member>
        <member name="M:NKart.Core.Chains.AttemptChainTaskHandler`1.Execute(`0)">
            <summary>
            Attempt to execute the task.  If successful, executes the next task until.  This process is repeated until
            the end of chain Task is reached.
            </summary>
            <param name="arg">
            The value.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Chains.AttemptChainTaskHandler`1.RegisterNext(NKart.Core.Chains.IAttemptChainTaskHandler{`0})">
            <summary>
            The register next.
            </summary>
            <param name="next">
            The next.
            </param>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutContext">
            <summary>
            Merchello's default checkout context.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContext.#ctor(NKart.Core.Models.ICustomerBase,NKart.Core.Models.IItemCache)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutContext"/> class.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="itemCache">
            The item cache.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContext.#ctor(NKart.Core.Models.ICustomerBase,NKart.Core.Models.IItemCache,NKart.Core.Checkout.ICheckoutContextSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutContext"/> class.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="itemCache">
            The item cache.
            </param>
            <param name="settings">
            The settings.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContext.#ctor(NKart.Core.Models.ICustomerBase,NKart.Core.Models.IItemCache,NKart.Core.IMerchelloContext,NKart.Core.Checkout.ICheckoutContextSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutContext"/> class.
            </summary>
            <param name="customer">
            The <see cref="T:NKart.Core.Models.ICustomerBase"/> associated with this checkout.
            </param>
            <param name="itemCache">
            The temporary <see cref="T:NKart.Core.Models.IItemCache"/> of the basket <see cref="T:NKart.Core.Models.IItemCache"/> to be used in the
            checkout process.
            </param>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </param>
            <param name="settings">
            The version change settings.
            </param>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.MerchelloContext">
            <summary>
            Gets the merchello context.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.Services">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IServiceContext"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.Gateways">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.IGatewayContext"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.ItemCache">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IItemCache"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.Customer">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.ICustomerBase"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.VersionKey">
            <summary>
            Gets the version key.
            </summary>
            <remarks>
            This is used for validation purposes to assert that the customer has not made changes to their basket/cart
            and thus require certain checkout process (such as shipping rates and taxation) do not need to be recalculated.
            </remarks>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.IsNewVersion">
            <summary>
            Gets a value indicating whether is new version.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.ApplyTaxesToInvoice">
            <summary>
            Gets or sets a value indicating whether or not to apply taxes to invoice.
            </summary>
            <remarks>
            Setting is only valid if store setting is set to apply taxes to the invoice and is NOT used
            when taxes are included in the product pricing.
            </remarks>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.InvoiceNumberPrefix">
            <summary>
            Gets or sets a prefix to be prepended to an invoice number.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.RaiseCustomerEvents">
            <summary>
            Gets or sets a value indicating whether raise customer events.
            </summary>
            <remarks>
            In some implementations, there may be quite a few saves to the customer record.  Use case for setting this to 
            false would be an API notification on a customer record change to prevent spamming of the notification.
            </remarks>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.Cache">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Cache.IRuntimeCacheProvider"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContext.Settings">
            <summary>
            Gets the version change settings.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContext.CreateCheckoutContext(NKart.Core.Models.ICustomerBase,System.Guid)">
            <summary>
            Gets the <see cref="T:NKart.Core.Checkout.ICheckoutContext"/> for the customer.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="versionKey">
            The version key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Checkout.ICheckoutContext"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContext.CreateCheckoutContext(NKart.Core.Models.ICustomerBase,System.Guid,NKart.Core.Checkout.ICheckoutContextSettings)">
            <summary>
            Gets the <see cref="T:NKart.Core.Checkout.ICheckoutContext"/> for the customer.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="versionKey">
            The version key.
            </param>
            <param name="settings">
            The settings.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Checkout.ICheckoutContext"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContext.CreateCheckoutContext(NKart.Core.IMerchelloContext,NKart.Core.Models.ICustomerBase,System.Guid,NKart.Core.Checkout.ICheckoutContextSettings)">
            <summary>
            Gets the <see cref="T:NKart.Core.Checkout.ICheckoutContext"/> for the customer
            </summary>
            <param name="merchelloContext">
            The merchello Context.
            </param>
            <param name="customer">
            The customer.
            </param>
            <param name="versionKey">
            The version Key.
            </param>
            <param name="settings">
            The checkout context version change settings.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Checkout.ICheckoutContext"/> associated with the customer checkout
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContext.MakeCacheKey(NKart.Core.Models.ICustomerBase,System.Guid)">
            <summary>
            Generates a unique cache key for runtime caching of the <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="versionKey">
            The version Key.
            </param>
            <returns>
            The a string used as a runtime cache key.
            </returns>
            <remarks>
            
            CacheKey is assumed to be unique per customer and globally for CheckoutBase.  Therefore this will NOT be unique if 
            to different checkouts are happening for the same customer at the same time - we consider that an extreme edge case.
            
            </remarks>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutEventArgs`1">
            <summary>
            The <see cref="T:NKart.Core.Checkout.ICheckoutContext"/> event args.
            </summary>
            <typeparam name="T">
            The type of the second argument
            </typeparam>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutEventArgs`1.#ctor(NKart.Core.Models.ICustomerBase,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutEventArgs`1"/> class.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutEventArgs`1.Customer">
            <summary>
            Gets the customer.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutEventArgs`1.Item">
            <summary>
            Gets the item.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutContextManagerBase">
            <summary>
            A base class for managers that require the <see cref="T:NKart.Core.Checkout.ICheckoutContext"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContextManagerBase.#ctor(NKart.Core.Checkout.ICheckoutContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutContextManagerBase"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextManagerBase.Context">
            <summary>
            Gets the <see cref="T:NKart.Core.Checkout.ICheckoutContext"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContextManagerBase.Reset">
            <summary>
            Resets (removes) data.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutContextSettings">
            <summary>
            The checkout context version change settings.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutContextSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutContextSettings"/> class.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextSettings.InvoiceNumberPrefix">
            <summary>
            Gets or sets the invoice number prefix to be added to the generated invoice in the invoice builder.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextSettings.ApplyTaxesToInvoice">
            <summary>
            Gets or sets a value indicating whether or not to apply taxes to generated invoice.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextSettings.RaiseCustomerEvents">
            <summary>
            Gets or sets a value indicating whether raise customer events.
            </summary>
            <remarks>
            In some implementations, there may be quite a few saves to the customer record.  Use case for setting this to 
            false would be an API notification on a customer record change to prevent spamming of the notification.
            </remarks>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextSettings.ResetCustomerManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the customer manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextSettings.ResetPaymentManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the payment manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextSettings.ResetExtendedManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the extended manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextSettings.ResetShippingManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the shipping manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextSettings.ResetOfferManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the offer manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutContextSettings.EmptyBasketOnPaymentSuccess">
            <summary>
            Gets or sets a value indicating whether to empty the basket on payment success.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutCustomerDataManagerBase">
            <summary>
            A checkout manager base class for saving customer data.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerDataManagerBase.#ctor(NKart.Core.Checkout.ICheckoutContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutCustomerDataManagerBase"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerDataManagerBase.SaveCustomer">
            <summary>
            Saves the customer.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerDataManagerBase.SaveCustomerTempData(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves the offer codes.
            </summary>
            <param name="key">
            The key or alias.
            </param>
            <param name="data">
            The data.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerDataManagerBase.BuildVersionedCustomerTempData(System.String)">
            <summary>
            Gets a safe list of customer temp data (asserts the version key).
            </summary>
            <param name="key">
            The key or alias.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.List`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutCustomerManagerBase">
            <summary>
            A base class for CheckoutCustomerManagers.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerManagerBase.#ctor(NKart.Core.Checkout.ICheckoutContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutCustomerManagerBase"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerManagerBase.SaveBillToAddress(NKart.Core.Models.IAddress)">
            <summary>
            Saves the billing address.
            </summary>
            <param name="billToAddress">
            The bill to address.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerManagerBase.SaveShipToAddress(NKart.Core.Models.IAddress)">
            <summary>
            Saves the shipping.
            </summary>
            <param name="shipToAddress">
            The shipping address.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerManagerBase.GetBillToAddress">
            <summary>
            Gets the billing address.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.IAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerManagerBase.GetShipToAddress">
            <summary>
            Gets the shipping to address.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.IAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerManagerBase.Reset">
            <summary>
            Clears the customer data on context reset.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutCustomerManagerBase.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutCustomerTempData">
            <summary>
            Utility class for saving and retrieving serialized strings arrays to customer's ExtendedDataCollection by checkout version.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutCustomerTempData.VersionKey">
            <summary>
            Gets or sets the version key to validate offer codes are validate with this preparation
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutCustomerTempData.Data">
            <summary>
            Gets or sets the enumerable string of data.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutCustomerTempData.ResetWasCancelled">
            <summary>
            Gets or sets a value indicating whether the reset was cancelled.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutExtendedManagerBase">
            <summary>
            A base class for CheckoutExtendedManagers.
            </summary>
            <remarks>
            Contains methods for custom invoices
            </remarks>
        </member>
        <member name="F:NKart.Core.Checkout.CheckoutExtendedManagerBase._messages">
            <summary>
            The list of messages to be converted into invoice notes.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutExtendedManagerBase.#ctor(NKart.Core.Checkout.ICheckoutContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutExtendedManagerBase"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutExtendedManagerBase.Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutExtendedManagerBase.AddItem(NKart.Core.Models.ILineItem)">
            <summary>
            Adds a <see cref="T:NKart.Core.Models.ILineItem"/> to the collection of items
            </summary>
            <param name="lineItem">
            The line item.
            </param>
            <remarks>
            Intended for custom line item types
            http://issues.merchello.com/youtrack/issue/M-381
            </remarks>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutExtendedManagerBase.RemoveItem(NKart.Core.Models.ILineItem)">
            <summary>
            Removes a line item for the collection of items
            </summary>
            <param name="lineItem">
            The line item to be removed
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutExtendedManagerBase.ClearNotes">
            <summary>
            Clears all notes.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutExtendedManagerBase.SaveNotes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of messages as notes.
            </summary>
            <param name="messages">
            The messages.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutExtendedManagerBase.AddNote(System.String)">
            <summary>
            Adds a message to be associated with the invoice as a note on invoice creation.
            </summary>
            <param name="message">
            The message or note body text.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutExtendedManagerBase.GetNotes">
            <summary>
            Gets any previously added notes.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutExtendedManagerBase.Reset">
            <summary>
            Clears the notes.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutExtendedManagerBase.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutManagerBase">
            <summary>
            The checkout manager base.
            </summary>
        </member>
        <member name="F:NKart.Core.Checkout.CheckoutManagerBase._invoiceBuilder">
            <summary>
            The invoice builder.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutManagerBase.#ctor(NKart.Core.Checkout.ICheckoutContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutManagerBase"/> class.
            </summary>
            <param name="checkoutContext">
            The checkout Context.
            </param>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutManagerBase.Customer">
            <summary>
            Gets the checkout manager for customer information.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutManagerBase.Extended">
            <summary>
            Gets the checkout extended manager for custom invoicing.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutManagerBase.Offer">
            <summary>
            Gets the checkout manager for marketing offers.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutManagerBase.Shipping">
            <summary>
            Gets the checkout manager for shipping.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutManagerBase.Payment">
            <summary>
            Gets the payment.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutManagerBase.InvoiceBuilder">
            <summary>
            Gets the invoice builder.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Builders.BuildChainBase`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutManagerBase.Reset">
            <summary>
            Resets the checkout manager by removing persisted information.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutManagerBase.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutManagerExtensions">
            <summary>
            Extension methods for the CheckoutManager.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutManagerExtensions.CloneItemCache(NKart.Core.Checkout.ICheckoutManagerBase)">
            <summary>
            Gets a clone of the ItemCache
            </summary>
            <param name="checkoutManager">
            The <see cref="T:NKart.Core.Checkout.ICheckoutManagerBase"/>.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutManagerExtensions.CloneItemCache(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Clones a <see cref="T:NKart.Core.Models.ILineItemContainer"/> as <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutManagerExtensions.CreateNewLineContainer(System.Collections.Generic.IEnumerable{NKart.Core.Models.ILineItem})">
            <summary>
            Creates a new <see cref="T:NKart.Core.Models.ILineItemContainer"/> with filtered items.
            </summary>
            <param name="filteredItems">
            The line items.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ILineItemContainer"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutOfferManagerBase">
            <summary>
            Represents a checkout offer manager.
            </summary>
        </member>
        <member name="F:NKart.Core.Checkout.CheckoutOfferManagerBase._offerCodeTempData">
            <summary>
            The offer code temp data.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutOfferManagerBase.#ctor(NKart.Core.Checkout.ICheckoutContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutOfferManagerBase"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutOfferManagerBase.OfferCodes">
            <summary>
            Gets the offer codes.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutOfferManagerBase.RemoveOfferCode(System.String)">
            <summary>
            Removes an offer code from the OfferCodes collection.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutOfferManagerBase.ClearOfferCodes">
            <summary>
            Clears the offer codes collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutOfferManagerBase.Reset">
            <summary>
            Clears the offer codes.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutOfferManagerBase.RedeemCouponOffer(System.String)">
            <summary>
            Attempts to redeem an offer to the sale.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Marketing.Offer.IOfferRedemptionResult`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutOfferManagerBase.TryApplyOffer``2(``0,System.String)">
            <summary>
            Attempts to apply an offer to the the checkout.
            </summary>
            <param name="validateAgainst">
            The object to validate against
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of award
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
            <remarks>
            Custom offer types
            TODO RSS internal abstract will make it impossible for people to write their own CheckoutOfferManagers
            </remarks>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutOfferManagerBase.SaveOfferCode(System.String)">
            <summary>
            Saves offer code.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutOfferManagerBase.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutPaymentManagerBase">
            <summary>
            A base class for CheckoutPaymentManagers.
            </summary>
        </member>
        <member name="F:NKart.Core.Checkout.CheckoutPaymentManagerBase._invoiceBuilder">
            <summary>
            A function to instantiate an invoice BuilderChain.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.#ctor(NKart.Core.Checkout.ICheckoutContext,NKart.Core.Builders.IBuilderChain{NKart.Core.Models.IInvoice})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutPaymentManagerBase"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
            <param name="invoiceBuilder">
            A lazy instantiate to get an invoice BuilderChain.
            </param>
        </member>
        <member name="E:NKart.Core.Checkout.CheckoutPaymentManagerBase.InvoicePrepared">
            <summary>
            Occurs after an invoice has been prepared.
            </summary>
        </member>
        <member name="E:NKart.Core.Checkout.CheckoutPaymentManagerBase.Finalizing">
            <summary>
            Occurs after a sale has been finalized.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutPaymentManagerBase.InvoiceBuilder">
            <summary>
            Gets the <see cref="T:NKart.Core.Builders.IBuilderChain`1"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.IsReadyToInvoice">
            <summary>
            Gets a value indicating whether or not the <see cref="T:NKart.Core.Checkout.ICheckoutPaymentManager"/> is ready to prepare an <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <returns>
            True or false
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.PrepareInvoice">
            <summary>
            Generates an <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <returns>An <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.PrepareInvoice(NKart.Core.Builders.IBuilderChain{NKart.Core.Models.IInvoice})">
            <summary>
            Generates an <see cref="T:NKart.Core.Models.IInvoice"/> representing the bill for the current "checkout order"
            </summary>
            <param name="invoiceBuilder">The invoice builder class</param>
            <returns>An <see cref="T:NKart.Core.Models.IInvoice"/> that is not persisted to the database.</returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.ClearPaymentMethod">
            <summary>
            Removes a previously saved payment method..
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.SavePaymentMethod(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.IPaymentMethod"/> to <see cref="T:NKart.Core.Models.ICustomerBase"/> extended data
            </summary>
            <param name="paymentMethod">
            The payment Method.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.GetPaymentGatewayMethods">
            <summary>
            Gets a list of all possible Payment Methods
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>s</returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.GetPaymentMethod">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPaymentMethod"/> from <see cref="T:NKart.Core.Models.ICustomerBase"/> extended data
            </summary>
            <returns>
            The previously saved <see cref="T:NKart.Core.Models.IPaymentMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.AuthorizePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.AuthorizePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.AuthorizePayment(System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.AuthorizePayment(System.Guid)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.AuthorizeCapturePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.AuthorizeCapturePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.AuthorizeCapturePayment(System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.AuthorizeCapturePayment(System.Guid)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.OnFinalizing(NKart.Core.Gateways.Payment.IPaymentResult)">
            <summary>
            Raises the Finalizing event.
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutPaymentManagerBase.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.CheckoutShippingManagerBase">
            <summary>
            A base class for CheckoutShippingManagers.
            </summary>
        </member>
        <member name="F:NKart.Core.Checkout.CheckoutShippingManagerBase._shippingTaxable">
            <summary>
            A value indicating whether or not shipping charges are taxable.
            </summary>
            <remarks>
            Determined by the global back office setting.
            </remarks>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutShippingManagerBase.#ctor(NKart.Core.Checkout.ICheckoutContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Checkout.CheckoutShippingManagerBase"/> class.
            </summary>
            <param name="context">
            The context.
            </param>
        </member>
        <member name="P:NKart.Core.Checkout.CheckoutShippingManagerBase.ShippingIsTaxable">
            <summary>
            Gets a value indicating whether or not shipping is taxable.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutShippingManagerBase.SaveShipmentRateQuote(NKart.Core.Gateways.Shipping.IShipmentRateQuote)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> as a shipment line item
            </summary>
            <param name="approvedShipmentRateQuote">
            The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> to be saved
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutShippingManagerBase.SaveShipmentRateQuote(System.Collections.Generic.IEnumerable{NKart.Core.Gateways.Shipping.IShipmentRateQuote})">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s as shipment line items
            </summary>
            <param name="approvedShipmentRateQuotes">
            The collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s to be saved
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutShippingManagerBase.ClearShipmentRateQuotes">
            <summary>
            Clears all <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s previously saved
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutShippingManagerBase.Reset">
            <summary>
            Clears the shipment rate quotes.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutShippingManagerBase.AddShipmentRateQuoteLineItem(NKart.Core.Gateways.Shipping.IShipmentRateQuote)">
            <summary>
            Maps the <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> to a <see cref="T:NKart.Core.Models.ILineItem"/> 
            </summary>
            <param name="shipmentRateQuote">The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> to be added as a <see cref="T:NKart.Core.Models.ILineItem"/></param>
        </member>
        <member name="M:NKart.Core.Checkout.CheckoutShippingManagerBase.Initialize">
            <summary>
            Initializes the manager.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.ICheckoutContext">
            <summary>
            Defines a checkout context.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContext.MerchelloContext">
            <summary>
            Gets the <see cref="T:NKart.Core.IMerchelloContext"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContext.Services">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IServiceContext"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContext.Gateways">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.IGatewayContext"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContext.ItemCache">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IItemCache"/>.
            </summary>
            <remarks>
            This is a temporary collection of line items that is copied from the basket that can be modified
            while preparing the final invoice.
            </remarks>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContext.Customer">
            <summary>
            Gets the customer associated with the checkout.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContext.VersionKey">
            <summary>
            Gets the checkout version key.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContext.IsNewVersion">
            <summary>
            Gets a value indicating whether this context is a new checkout version.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContext.Cache">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Cache.IRuntimeCacheProvider"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContext.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.ICheckoutContextManagerBase">
            <summary>
            Defines a checkout context manager.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextManagerBase.Context">
            <summary>
            Gets the <see cref="T:NKart.Core.Checkout.ICheckoutContext"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutContextManagerBase.Reset">
            <summary>
            Resets (removes) data.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.ICheckoutContextSettings">
            <summary>
            The CheckoutContextSettings interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextSettings.InvoiceNumberPrefix">
            <summary>
            Gets or sets the invoice number prefix to be added to the generated invoice in the invoice builder.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextSettings.ApplyTaxesToInvoice">
            <summary>
            Gets or sets a value indicating whether or not to apply taxes to generated invoice.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextSettings.RaiseCustomerEvents">
            <summary>
            Gets or sets a value indicating whether raise customer events.
            </summary>
            <remarks>
            In some implementations, there may be quite a few saves to the customer record.  Use case for setting this to 
            false would be an API notification on a customer record change to prevent spamming of the notification.
            </remarks>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextSettings.ResetCustomerManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the customer manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextSettings.ResetPaymentManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the payment manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextSettings.ResetExtendedManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the extended manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextSettings.ResetShippingManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the shipping manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextSettings.ResetOfferManagerDataOnVersionChange">
            <summary>
            Gets or sets a value indicating whether reset the offer manager data on version change.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutContextSettings.EmptyBasketOnPaymentSuccess">
            <summary>
            Gets or sets a value indicating whether to empty the basket on payment success.
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.ICheckoutCustomerManager">
            <summary>
            Defines a checkout customer manager.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutCustomerManager.SaveBillToAddress(NKart.Core.Models.IAddress)">
            <summary>
            Saves the bill to address
            </summary>
            <param name="billToAddress">The billing <see cref="T:NKart.Core.Models.IAddress"/></param>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutCustomerManager.SaveShipToAddress(NKart.Core.Models.IAddress)">
            <summary>
            Saves the ship to address
            </summary>
            <param name="shipToAddress">The shipping <see cref="T:NKart.Core.Models.IAddress"/></param>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutCustomerManager.GetBillToAddress">
            <summary>
            Gets the bill to address
            </summary>
            <returns>Return the billing <see cref="T:NKart.Core.Models.IAddress"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutCustomerManager.GetShipToAddress">
            <summary>
            Gets the bill to address
            </summary>
            <returns>Return the billing <see cref="T:NKart.Core.Models.IAddress"/></returns>
        </member>
        <member name="T:NKart.Core.Checkout.ICheckoutExtendedManager">
            <summary>
            The CheckoutExtendedManager.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutExtendedManager.AddItem(NKart.Core.Models.ILineItem)">
            <summary>
            Adds a <see cref="T:NKart.Core.Models.ILineItem"/> to the collection of items
            </summary>
            <param name="lineItem">
            The line item.
            </param>
            <remarks>
            Intended for custom line item types
            http://issues.merchello.com/youtrack/issue/M-381
            </remarks>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutExtendedManager.RemoveItem(NKart.Core.Models.ILineItem)">
            <summary>
            Removes a line item from the collection of items
            </summary>
            <param name="lineItem">
            The line item to be removed
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutExtendedManager.ClearNotes">
            <summary>
            Clears all notes.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutExtendedManager.SaveNotes(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Saves a list of messages as notes.
            </summary>
            <param name="messages">
            The messages.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutExtendedManager.AddNote(System.String)">
            <summary>
            Adds to get associated with the invoice as a note on invoice creation.
            </summary>
            <param name="message">
            The message or note body text.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutExtendedManager.GetNotes">
            <summary>
            Gets any previously added notes.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Checkout.ICheckoutOfferManager">
            <summary>
            A manager for dealing with marketing offers during the checkout workflow.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutOfferManager.OfferCodes">
            <summary>
            Gets the offer codes.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutOfferManager.RemoveOfferCode(System.String)">
            <summary>
            Removes an offer code from the OfferCodes collection.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutOfferManager.ClearOfferCodes">
            <summary>
            Clears the offer codes collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutOfferManager.RedeemCouponOffer(System.String)">
            <summary>
            Attempts to redeem an offer to the sale.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Marketing.Offer.IOfferRedemptionResult`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Checkout.ICheckoutPaymentManager">
            <summary>
            Defines a manager that is responsible for the payment aspects of the checkout process.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.IsReadyToInvoice">
            <summary>
            True/false indicating whether or not the <see cref="T:NKart.Core.Checkout.ICheckoutPaymentManager"/> is ready to prepare an <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.PrepareInvoice">
            <summary>
            Generates an <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <returns>An <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.PrepareInvoice(NKart.Core.Builders.IBuilderChain{NKart.Core.Models.IInvoice})">
            <summary>
            Generates an <see cref="T:NKart.Core.Models.IInvoice"/> representing the bill for the current "checkout order"
            </summary>
            <param name="invoiceBuilder">The invoice builder class</param>
            <returns>An <see cref="T:NKart.Core.Models.IInvoice"/> that is not persisted to the database.</returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.ClearPaymentMethod">
            <summary>
            Removes a previously saved payment method.
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.SavePaymentMethod(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.IPaymentMethod"/> to <see cref="T:NKart.Core.Models.ICustomerBase"/> extended data
            </summary>
            <param name="paymentMethod">
            The payment Method.
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.GetPaymentGatewayMethods">
            <summary>
            Gets a list of all possible Payment Methods
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>s</returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.GetPaymentMethod">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPaymentMethod"/> from <see cref="T:NKart.Core.Models.ICustomerBase"/> extended data
            </summary>
            <returns>
            The previously saved <see cref="T:NKart.Core.Models.IPaymentMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.AuthorizePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.AuthorizePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.AuthorizePayment(System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.AuthorizePayment(System.Guid)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.AuthorizeCapturePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.AuthorizeCapturePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.AuthorizeCapturePayment(System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutPaymentManager.AuthorizeCapturePayment(System.Guid)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="T:NKart.Core.Checkout.ICheckoutShippingManager">
            <summary>
            Defines a CheckoutShippingManager
            </summary>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutShippingManager.SaveShipmentRateQuote(NKart.Core.Gateways.Shipping.IShipmentRateQuote)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> as a shipment line item
            </summary>
            <param name="approvedShipmentRateQuote">
            The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> to be saved
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutShippingManager.SaveShipmentRateQuote(System.Collections.Generic.IEnumerable{NKart.Core.Gateways.Shipping.IShipmentRateQuote})">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s as shipment line items
            </summary>
            <param name="approvedShipmentRateQuotes">
            The collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s to be saved
            </param>
        </member>
        <member name="M:NKart.Core.Checkout.ICheckoutShippingManager.ClearShipmentRateQuotes">
            <summary>
            Clears all <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s previously saved
            </summary>
        </member>
        <member name="T:NKart.Core.Checkout.ICheckoutManagerBase">
            <summary>
            Defines the base checkout workflow.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutManagerBase.Customer">
            <summary>
            Gets the checkout manager for customer information.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutManagerBase.Extended">
            <summary>
            Gets the checkout extended manager for custom invoicing.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutManagerBase.Offer">
            <summary>
            Gets the checkout manager for marketing offers.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutManagerBase.Shipping">
            <summary>
            Gets the checkout manager for shipping.
            </summary>
        </member>
        <member name="P:NKart.Core.Checkout.ICheckoutManagerBase.Payment">
            <summary>
            Gets the payment.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants">
            <summary>
            Constant country codes.
            </summary>
            <summary>
            Constants Database.
            </summary>
            <summary>
            Constants for detached published content type.
            </summary>
            <summary>
            Distributed cache refreshers
            </summary>
            <summary>
            Merchello ExtendedData constants
            </summary>
            <summary>
            Invoice status constants.
            </summary>
            <summary>
            Constants for service locks.
            </summary>
            <summary>
            Constants related to Migrations.
            </summary>
            <summary>
            Constants for Notification triggers.
            </summary>
            <summary>
            Order Status Constants.
            </summary>
            <summary>
            Constant provider keys
            </summary>
            <summary>
            Repository constants.
            </summary>
            <summary>
            Shipment status constants.
            </summary>
            <summary>
            Store constants.
            </summary>
            <summary>
            Constants store settings keys.
            </summary>
            <summary>
            Constants for strategies.
            </summary>
            <summary>
            Merchello constants.
            </summary>
            <summary>
            Constant type fields.
            </summary>
            <summary>
            Warehouse constants.
            </summary>
            <summary>
            Constants all the identifiers within the Merchello core.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.CountryCodes">
            <summary>
            Constant Merchello specific country codes
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.CountryCodes.EverywhereElse">
            <summary>
            Gets the everywhere else country code.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.DbProviderNames">
            <summary>
            Database provider names supported by Merchello.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.DbProviderNames.SqlServer">
            <summary>
            Gets the MS SQL Server.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.DbProviderNames.SqlCe">
            <summary>
            Gets the MS SQLCE.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.DetachedPublishedContentType">
            <summary>
            The detached published content type.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.DetachedPublishedContentType.DefaultProductVariantDetachedPublishedContentTypeKey">
            <summary>
            Gets the default product variant detached published content type key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.DistributedCache">
            <summary>
            Cache refresher keys.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.DistributedCache.PaymentCacheRefresherKey">
            <summary>
            Gets the PaymentCacheRefresher key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ReservedExtendedDataKeys">
            <summary>
            Gets the collection of Merchello "Reserved" ExtendedDataCollection keys
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.ExtendedDataKeys">
            <summary>
            The extended data keys.
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.ExtendedDataKeys.CustomerContextDataPrefix">
            <summary>
            The customer context data prefix.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ExtendedData">
            <summary>
            Gets the extended data.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.LineItemCollection">
            <summary>
            Gets the line item collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.LineItem">
            <summary>
            Gets the line item.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Adjustment">
            <summary>
            Gets the Adjustment
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ProductVariant">
            <summary>
            Gets the product variant.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.CurrencyCode">
            <summary>
            Gets the currency code.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.VersionKey">
            <summary>
            Gets the version key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Name">
            <summary>
            Gets the name reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Price">
            <summary>
            Gets the price reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Sku">
            <summary>
            Gets the sku reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Exported">
            <summary>
            Gets the exported reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Quantity">
            <summary>
            Gets the quantity reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.PaymentMethod">
            <summary>
            Gets the payment method reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.AvsCvvData">
            <summary>
            Gets the AvsCvvData extended data key
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ProductKey">
            <summary>
            Gets the product key reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ProductVariantKey">
            <summary>
            Gets the product variant key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.CostOfGoods">
            <summary>
            Gets the cost of goods reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Weight">
            <summary>
            Gets the weight reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Height">
            <summary>
            Gets the height reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Width">
            <summary>
            Gets the width reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Length">
            <summary>
            Gets the length reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Barcode">
            <summary>
            Gets the barcode reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.OnSale">
            <summary>
            Gets the on sale reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Manufacturer">
            <summary>
            Gets the manufacturer reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ManufacturerModelNumber">
            <summary>
            Gets the manufacturer model number reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.SalePrice">
            <summary>
            Gets the sale price reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.TrackInventory">
            <summary>
            Gets the track inventory reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.OutOfStockPurchase">
            <summary>
            Gets the out of stock purchase reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Taxable">
            <summary>
            Gets the taxable reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Shippable">
            <summary>
            Gets the shippable reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Download">
            <summary>
            Gets the download reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.DownloadMediaId">
            <summary>
            Gets the download media id reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ShipmentKey">
            <summary>
            Gets the shipment key reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ShipMethodKey">
            <summary>
            Gets the ship method key reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.WarehouseCatalogKey">
            <summary>
            Gets the warehouse catalog key reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ShippingOriginAddress">
            <summary>
            Gets the shipping origin address reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ShippingDestinationAddress">
            <summary>
            Gets the shipping destination address reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.BillingAddress">
            <summary>
            Gets the billing address reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.Note">
            <summary>
            Gets the note reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.LineItemAllowsValidation">
            <summary>
            Gets the validate line item.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ContainerKey">
            <summary>
            Gets the container key reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.LineItemTfKey">
            <summary>
            Gets the line item type field key reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.BaseTaxRate">
            <summary>
            Gets the base tax rate reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ProviceTaxRate">
            <summary>
            Gets the provice tax rate reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.LineItemTaxAmount">
            <summary>
            Gets the line item tax amount reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ProductPriceNoTax">
            <summary>
            Gets the product price no tax.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.TaxIncludedInProductPrice">
            <summary>
            Gets the tax included in product price.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ProductPriceTaxAmount">
            <summary>
            Gets the product price tax amount.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ProductSalePriceNoTax">
            <summary>
            Gets the product sale price no tax.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ProductSalePriceTaxAmount">
            <summary>
            Gets the product sale price tax amount.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.TaxTransactionResults">
            <summary>
            Gets the tax transaction results.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.TransactionId">
            <summary>
            Gets the transaction id for a payment
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.SmtpProviderSettings">
            <summary>
            Gets the smtp provider settings reserved extended data key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.CouponReward">
            <summary>
            Gets the coupon.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.CouponRewardLog">
            <summary>
            Gets the coupon reward log.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.CouponAdjustedProductPreTaxTotal">
            <summary>
            Gets the coupon adjusted product pre tax total.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.CouponAdjustedProductTaxTotal">
            <summary>
            Gets the coupon adjusted product tax total.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.OfferCodeTempData">
            <summary>
            Gets the offer code queue data.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.BasketItemCustomerChoice">
            <summary>
            Gets the key for storing the customer choices when adding an item to a basket.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ExtendedDataKeys.ProductIsCustom">
            <summary>
            Gets the key for flagging a product lineitem as custom
            This will enable editing of the line item in a dialog
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.InvoiceStatus">
            <summary>
            The default invoice status keys.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.InvoiceStatus.Unpaid">
            <summary>
            Gets the unpaid invoice status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.InvoiceStatus.Paid">
            <summary>
            Gets the paid invoice status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.InvoiceStatus.Partial">
            <summary>
            Gets the partially paid invoice status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.InvoiceStatus.Cancelled">
            <summary>
            Gets the cancelled invoice status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.InvoiceStatus.Fraud">
            <summary>
            Gets the fraud invoice status key
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.Locks">
            <summary>
            Defines locks (used in services).
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.Locks.Settings">
            <summary>
            Lock for settings.
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.Locks.ProductTree">
            <summary>
            Lock for products.
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.Locks.SalesTree">
            <summary>
            Lock for sales.
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.Locks.Shipments">
            <summary>
            Lock for shipments.
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.Locks.CustomersTree">
            <summary>
            Lock for customers.
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.Locks.MarketingTree">
            <summary>
            Lock for marketing.
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.Locks.ProvidersTree">
            <summary>
            Lock for providers.
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.MerchelloMigrationName">
            <summary>
            Gets the migration name.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.NotificationTriggers">
            <summary>
            The default notification keys.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.NotificationTriggers.Invoice">
            <summary>
            The invoice notification trigger keys.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.NotificationTriggers.Invoice.StatusChanged">
            <summary>
            The status changed trigger keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.NotificationTriggers.Invoice.StatusChanged.ToPaid">
            <summary>
            Gets the invoice status changed to paid.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.NotificationTriggers.Invoice.StatusChanged.ToPartial">
            <summary>
            Gets invoice status changed the to partial.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.NotificationTriggers.Invoice.StatusChanged.ToCancelled">
            <summary>
            Gets the to cancelled.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.NotificationTriggers.Order">
            <summary>
            The order triggers.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.NotificationTriggers.Order.StatusChanged">
            <summary>
            The status changed notification triggers
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.NotificationTriggers.Order.StatusChanged.ToBackOrder">
            <summary>
            Gets the to back order notification trigger key
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.NotificationTriggers.Order.StatusChanged.ToFulfilled">
            <summary>
            Gets the status changed to fulfilled notification trigger key
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.NotificationTriggers.Order.StatusChanged.ToCancelled">
            <summary>
            Gets the to cancelled.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.OrderStatus">
            <summary>
            The order status keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.OrderStatus.NotFulfilled">
            <summary>
            Gets the not fulfilled (or not shipped) order status key
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.OrderStatus.Open">
            <summary>
            Gets the order status open key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.OrderStatus.BackOrder">
            <summary>
            Gets the back order "back ordered" order status key
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.OrderStatus.Fulfilled">
            <summary>
            Gets the fulfilled (or completed) order status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.OrderStatus.Cancelled">
            <summary>
            Gets the cancelled order status key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.ProviderKeys">
            <summary>
            Default gateway provider keys
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.ProviderKeys.EntityCollection">
            <summary>
            The entity collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ProviderKeys.EntityCollection.EntityFilterGroupProviderKey">
            <summary>
            Gets the product specification collection key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ProviderKeys.EntityCollection.StaticProductCollectionProviderKey">
            <summary>
            Gets the static product collection provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ProviderKeys.EntityCollection.StaticInvoiceCollectionProviderKey">
            <summary>
            Gets the static invoice collection provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ProviderKeys.EntityCollection.StaticCustomerCollectionProviderKey">
            <summary>
            Gets the static customer collection provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ProviderKeys.EntityCollection.StaticEntityCollectionCollectionProvider">
            <summary>
            Gets the static entity collection collection provider.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.ProviderKeys.Shipping">
            <summary>
            The shipping gateway providers keys.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ProviderKeys.Shipping.FixedRateShippingProviderKey">
            <summary>
            Gets the fixed rate shipping provider key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.ProviderKeys.Taxation">
            <summary>
            The taxation gateway provider keys.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ProviderKeys.Taxation.FixedRateTaxationProviderKey">
            <summary>
            Gets the fixed rate taxation provider key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.ProviderKeys.Payment">
            <summary>
            The payment gateway provider keys.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ProviderKeys.Payment.CashPaymentProviderKey">
            <summary>
            Gets the cash payment provider key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.ProviderKeys.Notification">
            <summary>
            The notification.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ProviderKeys.Notification.SmtpNotificationProviderKey">
            <summary>
            Gets the smtp notification provider key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.Repository">
            <summary>
            Repository constants.
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.Repository.DisabledCache">
            <summary>
            Injection parameter for repositories to indicate disabled CacheHelper.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.ShipmentStatus">
            <summary>
            The shipment status.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ShipmentStatus.Quoted">
            <summary>
            Gets the quoted shipment status key
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ShipmentStatus.Packaging">
            <summary>
            Gets the packaging status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ShipmentStatus.Ready">
            <summary>
            Gets the shipment ready status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ShipmentStatus.Shipped">
            <summary>
            Gets the shipment shipped status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.ShipmentStatus.Delivered">
            <summary>
            Gets the delivered shipment status key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.Store">
            <summary>
            Store contants.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.Store.DefaultStoreKey">
            <summary>
            Gets the default store key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.StoreSetting">
            <summary>
            Store Settings
            </summary>
        </member>
        <member name="F:NKart.Core.Constants.StoreSetting.DefaultCurrencyCode">
            <summary>
            The default currency code.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.CurrencyCodeKey">
            <summary>
            Gets the currency code settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.NextOrderNumberKey">
            <summary>
            Gets the next order number settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.NextInvoiceNumberKey">
            <summary>
            Gets the next invoice number settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.NextShipmentNumberKey">
            <summary>
            Gets the next shipment number key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.DateFormatKey">
            <summary>
            Gets the date format settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.TimeFormatKey">
            <summary>
            Gets the time format settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.UnitSystemKey">
            <summary>
            Gets the Unit System settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.GlobalTaxableKey">
            <summary>
            Gets the global taxable settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.GlobalTrackInventoryKey">
            <summary>
            Gets the global track inventory settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.GlobalShippableKey">
            <summary>
            Gets the global shippable settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.GlobalShippingIsTaxableKey">
            <summary>
            Gets the global shipping is taxable key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.MigrationKey">
            <summary>
            Gets the migration key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.GlobalTaxationApplicationKey">
            <summary>
            Gets the global taxation application key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.DefaultExtendedContentCulture">
            <summary>
            Gets the default extended content culture key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StoreSetting.HasDomainRecordKey">
            <summary>
            Gets the HasDomainRecord settings key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.StrategyTypeAlias">
            <summary>
            Default strategies
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StrategyTypeAlias.DefaultPackaging">
            <summary>
            Gets the configuration key for the default packaging strategy
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StrategyTypeAlias.DefaultShipmentRateQuote">
            <summary>
            Gets the configuration key for the default shipment rate quote.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StrategyTypeAlias.DefaultInvoiceTaxRateQuote">
            <summary>
            Gets the configuration key for the default invoice tax rate quote
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.StrategyTypeAlias.InvoiceItemizationStrategy">
            <summary>
            Gets the configuration key for the invoice itemization strategy.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.TaskChainAlias">
            <summary>
            Default task chains
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TaskChainAlias.SalesPreparationInvoiceCreate">
            <summary>
            Gets the configuration key for the sales preparation invoice create.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TaskChainAlias.CheckoutManagerInvoiceCreate">
            <summary>
            Gets the configuration key for the checkout manager invoice creation.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TaskChainAlias.ItemCacheValidation">
            <summary>
            Gets the item cache validation.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TaskChainAlias.OrderPreparationOrderCreate">
            <summary>
            Gets the configuration key for the order preparation order create.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TaskChainAlias.OrderPreparationShipmentCreate">
            <summary>
            Gets the configuration key for the preparation shipment create.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TaskChainAlias.MerchelloHelperProductDataModifiers">
            <summary>
            Gets the configuration key for the MerchelloHelper product data modifiers.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TaskChainAlias.CopyProduct">
            <summary>
            Gets the copy product.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.TypeFieldKeys">
            <summary>
            The default type field keys
            </summary>
            TODO ensure all core type field keys have constant values
        </member>
        <member name="T:NKart.Core.Constants.TypeFieldKeys.Address">
            <summary>
            Address related keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Address.ShippingAddressKey">
            <summary>
            Gets the shipping address key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Address.BillingAddressKey">
            <summary>
            Gets the billing address key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.TypeFieldKeys.CampaignActivity">
            <summary>
            The campaign offer key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.CampaignActivity.DiscountKey">
            <summary>
            Gets the key representing a discount type.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.TypeFieldKeys.Entity">
            <summary>
            Entity related keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.CampaignOfferKey">
            <summary>
            Gets the campaign offer key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.CustomerKey">
            <summary>
            Gets the customer type field key that represents the entity
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.EntityCollectionKey">
            <summary>
            Gets the entity collection key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.GatewayProviderKey">
            <summary>
            Gets the gateway provider type field key that represents the entity
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.InvoiceKey">
            <summary>
            Gets the invoice type field key that represents the entity
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.ItemCacheKey">
            <summary>
            Gets the item cache type field key that represents the entity
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.OrderKey">
            <summary>
            Gets the order type field key that represents the entity
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.PaymentKey">
            <summary>
            Gets the payment type field key that represents the entity
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.ProductKey">
            <summary>
            Gets the product type field key that represents the entity
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.ProductOptionKey">
            <summary>
            Gets the product option type field key that represents the entity.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.ShipmentKey">
            <summary>
            Gets the shipment type field key that represents the entity
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.WarehouseKey">
            <summary>
            Gets the warehouse type field key that represents the entity
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.Entity.WarehouseCatalogKey">
            <summary>
            Gets the warehouse catalog type field key that represents the entity
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.TypeFieldKeys.ItemCache">
            <summary>
            The item cache keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.ItemCache.BasketKey">
            <summary>
            Gets the basket key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.ItemCache.BackofficeKey">
            <summary>
            Gets the back office key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.ItemCache.WishlistKey">
            <summary>
            Gets the wish list key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.ItemCache.CheckoutKey">
            <summary>
            Gets the checkout key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.TypeFieldKeys.LineItem">
            <summary>
            The line item keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.LineItem.ProductKey">
            <summary>
            Gets the product line item type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.LineItem.ShippingKey">
            <summary>
            Gets the shipping line item type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.LineItem.TaxKey">
            <summary>
            Gets the tax line item type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.LineItem.DiscountKey">
            <summary>
            Gets the discount line item type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.LineItem.AdjustmentKey">
            <summary>
            Gets the adjustment line item type key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.TypeFieldKeys.PaymentMethod">
            <summary>
            The payment method type keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.PaymentMethod.CashKey">
            <summary>
            Gets the cash type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.PaymentMethod.CreditCardKey">
            <summary>
            Gets the credit card type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.PaymentMethod.RedirectKey">
            <summary>
            Gets the redirect key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.PaymentMethod.PurchaseOrderKey">
            <summary>
            Gets the purchase order type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.PaymentMethod.CustomerCreditKey">
            <summary>
            Gets the customer credit.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.TypeFieldKeys.AppliedPayment">
            <summary>
            The applied payment type field keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.AppliedPayment.CreditRecordKey">
            <summary>
            Gets the credit record type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.AppliedPayment.DebitRecordKey">
            <summary>
            Gets the debit record type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.AppliedPayment.VoidRecordKey">
            <summary>
            Gets the void record type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.AppliedPayment.RefundRecordKey">
            <summary>
            Gets the refund record type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.AppliedPayment.DeniedRecordKey">
            <summary>
            Gets the denied record type key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.TypeFieldKeys.GatewayProvider">
            <summary>
            Gateway provider type field keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.GatewayProvider.PaymentProviderKey">
            <summary>
            Gets the payment provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.GatewayProvider.NotificationProviderKey">
            <summary>
            Gets the notification provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.GatewayProvider.ShippingProviderKey">
            <summary>
            Gets the shipping provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.TypeFieldKeys.GatewayProvider.TaxationProviderKey">
            <summary>
            Gets the taxation provider key.
            </summary>
        </member>
        <member name="T:NKart.Core.Constants.Warehouse">
            <summary>
            The default warehouse keys
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.Warehouse.DefaultWarehouseKey">
            <summary>
            Gets the default warehouse key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.Warehouse.DefaultWarehouseCatalogKey">
            <summary>
            Gets the default warehouse catalog key.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.DefaultCultureName">
            <summary>
            Gets the default culture name.
            </summary>
        </member>
        <member name="P:NKart.Core.Constants.DefaultConnectionStringName">
            <summary>
            Gets the default connection string name.
            </summary>
        </member>
        <member name="T:NKart.Core.CurrencyContext">
            <summary>
            The currency context.
            </summary>
        </member>
        <member name="F:NKart.Core.CurrencyContext._instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="F:NKart.Core.CurrencyContext._storeSettingService">
            <summary>
            The <see cref="T:NKart.Core.Services.IStoreSettingService"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.CurrencyContext._storeCurrency">
            <summary>
            The store currency.
            </summary>
        </member>
        <member name="F:NKart.Core.CurrencyContext._currencyFormat">
            <summary>
            The currency format.
            </summary>
        </member>
        <member name="M:NKart.Core.CurrencyContext.#ctor(NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.CurrencyContext"/> class.
            </summary>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="P:NKart.Core.CurrencyContext.HasCurrent">
            <summary>
            Gets a value indicating whether the context singleton is setup.
            </summary>
        </member>
        <member name="P:NKart.Core.CurrencyContext.Current">
            <summary>
            Gets or sets the singleton.
            </summary>
        </member>
        <member name="P:NKart.Core.CurrencyContext.StoreCurrency">
            <summary>
            Gets the store currency.
            </summary>
            <remarks>
            This assumes that all stores will use the same currency
            </remarks>
        </member>
        <member name="P:NKart.Core.CurrencyContext.StoreCurrencyFormat">
            <summary>
            Gets the store currency format.
            </summary>
        </member>
        <member name="M:NKart.Core.CurrencyContext.FormatCurrency(System.Decimal)">
            <summary>
            Formats the currency based with symbol and configured culture.
            </summary>
            <param name="amount">
            The amount.
            </param>
            <returns>
            The formatted amount.
            </returns>
            <remarks>
            Overrides for currency format are made in the Merchello.config
            </remarks>
        </member>
        <member name="M:NKart.Core.CurrencyContext.ResetCurrency">
            <summary>
            Clears the static field values.
            </summary>
        </member>
        <member name="T:NKart.Core.CurrencyHelper">
            <summary>
            The currency helper.
            </summary>
        </member>
        <member name="M:NKart.Core.CurrencyHelper.FormatCurrency(System.Decimal)">
            <summary>
            Formats an amount based on Merchello store settings.
            </summary>
            <param name="amount">
            The amount.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.CurrencyFormattingExtension">
            <summary>
            Currency formatting extension.
            </summary>
        </member>
        <member name="M:NKart.Core.CurrencyFormattingExtension.AsFormattedCurrency(System.Decimal)">
            <summary>
            The as formatted currency.
            </summary>
            <param name="amount">
            The amount.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.IEntityCollectionProviderMeta">
            <summary>
            Represents meta information about an <see cref="T:NKart.Core.EntityCollections.IEntityCollectionProvider"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.IEntityCollectionProviderMeta.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.IEntityCollectionProviderMeta.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.IEntityCollectionProviderMeta.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.IEntityCollectionProviderMeta.LocalizedNameKey">
            <summary>
            Gets or sets the localization name key.
            </summary>
            <remarks>
            e.g. "merchelloProviders/providerNameKey"
            </remarks>
        </member>
        <member name="P:NKart.Core.EntityCollections.IEntityCollectionProviderMeta.ManagesUniqueCollection">
            <summary>
            Gets a value indicating whether manages unique collection.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.IEntityCollectionProviderMeta.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.IEntityCollectionProviderMeta.EditorView">
            <summary>
            Gets the relative path to the editor view html
            </summary>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.DynamicCancelledOrderCollectionProvider">
            <summary>
            The dynamic unfulfilled order collection provider.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.Providers.DynamicCancelledOrderCollectionProvider._invoiceService">
            <summary>
            The <see cref="T:NKart.Core.Services.InvoiceService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicCancelledOrderCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicCancelledOrderCollectionProvider.PerformExists(NKart.Core.Models.IInvoice)">
            <summary>
            The perform exists.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicCancelledOrderCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicCancelledOrderCollectionProvider.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicCancelledOrderCollectionProvider.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicCancelledOrderCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicCancelledOrderCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider">
            <summary>
            The dynamic fulfilled order collection provider.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider._invoiceService">
            <summary>
            The <see cref="T:NKart.Core.Services.InvoiceService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider.PerformExists(NKart.Core.Models.IInvoice)">
            <summary>
            The perform exists.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicFulfilledOrderCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider">
            <summary>
            The dynamic open order collection provider.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider._invoiceService">
            <summary>
            The <see cref="T:NKart.Core.Services.InvoiceService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider.PerformExists(NKart.Core.Models.IInvoice)">
            <summary>
            The perform exists.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicOpenOrderCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider">
            <summary>
            The dynamic unfulfilled order collection provider.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider._invoiceService">
            <summary>
            The <see cref="T:NKart.Core.Services.InvoiceService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider.PerformExists(NKart.Core.Models.IInvoice)">
            <summary>
            The perform exists.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnfulfilledOrderCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider">
            <summary>
            The dynamic paid invoice collection provider.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider._invoiceService">
            <summary>
            The <see cref="T:NKart.Core.Services.InvoiceService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider.PerformExists(NKart.Core.Models.IInvoice)">
            <summary>
            Checks if the invoice exists in the collection
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPaidInvoiceCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider">
            <summary>
            The dynamic partially paid invoice collection provider.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider._invoiceService">
            <summary>
            The <see cref="T:NKart.Core.Services.InvoiceService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider.PerformExists(NKart.Core.Models.IInvoice)">
            <summary>
            The perform exists.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicPartiallyPaidInvoiceCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider">
            <summary>
            The unpaid invoice collection provider.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider._invoiceService">
            <summary>
            The <see cref="T:NKart.Core.Services.InvoiceService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider.PerformExists(NKart.Core.Models.IInvoice)">
            <summary>
            Checks if the invoice exists in the collection
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of keys associated with invoices with an unpaid status
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.DynamicUnpaidInvoiceCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.ProductFilterGroupProvider">
            <summary>
            Represents the product based filter collection.
            </summary>
            <remarks>
            EntityFilterProviders need to implement <see cref="T:NKart.Core.EntityCollections.IEntityFilterGroupProvider"/>
            </remarks>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.ProductFilterGroupProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.ProductFilterGroupProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.StaticCustomerCollectionProvider">
            <summary>
            The static customer collection provider.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticCustomerCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.StaticCustomerCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticCustomerCollectionProvider.PerformExists(NKart.Core.Models.ICustomer)">
            <summary>
            The perform exists.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticCustomerCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.ICustomer"/>s from the collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticCustomerCollectionProvider.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.Page`1"/> of customer keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticCustomerCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticCustomerCollectionProvider.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets get paged entity keys included in the collection
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticCustomerCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.StaticEntityCollectionCollectionProvider">
            <summary>
            The static entity collection collection provider.
            </summary>
            TODO REMOVE THIS CLASS and fix tests
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticEntityCollectionCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.StaticEntityCollectionCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticEntityCollectionCollectionProvider.PerformExists(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The perform exists.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticEntityCollectionCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.StaticInvoiceCollectionProvider">
            <summary>
            The static invoice collection provider.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticInvoiceCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.StaticInvoiceCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>        
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticInvoiceCollectionProvider.PerformExists(NKart.Core.Models.IInvoice)">
            <summary>
            The perform exists.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticInvoiceCollectionProvider.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticInvoiceCollectionProvider.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticInvoiceCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Perform get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticInvoiceCollectionProvider.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entity keys.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticInvoiceCollectionProvider.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.Providers.StaticProductCollectionProvider">
            <summary>
            The static product collection provider.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.Providers.StaticProductCollectionProvider.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.Providers.StaticProductCollectionProvider"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="T:NKart.Core.EntityCollections.CachedEntityCollectionProviderBase`1">
            <summary>
            The cached entity collection provider base.
            </summary>
            <typeparam name="T">
            The type of entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedEntityCollectionProviderBase`1.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.CachedEntityCollectionProviderBase`1"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedEntityCollectionProviderBase`1.GetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
            <remarks>
            All we're doing here is keeping a bit of control in case we need to do some processing before or after
            later on.
            </remarks>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedEntityCollectionProviderBase`1.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.CachedQueryableEntityCollectionProviderBase`1">
            <summary>
            The cached queryable entity collection provider base.
            </summary>
            <typeparam name="T">
            The type of entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedQueryableEntityCollectionProviderBase`1.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.CachedQueryableEntityCollectionProviderBase`1"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedQueryableEntityCollectionProviderBase`1.GetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets paged entity keys included in the collection
            </summary>
            <param name="args">
            The query arguments.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedQueryableEntityCollectionProviderBase`1.GetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedQueryableEntityCollectionProviderBase`1.GetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedQueryableEntityCollectionProviderBase`1.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged entity keys.
            </summary>
            <param name="args">
            The query arguments
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedQueryableEntityCollectionProviderBase`1.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.CachedQueryableEntityCollectionProviderBase`1.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Performs get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.EntityCollectionBaseExtensions">
            <summary>
            The entity collection base extensions.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionBaseExtensions.ProviderAttribute(NKart.Core.EntityCollections.EntityCollectionProviderBase)">
            <summary>
            Gets the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/>.
            </summary>
            <param name="provider">
            The entity collection.
            </param>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionBaseExtensions.GetManagedCollections(NKart.Core.EntityCollections.EntityCollectionProviderBase)">
            <summary>
            The get managed collections.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.EntityCollectionEvents">
            <summary>
            The entity collection events.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionEvents.ApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            The Umbraco Application Started handler.
            </summary>
            <param name="umbracoApplication">
            The umbraco application.
            </param>
            <param name="applicationContext">
            The application context.
            </param>
            <remarks>
            Merchello is boot strapped in Application Starting so the GatewayProviderResolver should be good to go at this point.
            </remarks>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionEvents.EntityCollectionServiceOnSaved(NKart.Core.Services.IEntityCollectionService,Umbraco.Core.Events.SaveEventArgs{NKart.Core.Models.Interfaces.IEntityCollection})">
            <summary>
            The entity collection service on saved.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionEvents.EntityCollectionServiceOnDeleted(NKart.Core.Services.IEntityCollectionService,Umbraco.Core.Events.DeleteEventArgs{NKart.Core.Models.Interfaces.IEntityCollection})">
            <summary>
            The entity collection service on deleted.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionEvents.EntityCollectionServiceOnCreated(NKart.Core.Services.IEntityCollectionService,NKart.Core.Events.NewEventArgs{NKart.Core.Models.Interfaces.IEntityCollection})">
            <summary>
            The entity collection service on created.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute">
            <summary>
            An attribute to decorate entity collection providers for resolution.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/> class.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="entityTfKey">
            The entity type field Key.
            </param>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/> class.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="entityTfKey">
            The entity type field Key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="description">
            The description.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/> class.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="entityTfKey">
            The entity type field Key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="description">
            The description.
            </param>
            <param name="managesUniqueCollection">
            The manages unique collection.
            </param>
            <param name="localizedNameKey">
            The localization key for the name of the provide.  Used in cases where provider is referenced in Merchello back office tree.
            </param>
            <param name="editorView">
            Can be used to override the editor dialog
            </param>
            <remarks>
            If managesUniqueCollection is true, the boot manager will automatically add the collection to the merchEntityCollection table if it does not exist.
            Likewise, if the provider is removed, it will remove itself from the merchEntityCollection table
            </remarks>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.EntityTfKey">
            <summary>
            Gets or sets the entity type field key.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.Description">
            <summary>
            Gets the description.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.LocalizedNameKey">
            <summary>
            Gets or sets the localization name key.
            </summary>
            <remarks>
            e.g. "merchelloProviders/providerNameKey"
            </remarks>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.ManagesUniqueCollection">
            <summary>
            Gets a value indicating whether manages unique collection.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderAttribute.EditorView">
            <summary>
            Gets the relative path to the editor view html
            </summary>
        </member>
        <member name="T:NKart.Core.EntityCollections.EntityCollectionProviderBase">
            <summary>
            The entity collection provider base.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.EntityCollectionProviderBase._entityCollection">
            <summary>
            The entity collection.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderBase"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection Key.
            </param>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderBase.EntityCollection">
            <summary>
            Gets the entity collection.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderBase.Cache">
            <summary>
            Gets the cache.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderBase.MerchelloContext">
            <summary>
            Gets the <see cref="T:NKart.Core.IMerchelloContext"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderBase.CollectionKey">
            <summary>
            Gets the collection key.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.GetEntities">
            <summary>
            The get entities.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.GetEntities``1">
            <summary>
            The get entities.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.EntityBase.IEntity"/>
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.GetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a generic page of entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.GetPagedEntities``1(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of typed entities
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.EntityBase.IEntity"/>
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.EnsureType(System.Type)">
            <summary>
            Ensures this is the provider by <see cref="T:System.Type"/>.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.EnsureEntityType(NKart.Core.EntityType)">
            <summary>
            Ensures this is the provider for the <see cref="T:NKart.Core.EntityType"/>.
            </summary>
            <param name="entityType">
            The entity Type.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            Throws an exception if the EntityCollectionProviderAttribute was not found
            </exception>
            <remarks>
            Used in classes such as the MerchelloHelper
            </remarks>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.ValidateType(System.Type)">
            <summary>
            Validates the type.
            </summary>
            <param name="type">
            The type.
            </param>
            <exception cref="T:System.InvalidCastException">
            Throws an exception if the type does not match the collection
            </exception>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.GetInstance">
            <summary>
            Gets an instance of the <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase.Initialize">
            <summary>
            Initializes the provider.
            </summary>
        </member>
        <member name="T:NKart.Core.EntityCollections.EntityCollectionProviderBase`1">
            <summary>
            The entity collection provider base.
            </summary>
            <typeparam name="T">
            The type of entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase`1.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderBase`1"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase`1.GetEntities">
            <summary>
            The get entities.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase`1.Exists(`0)">
            <summary>
            Returns true if the entity exists in the collection.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase`1.GetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a generic page of entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase`1.PerformExists(`0)">
            <summary>
            Returns true if the entity exists in the collection.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase`1.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderBase`1.GetExistsCacheKey(`0)">
            <summary>
            Gets the request cache key for the exists query.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.EntityCollectionProviderResolver">
            <summary>
            The entity collection provider manager.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.EntityCollectionProviderResolver._merchelloContext">
            <summary>
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.EntityCollectionProviderResolver._entityCollectionProviderCache">
            <summary>
            The activated gateway provider cache.
            </summary>
        </member>
        <member name="F:NKart.Core.EntityCollections.EntityCollectionProviderResolver._instanceTypes">
            <summary>
            The instance types.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type},NKart.Core.IMerchelloContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderResolver"/> class.
            </summary>
            <param name="values">
            The values.
            </param>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </param>
        </member>
        <member name="P:NKart.Core.EntityCollections.EntityCollectionProviderResolver.IsInitialized">
            <summary>
            Gets or sets a value indicating whether is initialized.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderKey``1">
            <summary>
            Gets the provider key from the attribute
            </summary>
            <typeparam name="T">
            The type of the provider
            </typeparam>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderKey(System.Type)">
            <summary>
            The get provider key.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderKeys``1">
            <summary>
            Gets the provider keys for a given type.
            </summary>
            <typeparam name="T">
            The type of the provider
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderKeys(System.Type)">
            <summary>
            Gets the provider keys for a given type.
            </summary>
            <param name="type">
            The type of the provider.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderAttributeByProviderKey(System.Guid)">
            <summary>
            Gets the provider attribute by the key specified within the attribute.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderAttribute``1">
            <summary>
            Gets the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/> from the provider of type T.
            </summary>
            <typeparam name="T">
            The type of provider
            </typeparam>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderAttributes``1">
            <summary>
            Gets the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/> from the provider of type T.
            </summary>
            <typeparam name="T">
            The type of the provider
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderAttributes">
            <summary>
            Gets the provider attributes for all resolved types.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderTypesForEntityType(NKart.Core.EntityType)">
            <summary>
            Gets a collection of resolved entity collection provider types for a specific entity type.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderForCollection(System.Guid)">
            <summary>
            The get provider for collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderBase"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderAttributeForFilter(System.Guid)">
            <summary>
            Gets the provider attribute for providers responsible for specified filter attribute collections.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderForCollection``1(System.Guid)">
            <summary>
            The get provider for collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <typeparam name="T">
            The type of the provider
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.AddOrUpdateCache(System.Guid,System.Type)">
            <summary>
            Adds or Updates provider type definitions in the concurrent dictionary cache.
            </summary>
            <param name="collectionKey">
            The collection Key.
            </param>
            <param name="provider">
            The provider.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.AddOrUpdateCache(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The add or update cache.
            </summary>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.RemoveFromCache(System.Guid)">
            <summary>
            Removes provider type definitions in the concurrent dictionary cache.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.EnsureInitialized">
            <summary>
            The ensure initialized.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetProviderAttribute(System.Type)">
            <summary>
            Gets the provider attributes of providers with matching types
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.CreateInstance(System.Type,System.Guid)">
            <summary>
            The create instance.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="collectionKey">
            The collection Key.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.GetTypeByProviderKey(System.Guid)">
            <summary>
            The get type by provider key.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.EnusureUniqueProvider(System.Guid)">
            <summary>
            Ensures the provider.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.EntityCollectionProviderResolver.Initialize">
            <summary>
            Initializes the resolver.
            </summary>
        </member>
        <member name="T:NKart.Core.EntityCollections.ICachedEntityCollectionProvider">
            <summary>
            Defines a <see cref="T:NKart.Core.EntityCollections.IEntityCollectionProvider"/> that has cached Examine values.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.ICachedEntityCollectionProvider.GetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.IEntityCollectionProvider">
            <summary>
            Marker interface for an EntityCollectionProvider.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProvider.GetEntities">
            <summary>
            The get entities.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProvider.GetEntities``1">
            <summary>
            The get entities.
            </summary>
            <typeparam name="T">
            The type of IEntity
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.IEntityCollectionProvider`1">
            <summary>
            The EntityCollectionProvider interface.
            </summary>
            <typeparam name="T">
            The type of entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProvider`1.Exists(`0)">
            <summary>
            Returns true if the entity exists in the collection.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.IEntityCollectionProviderResolver">
            <summary>
            Defines an EntityCollectionProviderResolver.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderKey``1">
            <summary>
            The get provider key.
            </summary>
            <typeparam name="T">
            Type of the provider
            </typeparam>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderKey(System.Type)">
            <summary>
            The get provider key.
            </summary>
            <param name="type">
            The type of provider
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderKeys``1">
            <summary>
            Gets the provider keys for a given type.
            </summary>
            <typeparam name="T">
            The type of the provider
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderKeys(System.Type)">
            <summary>
            Gets the provider keys for a given type.
            </summary>
            <param name="type">
            The type of the provider.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderAttributeByProviderKey(System.Guid)">
            <summary>
            Gets the provider attribute by the key specified within the attribute.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderAttribute``1">
            <summary>
            Gets the <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/> from the provider of type T.
            </summary>
            <typeparam name="T">
            The type of provider
            </typeparam>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderAttributes``1">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/> from providers of type T.
            </summary>
            <typeparam name="T">
            The type of the provider
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderAttributes">
            <summary>
            Gets the provider attributes for all resolved types.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderTypesForEntityType(NKart.Core.EntityType)">
            <summary>
            Gets a collection provider types for a specific entity type.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderForCollection(System.Guid)">
            <summary>
            The get provider for collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderBase"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderAttributeForFilter(System.Guid)">
            <summary>
            Gets the provider attribute for providers responsible for filter group's filters.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IEntityCollectionProviderResolver.GetProviderForCollection``1(System.Guid)">
            <summary>
            The get provider for collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <typeparam name="T">
            The type of provider
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.ICachedQueryableEntityCollectionProvider">
            <summary>
            Defines a QueryableCachedEntityCollectionProvider.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.ICachedQueryableEntityCollectionProvider.GetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged entity keys.
            </summary>
            <param name="args">
            The query arguments
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.IEntityFilterGroupProvider">
            <summary>
            Defines an EntityFilterProviders.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.IEntityFilterGroupProvider.FilterProviderType">
            <summary>
            Gets the type of provider that should be used when creating filter collections
            </summary>
        </member>
        <member name="T:NKart.Core.EntityCollections.IProductEntityCollectionProvider">
            <summary>
            Marker interface for Product <see cref="T:NKart.Core.EntityCollections.IEntityCollectionProvider"/>.
            </summary>
        </member>
        <member name="T:NKart.Core.EntityCollections.IProductEntityFilterGroupProvider">
            <summary>
            Marker interface for Product <see cref="T:NKart.Core.EntityCollections.IEntityFilterGroupProvider"/>.
            </summary>
        </member>
        <member name="T:NKart.Core.EntityCollections.IQueryableEntityCollectionProvider">
            <summary>
            Defines a Queryable Entity Collection Provider.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.IQueryableEntityCollectionProvider.GetEntities(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            The get entities.
            </summary>
            <param name="args">
            The args.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.IQueryableEntityCollectionProvider.GetEntities``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            The get entities.
            </summary>
            <param name="args">
            The args.
            </param>
            <typeparam name="T">
            The type of entity
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.ProductFilterGroupProviderBase">
            <summary>
            A base class for Product based Specified Filter Collections Providers.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.ProductFilterGroupProviderBase"/> class.
            </summary>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.MerchelloContext"/>.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="P:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.FilterProviderType">
            <summary>
            Gets the attribute provider type.
            </summary>
        </member>
        <member name="P:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.EntityGroup">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.PerformExists(NKart.Core.Models.IProduct)">
            <summary>
            Returns true if the entity exists in the collection.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The perform get paged keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a distinct page of product keys not in multiple collections.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a distinct page of product keys from multiple collections.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a distinct page of product keys that don't exist in multiple collections.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.ProductFilterGroupProviderBase.GetAttributeCollectionKeys">
            <summary>
            Gets the collection of child collection keys.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.EntityCollections.QueryableEntityCollectionProviderBase">
            <summary>
            The queryable entity collection provider base.
            </summary>
        </member>
        <member name="M:NKart.Core.EntityCollections.QueryableEntityCollectionProviderBase.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.QueryableEntityCollectionProviderBase"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.QueryableEntityCollectionProviderBase.GetEntities``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            The get entities.
            </summary>
            <param name="args">
            The args.
            </param>
            <typeparam name="T">
            The type of entity
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.QueryableEntityCollectionProviderBase.GetEntities(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            The get entities.
            </summary>
            <param name="args">
            The args.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.StaticProductCollectionProviderBase.#ctor(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.EntityCollections.StaticProductCollectionProviderBase"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.EntityCollections.StaticProductCollectionProviderBase.PerformExists(NKart.Core.Models.IProduct)">
            <summary>
            The perform exists.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.StaticProductCollectionProviderBase.PerformGetPagedEntities(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get entities.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:NKart.Core.EntityCollections.StaticProductCollectionProviderBase.PerformGetPagedEntityKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged entity keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.StaticProductCollectionProviderBase.PerformGetPagedEntityKeys(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets paged entity keys in the collection
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.StaticProductCollectionProviderBase.PerformGetPagedEntityKeysNotInCollection(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get paged entity keys not in collection.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.EntityCollections.StaticProductCollectionProviderBase.PerformGetPagedEntityKeysNotInCollection(System.Collections.Generic.Dictionary{System.String,System.Object},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get paged entity keys not in collection.
            </summary>
            <param name="args">
            The args.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Extensions">
            <summary>
            Contains extension methods for various classes.
            </summary>
            <summary>
            Extension methods for <see cref="T:System.DateTime"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection"/>.
            </summary>
            <summary>
            Extension methods for IEnumerable types
            </summary>
            <summary>
            Extensions methods for <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>.
            </summary>
            <summary>
            Extension methods for IAddress
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.ICountry"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.ICustomer"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.IDataModifierData"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.IInvoice"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.ILineItem"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.ILineItemContainer"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.INote"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.INotificationMessage"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Strategies.Itemization.InvoiceItemItemization"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Marketing.Offer.IOffer"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Marketing.Offer.IOfferResult`2"/>
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.IOrder"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.IPayment"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.IProduct"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.IProvince"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.IShipment"/>.
            </summary>
            <summary>
            Extension methods for <see cref="!:IStore"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Models.IWarehouse"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Observation.ITrigger"/> and <see cref="T:NKart.Core.Observation.IMonitor"/>
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Marketing.Offer.OfferComponentDefinition"/>.
            </summary>
            <summary>
            Extension methods for PagedCollection.
            </summary>
            <summary>
            Extensions for <see cref="T:Umbraco.Core.PluginManager"/>.
            </summary>
            <summary>
            Extension methods for <see cref="T:NKart.Core.Trees.TreeNode`1"/>.
            </summary>
            <summary>
            Extension methods for versioning.
            </summary>
        </member>
        <member name="F:NKart.Core.Extensions.SqlDateTimeMinValueString">
            <summary>
            The SQL date time min value string.
            </summary>
        </member>
        <member name="F:NKart.Core.Extensions.SqlDateTimeMaxValueString">
            <summary>
            The SQL date time max value string.
            </summary>
        </member>
        <member name="M:NKart.Core.Extensions.ConverDateTimeMinValueToNull(System.DateTime)">
            <summary>
            Converts a date time min value to null.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The nullable <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ConvertDateTimeMaxValueToNull(System.DateTime)">
            <summary>
            The convert date time max value to null.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The nullable <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ConvertDateTimeNullToMinValue(System.Nullable{System.DateTime})">
            <summary>
            The convert date time null to min value.
            </summary>
            <param name="dt">
            The date time value.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ConvertDateTimeNullToMaxValue(System.Nullable{System.DateTime})">
            <summary>
            The convert date time null to max value.
            </summary>
            <param name="dt">
            The date time value.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SqlDateTimeMinValueAsDateTimeMinValue(System.DateTime)">
            <summary>
            Checks if parameter is a min SQL DateTime value and return the .NET DateTime Min.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SqlDateTimeMaxValueAsSqlDateTimeMaxValue(System.DateTime)">
            <summary>
            Checks if parameter is a max SQL DateTime value and return the .NET DateTime Max.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsSqlDateTimeMinValue(System.DateTime)">
            <summary>
            If value parameter passes is DateTime min returns the SQL Server min date time value
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsSqlDateTimeMaxValue(System.DateTime)">
            <summary>
            If value parameter passes is DateTime max returns the SQL Server max date time value
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.FirstOfMonth(System.DateTime)">
            <summary>
            Gets the first day a month month.
            </summary>
            <param name="current">
            The reference date.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.EndOfMonth(System.DateTime)">
            <summary>
            Gets the last day of a month.
            </summary>
            <param name="current">
            The reference date.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.StartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the start of week.
            </summary>
            <param name="dt">
            The date time.
            </param>
            <param name="startOfWeek">
            The start of week.
            </param>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetStartOfDay(System.DateTime)">
            <summary>
            Returns a date with time at start of the day
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetEndOfDay(System.DateTime)">
            <summary>
            Returns a date with the time at the end of the day
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetDateForSql(System.DateTime)">
            <summary>
            Returns a date like '12 January 2017' which sql can work out. Helps for systems where date is in different format
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetDateForSqlStartOfDay(System.DateTime)">
            <summary>
            Gets the start of a day time, and returns format that SQL can work with
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetDateForSqlEndOfDay(System.DateTime)">
            <summary>
            /// Gets the end of a day time, and returns format that SQL can work with
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Extensions.SqlDateTimeMinValue">
            <summary>
            Parses the SQL DateTime min value string
            </summary>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SqlDateTimeMaxValue">
            <summary>
            Parses the SQL DateTime max value string
            </summary>
            <returns>
            The <see cref="T:System.DateTime"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsEnumerable(NKart.Core.Models.DetachedContent.DetachedDataValuesCollection)">
            <summary>
            Converts data values collection data into a more easily serializable collection for display classes (back office UI)
            </summary>
            <param name="dataValues">The <see cref="T:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection"/></param>
            <returns>An <c>IEnumerable{object}</c></returns>        
        </member>
        <member name="M:NKart.Core.Extensions.CartesianProduct``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            An enumerable representing the cartesian product of the sequences
            </summary>
            <typeparam name="T">The type of the value</typeparam>
            <param name="sequences">The collections used in the cartesian product</param>
            <returns>The cartesian product of the sequences</returns>
            <seealso cref="!:http://stackoverflow.com/questions/3093622/generating-all-possible-combinations"/>
        </member>
        <member name="M:NKart.Core.Extensions.Split``1(``0[],System.Int32)">
            <summary>
            Splits an array into several smaller arrays.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="array">The array to split.</param>
            <param name="size">The size of the smaller arrays.</param>
            <returns>An array containing smaller arrays.</returns>
        </member>
        <member name="M:NKart.Core.Extensions.AllCombinationsOf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds all possible combinations of the items in the collection.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <typeparam name="T">
            The type of value in the collection
            </typeparam>
            <returns>
            A statics in the form of a collection of Tuples representing the level (number of items in the match collection) of the matches and a list of
            matches that constitute the matching group.
            
            e.g.  For  V1, V2, T3
            we expect
            
            [
               [1, [V1]], [1, [V2]], [1, [V3]],
               [2, [V1, V2]], [2, [V1, V3]], [2, [V2, V3]]
               [3, [V1, V2, V3]]
            ]
            
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ContainsAny(NKart.Core.Models.ExtendedDataCollection,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The contains any.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetValue``1(NKart.Core.Models.ExtendedDataCollection,System.String)">
            <summary>
            Gets a typed value.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="key">
            The key.
            </param>
            <typeparam name="T">
            The type to be returned.
            </typeparam>
            <returns>
            The typed value.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SetValue``1(NKart.Core.Models.ExtendedDataCollection,System.String,``0)">
            <summary>
            Sets an object value into an extended data collection
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="key">
            The key.
            </param>
            <param name="model">
            The model.
            </param>
            <typeparam name="T">
            The type of object to be serialized
            </typeparam>
        </member>
        <member name="M:NKart.Core.Extensions.AddExtendedDataCollection(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            The add extended data collection.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="extendedDataToSerialize">
            The extended data to serialize.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.ContainsExtendedDataSerialization(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            True/false indicating whether or not this extended data collection contains a child serialized extended data collection
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            A value indicating whether or not this extended data collection contains a child serialized extended data collection
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetExtendedDataCollection(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ExtendedDataCollection"/> from the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetItemsByKeyPrefix(NKart.Core.Models.ExtendedDataCollection,System.String)">
            <summary>
            Gets a list of all keys with a given key prefix.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="prefix">
            The prefix.
            </param>
            <returns>
            The collection of values that match the prefix.
            </returns>
            <remarks>
            Introduced for customer context conversions.
            </remarks>
        </member>
        <member name="M:NKart.Core.Extensions.AddLineItemCollection(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.LineItemCollection)">
            <summary>
            Adds a <see cref="T:NKart.Core.Models.LineItemCollection"/> to the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <param name="lineItemCollection">
            The line Item Collection.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.GetLineItemCollection``1(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Creates an instance of <see cref="T:NKart.Core.Models.LineItemCollection"/> from a serialized collection in the ExtendedDataCollection
            </summary>
            <typeparam name="T">The type of the <see cref="T:NKart.Core.Models.ILineItem"/></typeparam>
            <param name="extendedData">The extended data collection</param>
            <returns><see cref="T:NKart.Core.Models.LineItemCollection"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetLineItemXmlValues(System.String)">
            <summary>
            Helper method to parse Xml document
            </summary>
            <param name="lineItemXml">
            The line Item Xml.
            </param>
            <returns>
            A dictionary of line items
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetAllowsValidationValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            The get allows validation value.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddProductVariantValues(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.IProductVariant)">
            <summary>
            The add product variant values.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="productVariant">
            The product variant.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddProductValues(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.IProduct)">
            <summary>
            Adds product values
            </summary>
            <param name="extendedData">
            The extended data
            </param>
            <param name="product">
            The product variant
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddBaseProductValues(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.IProductBase)">
            <summary>
            Adds product base values
            </summary>
            <param name="extendedData">
            The extended data
            </param>
            <param name="productBase">
            The base product
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.TaxIncludedInProductPrice(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            The tax included in product price.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <returns>
            A value indicating whether or not tax is included in the product price.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ProductPriceTaxAmount(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            The product tax amount.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ProductPreTaxPrice(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            The product pre tax price.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ProductSalePriceTaxAmount(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            The product tax amount.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ProductPreTaxSalePrice(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            The product pre tax sale price.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.DefinesProductVariant(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            True/false indicating whether or not this extended data collection contains information 
            which could define a <see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ContainsProductVariantKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            True/false indicating whether or not the collection contains a ProductVariantKey
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            A value indicating whether or not the extended data collection contains a product variant key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetProductVariantKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Return the ProductVariantKey
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The product variant key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ContainsProductKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            True/false indicating whether or not the collection contains a ProductKey
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            A value indicating whether or not the extended data collection contains a product key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetProductKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the ProductKey
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The product key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ContainsVersionKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            True/false indicating whether or not the collection contains a ProductKey
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <returns>
             A value indicating whether or not the extended data collection contains a version key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetVersionKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the VersionKey
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The version key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetTaxableValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchTaxable" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>A value indicating whether or not the line item is taxable</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetTrackInventoryValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchTrackInventory" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>A value indicating whether or not the line item (product) should be included in inventory operations</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetOutOfStockPurchaseValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchOutOfStockPurchase" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>A value indicating whether or not the item can be purchased even if it's out of stock</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetShippableValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchShippable" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>A value indicating whether or not the item is shippable</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetDownloadValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchDownload" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>A value indicating whether or not the item is downloadable</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetDownloadMediaIdValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchTrackInventory" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>The Umbraco media Id</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetPriceValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchPrice" value
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The price.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetOnSaleValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchOnSale" value as a boolean
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            A value indicating whether or not the item is on sale.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetSalePriceValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchSalePrice" value
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The sales price
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetManufacturerValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchManufacturer" value
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The manufacturer.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetManufacturerModelNumberValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the "merchManufacturerModelNumber" value
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The manufacturers model number
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetWeightValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            returns the "merchWeight" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>The weight</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetHeightValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            returns the "merchHeight" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>The height</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetWidthValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            returns the "merchWidth" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>The width</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetLengthValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            returns the "merchLength" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>The length</returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetBarcodeValue(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            returns the "merchWeight" value
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>The barcode</returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddAddress(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.IAddress,NKart.Core.AddressType)">
            <summary>
            Adds an <see cref="T:NKart.Core.Models.IAddress"/> to extended data.  This is intended for shipment addresses
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <param name="address">
            The address.
            </param>
            <param name="addressType">
            The Origin or Destination addresses
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddAddress(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.IAddress,System.String)">
            <summary>
            Adds an <see cref="T:NKart.Core.Models.IAddress"/> to extended data.  This is intended for shipment addresses
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <param name="address">
            The <see cref="T:NKart.Core.Models.IAddress"/> to be added to extended data
            </param>
            <param name="dictionaryKey">
            The dictionary key used to reference the serialized <see cref="T:NKart.Core.Models.IAddress"/>
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.GetAddress(NKart.Core.Models.ExtendedDataCollection,NKart.Core.AddressType)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IAddress"/> from the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <param name="addressType">
            The address Type.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetAddress(NKart.Core.Models.ExtendedDataCollection,System.String)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IAddress"/> from the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <param name="dictionaryKey">
            The dictionary Key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddShipment(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.IShipment)">
            <summary>
            Adds a <see cref="T:NKart.Core.Models.IShipment"/> to the extended data collection
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <param name="shipment">
            The shipment.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.GetShipment``1(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Gets (creates a new <see cref="T:NKart.Core.Models.IShipment"/>) from values saved in the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>
            </summary>
            <typeparam name="T">
            The type of line item
            </typeparam>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ContainsShipmentKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            True/false indicating whether or not the collection contains a ShipmentKey
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            A value indicating whether or not the extended data collection contains a shipment key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetShipmentKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the merchShipmentKey value as a GUID
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The GUID based 'Key' of the <see cref="T:NKart.Core.Models.IShipment"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetShipMethodKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Returns the merchShipMethodKey value as a GUID
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The GUID based 'Key' of the <see cref="T:NKart.Core.Models.IShipMethod"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ContainsWarehouseCatalogKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            True/false indicating whether or not the collection contains a WarehouseCatalogKey
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            A value indicating whether or not the extended data collection contains a warehouse key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetWarehouseCatalogKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Return the WarehouseCatalogKey
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The GUID warehouse catalog key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddPaymentMethod(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.IPaymentMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.IPaymentMethod"/> to an extended data collection
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <param name="paymentMethod">
            The payment Method.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.GetPaymentMethodKey(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPaymentMethod"/> from the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>
            </summary>
            <param name="extendedData">
            The extended Data.
            </param>
            <returns>
            The payment method key.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsEnumerable(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Converts extended data into a more easily serializable collection for display classes (back office UI)
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>An <c>IEnumerable{object}</c></returns>        
        </member>
        <member name="M:NKart.Core.Extensions.AsExtendedDataCollection(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Gets a extended data collection stored within an extended data collection.
            </summary>
            <param name="source">
            The source.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ExtendedDataAsJson(NKart.Core.Models.IHasExtendedData)">
            <summary>
            Serializes the extended data collection to an JSON representation
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.IsValidJson(System.String)">
            <summary>
            Checks a string to see if it's valid JSON or not
            </summary>
            <param name="strInput">
            Potential Json string
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.MergeDataModifierLogs(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Models.IDataModifierData)">
            <summary>
            Merges the modifier extend data(s) into the extended data
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="modifier">
            The modifier.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AsGuid(System.String)">
            <summary>
            Gets the value as a GUID.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsBool(System.String)">
            <summary>
            Gets the.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsDecimal(System.String)">
            <summary>
            The get decimal value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsInt(System.String)">
            <summary>
            The get integer value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetXmlValue(System.Xml.Linq.XDocument,System.String)">
            <summary>
            The get xml value.
            </summary>
            <param name="xdoc">
            The <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <param name="elementName">
            The element name.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            Throws if the element name does not exist in the Xml document
            </exception>
        </member>
        <member name="M:NKart.Core.Extensions.Country(NKart.Core.Models.IAddress)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.ICountry"/> for the <see cref="T:NKart.Core.Models.IAddress"/>
            </summary>
            <param name="address">
            The address.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICountry"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TrySplitFirstName(NKart.Core.Models.IAddress)">
            <summary>
            Attempts to split the first name out of the <see cref="T:NKart.Core.Models.IAddress"/> name field
            </summary>
            <param name="address">
            The address.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TrySplitLastName(NKart.Core.Models.IAddress)">
            <summary>
            Attempts to split the last name (surname) out of the <see cref="T:NKart.Core.Models.IAddress"/> name field.
            </summary>
            <param name="address">
            The address.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ToCustomerAddress(NKart.Core.Models.IAddress,NKart.Core.Models.ICustomer,System.String,NKart.Core.AddressType)">
            <summary>
            Maps a <see cref="T:NKart.Core.Models.IAddress"/> to a <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="address">
            The address.
            </param>
            <param name="customer">
            The customer.
            </param>
            <param name="label">
            The address label
            </param>
            <param name="addressType">
            The type of address to be saved
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsAddress(NKart.Core.Models.ICustomerAddress,System.String)">
            <summary>
            Maps a <see cref="T:NKart.Core.Models.ICustomerAddress"/> to a <see cref="T:NKart.Core.Models.IAddress"/>.
            </summary>
            <param name="address">
            The address.
            </param>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsAddress(NKart.Core.Models.ICustomerAddress,System.String,System.String)">
            <summary>
            Maps a <see cref="T:NKart.Core.Models.ICustomerAddress"/> to a <see cref="T:NKart.Core.Models.IAddress"/>.
            </summary>
            <param name="address">
            The address.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="email">
            The email
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.DefaultCustomerAddress(NKart.Core.Models.ICustomer,NKart.Core.AddressType)">
            <summary>
            The default customer address associated with a customer of a given type
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CreateCustomerAddress(NKart.Core.Models.ICustomer,NKart.Core.Models.IAddress,System.String,NKart.Core.AddressType)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.ICustomerAddress"/> based off an <see cref="T:NKart.Core.Models.IAddress"/>
            </summary>
            <param name="customer">
            The customer associated with the address
            </param>
            <param name="address">
            The address.
            </param>
            <param name="label">
            The address label
            </param>
            <param name="addressType">
            The <see cref="T:NKart.Core.AddressType"/>
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SaveCustomerAddress(NKart.Core.Models.ICustomer,NKart.Core.Models.ICustomerAddress)">
            <summary>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/> to be saved
            </summary>
            <param name="customer">
            The customer associated with the address
            </param>
            <param name="address">
            The address.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.DeleteCustomerAddress(NKart.Core.Models.ICustomer,NKart.Core.Models.ICustomerAddress)">
            <summary>
            Deletes a customer address.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="address">
            The address to be deleted
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.Invoices(NKart.Core.Models.ICustomer)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IInvoice"/> associated with the customer
            </summary>
            <param name="customer">
            The customer.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Payments(NKart.Core.Models.ICustomer)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> associated with the customer
            </summary>
            <param name="customer">
            The customer.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IPayment"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCollection(NKart.Core.Models.ICustomer,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The add to collection.
            </summary>
            <param name="customer">
            The invoice.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCollection(NKart.Core.Models.ICustomer,System.Guid)">
            <summary>
            The add to collection.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.RemoveFromCollection(NKart.Core.Models.ICustomer,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The remove from collection.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="collection">
            The collection.
            </param>        
        </member>
        <member name="M:NKart.Core.Extensions.RemoveFromCollection(NKart.Core.Models.ICustomer,System.Guid)">
            <summary>
            The remove from collection.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>        
        </member>
        <member name="M:NKart.Core.Extensions.GetCollectionsContaining(NKart.Core.Models.ICustomer)">
            <summary>
            Returns static collections containing the customer.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CustomerAddresses(NKart.Core.Models.ICustomer,NKart.Core.IMerchelloContext)">
            <summary>
            Gets a collection of addresses associated with the customer
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> associated with the customer
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CustomerAddresses(NKart.Core.Models.ICustomer,NKart.Core.IMerchelloContext,NKart.Core.AddressType)">
            <summary>
            The addresses.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="merchelloContext">
            The merchello Context.
            </param>
            <param name="addressType">
            The address Type.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> associated with the customer of a given type
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.DefaultCustomerAddress(NKart.Core.Models.ICustomer,NKart.Core.IMerchelloContext,NKart.Core.AddressType)">
            <summary>
            The default customer address.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            The default <see cref="T:NKart.Core.Models.ICustomerAddress"/> of a given type
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CreateCustomerAddress(NKart.Core.Models.ICustomer,NKart.Core.IMerchelloContext,NKart.Core.Models.IAddress,System.String,NKart.Core.AddressType)">
            <summary>
            The create customer address.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="address">
            The address.
            </param>
            <param name="label">
            The customer label
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SaveCustomerAddress(NKart.Core.Models.ICustomer,NKart.Core.IMerchelloContext,NKart.Core.Models.ICustomerAddress)">
            <summary>
            Saves customer address.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="address">
            The address.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.DeleteCustomerAddress(NKart.Core.Models.ICustomer,NKart.Core.IMerchelloContext,NKart.Core.Models.ICustomerAddress)">
            <summary>
            The delete customer address.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="address">
            The address.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.Invoices(NKart.Core.Models.ICustomer,NKart.Core.IMerchelloContext)">
            <summary>
            Gets the collection of <see cref="T:NKart.Core.Models.IInvoice"/> associated with the customer
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Payments(NKart.Core.Models.ICustomer,NKart.Core.IMerchelloContext)">
            <summary>
            Gets the collection of <see cref="T:NKart.Core.Models.IPayment"/> associated with a customer
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IPayment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SerializeToXml(NKart.Core.Models.ICustomer)">
            <summary>
            Serializes a customer to xml suitable for Examine indexer.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:System.Xml.Linq.XDocument"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddressesAsJson(NKart.Core.Models.ICustomer)">
            <summary>
            The customer address collection as JSON.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The JSON representation <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ModifyData``1(``0,System.String,System.Object)">
            <summary>
            Modifies property data.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="propertyName">
            The property name.
            </param>
            <param name="newValue">
            The new value.
            </param>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.IDataModifierData"/>
            </typeparam>
        </member>
        <member name="M:NKart.Core.Extensions.ModifyData``1(``0,System.String,System.Object,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Modifies property data.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="propertyName">
            The property name.
            </param>
            <param name="newValue">
            The new value.
            </param>
            <param name="extendedData">
            The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>
            </param>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.IDataModifierData"/>
            </typeparam>
        </member>
        <member name="M:NKart.Core.Extensions.EntityType(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Gets the <see cref="M:NKart.Core.Extensions.EntityType(NKart.Core.Models.Interfaces.IEntityCollection)"/> managed by the collection.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <returns>
            The <see cref="M:NKart.Core.Extensions.EntityType(NKart.Core.Models.Interfaces.IEntityCollection)"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetEntities(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The get entities.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetEntities``1(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The get entities.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.EntityBase.IEntity"/>
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetPagedEntities(NKart.Core.Models.Interfaces.IEntityCollection,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a generic page of Entities.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetPagedEntities``1(NKart.Core.Models.Interfaces.IEntityCollection,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a typed Page entities.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.EntityBase.IEntity"/>
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Exists``1(NKart.Core.Models.Interfaces.IEntityCollection,``0)">
            <summary>
            The exists.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <param name="entity">
            The entity.
            </param>
            <typeparam name="T">
            The type of the <see cref="T:NKart.Core.Models.EntityBase.IEntity"/>
            </typeparam>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetTypeField(NKart.Core.Models.Interfaces.IHasEntityTypeField)">
            <summary>
            The get type field.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ChildCollections(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The child collections.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveProvider(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Resolves the provider for the collection.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderBase"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SetParent(NKart.Core.Models.Interfaces.IEntityCollection,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The save as child of.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <param name="parent">
            The parent.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.SetParent(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Sets the parent to root
            </summary>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveProvider``1(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The resolve provider.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <typeparam name="T">
            The type of provider
            </typeparam>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderBase"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveValidatedProvider``1(NKart.Core.Models.Interfaces.IEntityCollection,``0)">
            <summary>
            The resolve validated provider.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <param name="entity">
            The entity.
            </param>
            <typeparam name="T">
            The type of the <see cref="T:NKart.Core.Models.EntityBase.IEntity"/>
            </typeparam>
            <returns>
            The <see cref="T:NKart.Core.EntityCollections.EntityCollectionProviderBase"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TypeOfEntities(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Gets the actual System.Type of the entities in the collection.
            </summary>
            <param name="collection">
            The collection.
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.PrefixedInvoiceNumber(NKart.Core.Models.IInvoice)">
            <summary>
            Returns a constructed invoice number (including it's invoice number prefix - if any)
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <returns>The prefixed invoice number</returns>
        </member>
        <member name="M:NKart.Core.Extensions.CurrencyCode(NKart.Core.Models.IInvoice)">
            <summary>
            Returns the currency code associated with the invoice
            </summary>
            <param name="invoice">The invoice</param>
            <returns>The currency code associated with the invoice</returns>
        </member>
        <member name="M:NKart.Core.Extensions.Currency(NKart.Core.Models.IInvoice)">
            <summary>
            The currency.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICurrency"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Currency(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext)">
            <summary>
            The currency.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICurrency"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SetBillingAddress(NKart.Core.Models.IInvoice,NKart.Core.Models.IAddress)">
            <summary>
            Utility extension method to add an <see cref="T:NKart.Core.Models.IAddress"/> to an <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to which to set the address information</param>
            <param name="address">The billing address <see cref="T:NKart.Core.Models.IAddress"/></param>
        </member>
        <member name="M:NKart.Core.Extensions.GetBillingAddress(NKart.Core.Models.IInvoice)">
            <summary>
            Utility extension to extract the billing <see cref="T:NKart.Core.Models.IAddress"/> from an <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice</param>
            <returns>
            The billing address saved in the invoice
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetShippingAddresses(NKart.Core.Models.IInvoice)">
            <summary>
            Gets the collection of shipping addresses.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ReplaceablePatterns(NKart.Core.Models.IInvoice,System.String)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/> for the invoice
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="currencySymbol">
            The currency symbol
            </param>
            <returns>
            The collection of replaceable patterns
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCollection(NKart.Core.Models.IInvoice,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The add to collection.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCollection(NKart.Core.Models.IInvoice,System.Guid)">
            <summary>
            The add to collection.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.RemoveFromCollection(NKart.Core.Models.IInvoice,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The remove from collection.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="collection">
            The collection.
            </param>        
        </member>
        <member name="M:NKart.Core.Extensions.RemoveFromCollection(NKart.Core.Models.IInvoice,System.Guid)">
            <summary>
            The remove from collection.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>        
        </member>
        <member name="M:NKart.Core.Extensions.GetCollectionsContaining(NKart.Core.Models.IInvoice)">
            <summary>
            Returns static collections containing the invoice.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Customer(NKart.Core.Models.IInvoice)">
            <summary>
            Gets the customer from an invoice (if applicable)
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Customer(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext)">
            <summary>
            The customer.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.PrepareOrder(NKart.Core.Models.IInvoice)">
            <summary>
            Prepares an <see cref="T:NKart.Core.Models.IOrder"/> without saving it to the database.  
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to base the order on</param>
            <returns>The <see cref="T:NKart.Core.Models.IOrder"/></returns>        
        </member>
        <member name="M:NKart.Core.Extensions.PrepareOrder(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext)">
            <summary>
            Prepare an <see cref="T:NKart.Core.Models.IOrder"/> with saving it to the database
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to base the order or</param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <returns>The <see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.PrepareOrder(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext,NKart.Core.Builders.IBuilderChain{NKart.Core.Models.IOrder})">
            <summary>
            Prepares an <see cref="T:NKart.Core.Models.IOrder"/> without saving it to the database.  
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to base the order on</param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="orderBuilder">The <see cref="T:NKart.Core.Builders.IBuilderChain`1"/></param>
            <returns>The <see cref="T:NKart.Core.Models.IOrder"/></returns>
            <remarks>
            
            This method will save the invoice in the event it has not previously been saved
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Extensions.AppliedPayments(NKart.Core.Models.IInvoice)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/> for the invoice
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AppliedPayments(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/> for this <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AppliedPayments(NKart.Core.Models.IInvoice,NKart.Core.Services.IGatewayProviderService)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/> for this <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="gatewayProviderService">The <see cref="T:NKart.Core.Services.IGatewayProviderService"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.Payments(NKart.Core.Models.IInvoice)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> applied to the invoice
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.Payments(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> applied to the invoice
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizePayment(NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizePayment(NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizePayment(NKart.Core.Models.IInvoice,System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizePayment(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext,System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizePayment(NKart.Core.Models.IInvoice,System.Guid)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizeCapturePayment(NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizeCapturePayment(NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizeCapturePayment(NKart.Core.Models.IInvoice,System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizeCapturePayment(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext,System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AuthorizeCapturePayment(NKart.Core.Models.IInvoice,System.Guid)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.CapturePayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">
            The invoice to be paid
            </param>
            <param name="payment">
            The <see cref="T:NKart.Core.Models.IPayment"/>
            </param>
            <param name="paymentGatewayMethod">
            The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </param>
            <param name="amount">
            The amount to the payment to be captured
            </param>
            <param name="args">
            Additional arguments required by the payment processor
            </param>
            <returns>
            A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CapturePayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,System.Decimal)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">
            The invoice to be paid
            </param>
            <param name="payment">
            The <see cref="T:NKart.Core.Models.IPayment"/>
            </param>
            <param name="paymentGatewayMethod">
            The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </param>
            <param name="amount">
            The amount to the payment to be captured
            </param>
            <returns>
            A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CapturePayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Guid,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be paid</param>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/></param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="amount">The amount to the payment to be captured</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.CapturePayment(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext,NKart.Core.Models.IPayment,System.Guid,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be paid</param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/></param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="amount">The amount to the payment to be captured</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,System.Decimal)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Guid,System.Decimal)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentMethodKey">The key of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Guid,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentMethodKey">The key of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext,NKart.Core.Models.IPayment,System.Guid,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentMethodKey">The key of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.VoidPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be voided</param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.VoidPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Guid)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be voided</param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> key</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.VoidPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be voided</param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.VoidPayment(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext,NKart.Core.Models.IPayment,System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="payment">The payment to be voided</param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateTaxes(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Calculates taxes for the invoice
            </summary>
            <param name="invoice">
            The <see cref="T:NKart.Core.Models.IInvoice"/>
            </param>
            <param name="quoteOnly">
            A value indicating whether or not the taxes should be calculated as a quote
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/> from the calculation
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateTaxes(NKart.Core.Models.IInvoice,NKart.Core.Models.IAddress,System.Boolean)">
            <summary>
            Calculates taxes for the invoice
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="taxAddress">The address (generally country code and region) to be used to determine the taxation rates</param>
            <param name="quoteOnly">A value indicating whether or not the taxes should be calculated as a quote</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/> from the calculation</returns>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateTaxes(NKart.Core.Models.IInvoice,NKart.Core.IMerchelloContext,NKart.Core.Models.IAddress,System.Boolean)">
            <summary>
            Calculates taxes for the invoice
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="taxAddress">The address (generally country code and region) to be used to determine the taxation rates</param>
            <param name="quoteOnly">A value indicating whether or not the taxes should be calculated as a quote</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/> from the calculation</returns>
        </member>
        <member name="M:NKart.Core.Extensions.TotalItemPrice(NKart.Core.Models.IInvoice)">
            <summary>
            Sums the total price of invoice items
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TotalCustomItemPrice(NKart.Core.Models.IInvoice)">
            <summary>
            Sums the total prices of custom line items.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TotalAdjustmentItemPrice(NKart.Core.Models.IInvoice)">
            <summary>
            Sums the total price of adjustment line items.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TotalShipping(NKart.Core.Models.IInvoice)">
            <summary>
            Sums the total shipping amount for the invoice items
            </summary>
            <param name="invoice">
            The <see cref="T:NKart.Core.Models.IInvoice"/>
            </param>
            <returns>
            The <see cref="T:System.Decimal"/> total.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TotalTax(NKart.Core.Models.IInvoice)">
            <summary>
            Sums the total tax amount for the invoice items
            </summary>
            <param name="invoice">
            The <see cref="T:NKart.Core.Models.IInvoice"/>
            </param>
            <returns>
            The <see cref="T:System.Decimal"/> total.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TotalDiscounts(NKart.Core.Models.IInvoice)">
            <summary>
            The total discounts.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.EnsureInvoiceStatus(NKart.Core.Models.IInvoice)">
            <summary>
            Ensures the invoice status.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IInvoiceStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.EnsureInvoiceStatus(NKart.Core.Models.IInvoice,NKart.Core.Services.IGatewayProviderService)">
            <summary>
            Ensures the invoice status.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IInvoiceStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SerializeToXml(NKart.Core.Models.IInvoice)">
            <summary>
            Serializes <see cref="T:NKart.Core.Models.IInvoice"/> object
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <remarks>
            Intended to be used by the Merchello.Examine.Providers.MerchelloInvoiceIndexer
            </remarks>
            <returns>
            The <see cref="T:System.Xml.Linq.XDocument"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetInvoiceStatusJson(NKart.Core.Models.IInvoiceStatus)">
            <summary>
            The get invoice status JSON.
            </summary>
            <param name="invoiceStatus">
            The invoice status.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetCurrencyJson(NKart.Core.Models.ICurrency)">
            <summary>
            The get currency JSON.
            </summary>
            <param name="currency">
            The currency.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetGenericItemsCollection(System.Collections.Generic.IEnumerable{NKart.Core.Models.ILineItem})">
            <summary>
            The get generic items collection.
            </summary>
            <param name="items">
            The items.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AllowsValidation(NKart.Core.Models.ILineItem)">
            <summary>
            The allows validation.
            </summary>
            <param name="lineItem">
            The line item.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsLineItemOf``1(NKart.Core.Models.ILineItem)">
            <summary>
            Converts a line item of one type to a line item of another type
            </summary>
            <typeparam name="T">The specific type of <see cref="T:NKart.Core.Models.ILineItem"/></typeparam>
            <param name="lineItem">The line item</param>
            <returns>A <see cref="T:NKart.Core.Models.LineItemBase"/> of type T</returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsLineItemOf``1(NKart.Core.Gateways.Shipping.IShipmentRateQuote)">
            <summary>
            Creates a line item of a particular type for a shipment rate quote
            </summary>
            <typeparam name="T">The type of the line item to create</typeparam>
            <param name="shipmentRateQuote">The <see cref="T:NKart.Core.Gateways.Shipping.ShipmentRateQuote"/> to be translated to a line item</param>
            <returns>A <see cref="T:NKart.Core.Models.LineItemBase"/> of type T</returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsLineItemOf``1(NKart.Core.Gateways.Taxation.ITaxCalculationResult)">
            <summary>
            Creates a line item of a particular type for a invoiceTaxResult
            </summary>
            <typeparam name="T">The type of the line item to be created</typeparam>
            <param name="taxCalculationResult">The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/> to be converted to a line item</param>
            <returns>A <see cref="T:NKart.Core.Models.ILineItem"/> representing the <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsLineItemWithKeyOf``1(NKart.Core.Models.ILineItem)">
            <summary>
            Converts a line item of one type to a line item of another type while preserving the key.
            </summary>
            <param name="lineItem">
            The line item.
            </param>
            <typeparam name="T">
            The type of the line item
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.HasShippableItems(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Returns a value indicating whether collection contains shippable items.
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            A value indicating whether collection contains shippable items.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ShippableItems(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Returns a collection of shippable line items
            </summary>
            <param name="container">The <see cref="T:NKart.Core.Models.ILineItemContainer"/></param>
            <returns>A collection of line items that can be shipped</returns>
        </member>
        <member name="M:NKart.Core.Extensions.IsShippable(NKart.Core.Models.ILineItem)">
            <summary>
            True/false indicating whether or not this lineItem represents a line item that can be shipped (a product)
            </summary>
            <param name="lineItem">
            The <see cref="T:NKart.Core.Models.ILineItem"/>
            </param>
            <returns>
            True or false indicating whether or not this line item represents a shippable line item
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetTypeField(NKart.Core.Models.ILineItem)">
            <summary>
            The get type field.
            </summary>
            <param name="lineItem">
            The line item.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CreateNewItemCacheLineItemContainer(System.Collections.Generic.IEnumerable{NKart.Core.Models.ILineItem})">
            <summary>
            Creates a new <see cref="T:NKart.Core.Models.ILineItemContainer"/> with filtered items.
            </summary>
            <param name="filteredItems">
            The line items.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ILineItemContainer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetFormatterIterationIdentifier(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Gets the 'Iteration token' used by the PatternReplaceFormatter to identify line item iterations
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            The iteration identifier
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.LineItemReplaceablePatterns(NKart.Core.Models.ILineItemContainer,System.String)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/> for each line item in the <see cref="T:NKart.Core.Models.LineItemCollection"/>
            </summary>
            <param name="container">
            The container.
            </param>
            <param name="currencySymbol">
            The currency Symbol.
            </param>
            <returns>
            A collection of replaceable patterns
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TaxLineItems(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Gets the tax line items.
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            The collection of tax line items.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ProductLineItems(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Gets the product line items.
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            The collection of product line items.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AdjustmentLineItems(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Gets the adjustment line items.
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            The collection of adjustment line items.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ShippingLineItems(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Gets the shipping line items.
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            The collection of shipping line items.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.DiscountLineItems(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Gets the discount line items.
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            The collection of discount line items.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CustomLineItems(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Gets the custom line items.
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            The collection of customer line items.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddItem(NKart.Core.Models.ILineItemContainer,NKart.Core.Models.IProductVariant,System.Int32)">
            <summary>
            Adds a <see cref="T:NKart.Core.Models.IProductVariant"/> line item to the collection
            </summary>
            <param name="container">
            The container.
            </param>
            <param name="productVariant">
            The product Variant.
            </param>
            <param name="quantity">
            The quantity.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddItem(NKart.Core.Models.ILineItemContainer,NKart.Core.Models.IProductVariant,System.Int32,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Adds a <see cref="T:NKart.Core.Models.IProductVariant"/> line item to the collection
            </summary>
            <param name="container">
            The container.
            </param>
            <param name="productVariant">
            The product Variant.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="extendedData">
            The extended Data.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddItem(NKart.Core.Models.ILineItemContainer,NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal)">
            <summary>
            Adds a line item to the collection
            </summary>
            <param name="container">
            The container.
            </param>
            <param name="lineItemType">
            The line Item Type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The sku.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddItem(NKart.Core.Models.ILineItemContainer,NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Adds a line item to the collection
            </summary>
            <param name="container">
            The container.
            </param>
            <param name="lineItemType">
            The line Item Type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The sku.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="amount">
            The amount.
            </param>
            <param name="extendedData">
            The extended Data.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddItem(NKart.Core.Models.ILineItemContainer,NKart.Core.Models.ILineItem)">
            <summary>
            Adds a line item to the collection
            </summary>
            <param name="container">
            The container.
            </param>
            <param name="lineItem">
            The line Item.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.ToJsonCollection(System.Collections.Generic.IEnumerable{NKart.Core.Models.INote})">
            <summary>
            Serializes a notes collection to a JSON collection.
            </summary>
            <param name="notes">
            The notes.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
            <remarks>
            Used for writing collection to examine.
            </remarks>
        </member>
        <member name="M:NKart.Core.Extensions.MemberwiseClone(NKart.Core.Models.INotificationMessage)">
            <summary>
            Performs a member wise clone of a notification message
            </summary>
            <param name="message">
            The message to be cloned.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INotificationMessage"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ItemizeItems(NKart.Core.Models.IInvoice)">
            <summary>
            Itemizes the items in an invoice.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Strategies.Itemization.InvoiceItemItemization"/>.
            </returns>
            <exception cref="T:System.Exception">
            Throws an exception if the itemization strategy could not be instantiated.
            </exception>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateProductTotal(NKart.Core.Strategies.Itemization.InvoiceItemItemization)">
            <summary>
            Calculates the product total.
            </summary>
            <param name="itemization">
            The itemization.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateShippingTotal(NKart.Core.Strategies.Itemization.InvoiceItemItemization)">
            <summary>
            Calculates the  shipping total.
            </summary>
            <param name="itemization">
            The itemization.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateTaxTotal(NKart.Core.Strategies.Itemization.InvoiceItemItemization)">
            <summary>
            Calculates the tax total.
            </summary>
            <param name="itemization">
            The itemization.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateAdjustmentTotal(NKart.Core.Strategies.Itemization.InvoiceItemItemization)">
            <summary>
            Calculates the adjustment total.
            </summary>
            <param name="itemization">
            The itemization.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateDiscountTotal(NKart.Core.Strategies.Itemization.InvoiceItemItemization)">
            <summary>
            Calculates the discount total.
            </summary>
            <param name="itemization">
            The itemization.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateCustomTotal(NKart.Core.Strategies.Itemization.InvoiceItemItemization)">
            <summary>
            Calculates the custom total.
            </summary>
            <param name="itemization">
            The itemization.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.CalculateTotal(NKart.Core.Strategies.Itemization.InvoiceItemItemization)">
            <summary>
            Calculates the invoice item total.
            </summary>
            <param name="itemization">
            The itemization.
            </param>
            <returns>
            The total.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.As``2(Umbraco.Core.Attempt{NKart.Core.Marketing.Offer.IOfferResult{System.Object,System.Object}})">
            <summary>
            Map an attempt of IOfferResult{object} to an attempt of IOfferResult{T}
            </summary>
            <param name="attempt">
            The attempt.
            </param>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of Award
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.PrefixedOrderNumber(NKart.Core.Models.IOrder)">
            <summary>
            Returns a constructed order number (including it's invoice number prefix - if any)
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/></param>
            <returns>The prefixed order number</returns>
        </member>
        <member name="M:NKart.Core.Extensions.Invoice(NKart.Core.Models.IOrder)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IInvoice"/> for the <see cref="T:NKart.Core.Models.IOrder"/>.
            </summary>
            <param name="order">
            The <see cref="T:NKart.Core.Models.IOrder"/>.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Invoice(NKart.Core.Models.IOrder,NKart.Core.IMerchelloContext)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IInvoice"/> for the <see cref="T:NKart.Core.Models.IOrder"/>.
            </summary>
            <param name="order">
            The <see cref="T:NKart.Core.Models.IOrder"/>.
            </param>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Shipments(NKart.Core.Models.IOrder)">
            <summary>
            Gets a collection of shipments for an order.
            </summary>
            <param name="order">
            The order.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Shipments(NKart.Core.Models.IOrder,NKart.Core.IMerchelloContext)">
            <summary>
            Gets a collection of shipments for an order.
            </summary>
            <param name="order">
            The order.
            </param>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.UnfulfilledItems(NKart.Core.Models.IOrder)">
            <summary>
            Gets a collection of unfulfilled (unshipped) line items
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/></param>        
            <returns>A collection of <see cref="T:NKart.Core.Models.IOrderLineItem"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.UnfulfilledItems(NKart.Core.Models.IOrder,NKart.Core.IMerchelloContext)">
            <summary>
            Gets a collection of unfulfilled (unshipped) line items
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IOrderLineItem"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.UnfulfilledItems(NKart.Core.Models.IOrder,System.Collections.Generic.IEnumerable{NKart.Core.Models.IOrderLineItem})">
            <summary>
            Gets a collection of unfulfilled (unshipped) line items
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/></param>
            <param name="items">A collection of <see cref="T:NKart.Core.Models.IOrderLineItem"/></param>
            <returns>The collection of <see cref="T:NKart.Core.Models.IOrderLineItem"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.UnfulfilledItems(NKart.Core.Models.IOrder,NKart.Core.IMerchelloContext,System.Collections.Generic.IEnumerable{NKart.Core.Models.IOrderLineItem})">
            <summary>
            Gets a collection of unfulfilled (unshipped) line items
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="items">A collection of <see cref="T:NKart.Core.Models.IOrderLineItem"/></param>
            <returns>The collection of <see cref="T:NKart.Core.Models.IOrderLineItem"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.InventoryTrackedItems(NKart.Core.Models.IOrder)">
            <summary>
            Gets a collection of items that have inventory requirements
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IOrderLineItem"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.SerializeToXml(NKart.Core.Models.IOrder)">
            <summary>
            Serializes <see cref="T:NKart.Core.Models.IOrder"/> object
            </summary>
            <remarks>
            Intended to be used by the Merchello.Examine.Providers.MerchelloOrderIndexer
            </remarks>
        </member>
        <member name="M:NKart.Core.Extensions.AppliedPayments(NKart.Core.Models.IPayment)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/> for this <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AppliedPayments(NKart.Core.Models.IPayment,NKart.Core.IMerchelloContext)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/> for this <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AppliedPayments(NKart.Core.Models.IPayment,NKart.Core.Services.IGatewayProviderService)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/> for this <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/></param>
            <param name="gatewayProviderService">The <see cref="T:NKart.Core.Services.IGatewayProviderService"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AppliedToInvoices(NKart.Core.Models.IPayment)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Models.IInvoice"/>s this <see cref="T:NKart.Core.Models.IPayment"/> has been applied to
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.AppliedToInvoices(NKart.Core.Models.IPayment,NKart.Core.IMerchelloContext)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Models.IInvoice"/>s this <see cref="T:NKart.Core.Models.IPayment"/> has been applied to
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.CapturePayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be payed</param>
            <param name="payment">The</param>
            <param name="amount">The amount to the payment to be captured</param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to process the payment</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.CapturePayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,System.Decimal)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be payed</param>
            <param name="payment">The</param>
            <param name="amount">The amount to the payment to be captured</param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to process the payment</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.CapturePayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,System.Guid,System.Decimal)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be payed</param>
            <param name="payment">The</param>
            <param name="paymentMethodKey"></param>
            <param name="amount">The amount to the payment to be captured</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.CapturePayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,System.Guid,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be payed</param>
            <param name="payment">The</param>
            <param name="paymentMethodKey"></param>
            <param name="amount">The amount to the payment to be captured</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.CapturePayment(NKart.Core.Models.IPayment,NKart.Core.IMerchelloContext,NKart.Core.Models.IInvoice,System.Guid,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="invoice">The invoice to be payed</param>
            <param name="payment">The</param>
            <param name="paymentMethodKey"></param>
            <param name="amount">The amount to the payment to be captured</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,System.Decimal)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,System.Guid,System.Decimal)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentMethodKey">The key of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,System.Guid,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentMethodKey">The key of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.RefundPayment(NKart.Core.Models.IPayment,NKart.Core.IMerchelloContext,NKart.Core.Models.IInvoice,System.Guid,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="payment">The payment to be refunded</param>
            <param name="paymentMethodKey">The key of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="amount">The amount to be refunded</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.VoidPayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be voided</param>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.VoidPayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,System.Guid)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be voided</param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> key</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.VoidPayment(NKart.Core.Models.IPayment,NKart.Core.Models.IInvoice,System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be voided</param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> key</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.VoidPayment(NKart.Core.Models.IPayment,NKart.Core.IMerchelloContext,NKart.Core.Models.IInvoice,System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="payment">The payment to be voided</param>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> key</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.ReplaceablePatterns(NKart.Core.Models.IPayment,System.String)">
            <summary>
            The replaceable patterns.
            </summary>
            <param name="payment">
            The payment.
            </param>
            <param name="currencySymbol">
            The currency symbol.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ProductOptionsForAttributes(NKart.Core.Models.IProduct,System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductAttribute})">
            <summary>
            Returns a collection of ProductOption given as list of attributes (choices)
            </summary>
            <param name="product">
            The product
            </param>
            <param name="attributes">
            A collection of <see cref="T:NKart.Core.Models.IProductAttribute"/>
            </param>
            <remarks>
            This is mainly used for suggesting SKU defaults for ProductVariants
            </remarks>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetProductVariantForPurchase(NKart.Core.Models.IProduct)">
            <summary>
            Returns the "master" <see cref="T:NKart.Core.Models.IProductVariant"/> that defines this <see cref="T:NKart.Core.Models.IProduct"/> or null if this <see cref="T:NKart.Core.Models.IProduct"/> has options
            </summary>
            <param name="product">
            The product.
            </param>
            <returns>
            <see cref="T:NKart.Core.Models.IProductVariant"/> or null if this <see cref="T:NKart.Core.Models.IProduct"/> has options
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetProductVariantForPurchase(NKart.Core.Models.IProduct,System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductAttribute})">
            <summary>
            Returns the <see cref="T:NKart.Core.Models.IProductVariant"/> of this <see cref="T:NKart.Core.Models.IProduct"/> that contains a matching collection of <see cref="T:NKart.Core.Models.IProductAttribute"/>. 
            If not match is found, returns null.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="selectedChoices">
            A collection of <see cref="T:NKart.Core.Models.IProductAttribute"/> which define the specific <see cref="T:NKart.Core.Models.IProductVariant"/> of the <see cref="T:NKart.Core.Models.IProduct"/>
            </param>
            <returns>
            <see cref="T:NKart.Core.Models.IProductVariant"/> or null if no <see cref="T:NKart.Core.Models.IProductVariant"/> is found with a matching collection of <see cref="T:NKart.Core.Models.IProductAttribute"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetProductVariantForPurchase(NKart.Core.Models.IProduct,System.Guid[])">
            <summary>
            Returns the <see cref="T:NKart.Core.Models.IProductVariant"/> of this <see cref="T:NKart.Core.Models.IProduct"/> that contains a matching collection of <see cref="T:NKart.Core.Models.IProductAttribute"/>. 
            If not match is found, returns null.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="selectedChoiceKeys">
            The selected Choice Keys.
            </param>
            <returns>
            <see cref="T:NKart.Core.Models.IProductVariant"/> or null if no <see cref="T:NKart.Core.Models.IProductVariant"/> is found with a matching collection of <see cref="T:NKart.Core.Models.IProductAttribute"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCatalogInventory(NKart.Core.Models.IProduct,NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Associates a product with a warehouse catalog
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct"/></param>
            <param name="catalog">The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/></param>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCatalogInventory(NKart.Core.Models.IProductVariant,NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Associates a product variant with a warehouse
            </summary>
            <param name="productVariant">The <see cref="T:NKart.Core.Models.IProductVariant"/></param>
            <param name="catalog">The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/></param>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCatalogInventory(NKart.Core.Models.IProductVariant,System.Guid)">
            <summary>
            Associates a product variant with a warehouse
            </summary>
            <param name="productVariant">
            The <see cref="T:NKart.Core.Models.IProductVariant"/>
            </param>
            <param name="catalogKey">
            The catalog Key.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCatalogInventory(NKart.Core.Models.IProductVariant,NKart.Core.Models.ICatalogInventory)">
            <summary>
            The add to catalog inventory.
            </summary>
            <param name="productVariant">
            The <see cref="T:NKart.Core.Models.IProductVariant"/>
            </param>
            <param name="catalogInventory">
            The <see cref="T:NKart.Core.Models.ICatalogInventory"/> to be added
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.RemoveFromCatalogInventory(NKart.Core.Models.IProductVariant,NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Removes a product variant from a catalog inventory.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
            <param name="catalog">
            The catalog.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.RemoveFromCatalogInventory(NKart.Core.Models.IProductVariant,System.Guid)">
            <summary>
            Removes a product variant from a catalog inventory.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
            <param name="catalogKey">
            The catalog key
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.GetPossibleProductAttributeCombinations(NKart.Core.Models.IProduct)">
            <summary>
            The get possible product attribute combinations.
            </summary>
            <param name="product">
            The product.
            </param>
            <returns>
            The collection of product attribute collections.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCollection(NKart.Core.Models.IProduct,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The add to collection.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.AddToCollection(NKart.Core.Models.IProduct,System.Guid)">
            <summary>
            Adds a product to a static product collection.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.RemoveFromCollection(NKart.Core.Models.IProduct,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Removes a product from a collection.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.RemoveFromCollection(NKart.Core.Models.IProduct,System.Guid)">
            <summary>
            Removes a product from a collection.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>        
        </member>
        <member name="M:NKart.Core.Extensions.GetCollectionsContaining(NKart.Core.Models.IProduct,System.Boolean)">
            <summary>
            Returns static collections containing the product.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="isFilter">
            A flag to indicate whether this request is for standard or filter collections
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>
            This is internal so that people do not query for these entries in a big product list 
            which would be really excessive database calls.
            TODO need to decide how to cache these to provide that functionality
            </remarks>
        </member>
        <member name="M:NKart.Core.Extensions.ToProductAttributeCollection(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductAttribute})">
            <summary>
            Converts an enumeration of ProductAttributes to a ProductAttributeCollection
            </summary>
            <param name="attributes">
            The attributes.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductAttributeCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SerializeToXml(NKart.Core.Models.IProduct)">
            <summary>
            Serializes <see cref="T:NKart.Core.Models.IProduct"/> object's variants
            </summary>
            <param name="product">
            The product.
            </param>
            <remarks>
            Intended to be used by the Merchello.Examine.Providers.MerchelloProductIndexer
            </remarks>
            <returns>
            The <see cref="T:System.Xml.Linq.XDocument"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.SerializeToXml(NKart.Core.Models.IProductVariant,NKart.Core.Models.ProductOptionCollection,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Serializes a product variant for Examine indexing.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
            <param name="productOptionCollection">
            The product option collection.
            </param>
            <param name="collections">
            Static collections keys product belongs 
            </param>
            <returns>
            The <see cref="T:System.Xml.Linq.XDocument"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ToJsonProductOptions(NKart.Core.Models.ProductOptionCollection)">
            <summary>
            Converts the product options collections to JSON.
            </summary>
            <param name="productOptionCollection">
            The product option collection.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetProductOptionsJson(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductOption})">
            <summary>
            Gets product options JSON.
            </summary>
            <param name="productOptions">
            The product options.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetDetachedContentsJson(System.Collections.Generic.IEnumerable{NKart.Core.Models.DetachedContent.IProductVariantDetachedContent})">
            <summary>
            Gets detached detachedContentCollection JSON.
            </summary>
            <param name="detachedContentCollection">
            The detachedContentCollection.
            </param>
            <returns>
            The JSON string.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetCatalogInventoriesJson(NKart.Core.Models.IProductVariant)">
            <summary>
            Gets the catalog inventories JSON.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetAttributesJson(NKart.Core.Models.IProductVariant)">
            <summary>
            Gets the attributes JSON.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AddChoice(NKart.Core.Models.IProductOption,System.String,System.String)">
            <summary>
            Adds a new option choice.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
        </member>
        <member name="M:NKart.Core.Extensions.ToShipProvinceCollection(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProvince})">
            <summary>
            Converts a collection of <see cref="T:NKart.Core.Models.IProvince"/> to a new collection of <see cref="T:NKart.Core.Models.Interfaces.IShipProvince"/>
            </summary>
            <param name="provinces">A collection of <see cref="T:NKart.Core.Models.IProvince"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.Interfaces.IShipProvince"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.ToTaxProvinceCollection(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProvince})">
            <summary>
            Converts a collection of <see cref="T:NKart.Core.Models.IProvince"/> to a new collection of <see cref="T:NKart.Core.Models.ITaxProvince"/>
            </summary>
            <param name="provinces">A collection of <see cref="T:NKart.Core.Models.IProvince"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.ITaxProvince"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetValidatedShipCountry(NKart.Core.Models.IShipment,NKart.Core.Services.IGatewayProviderService)">
            <summary>
            Utility extension to return a validated <see cref="T:NKart.Core.Models.IShipCountry"/> from a shipment.
            
            For inventory and ship method selection purposes, <see cref="T:NKart.Core.Models.IShipment"/>s must be mapped to a single WarehouseCatalog (otherwise it should have been split into multiple shipments).
            
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/></param>
            <param name="gatewayProviderService">The <see cref="T:NKart.Core.Services.IGatewayProviderService"/></param>
            <returns>An <see cref="T:Umbraco.Core.Attempt`1"/> where success result is the matching <see cref="T:NKart.Core.Models.IShipCountry"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetOriginAddress(NKart.Core.Models.IShipment)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IAddress"/> representing the origin address of the <see cref="T:NKart.Core.Models.IShipment"/>
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/></param>
            <returns>Returns a <see cref="T:NKart.Core.Models.IAddress"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetDestinationAddress(NKart.Core.Models.IShipment)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IAddress"/> representing the destination address of the <see cref="T:NKart.Core.Models.IShipment"/>
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/></param>
            <returns>Returns a <see cref="T:NKart.Core.Models.IAddress"/></returns>        
        </member>
        <member name="M:NKart.Core.Extensions.ShipmentRateQuotes(NKart.Core.Models.IShipment,System.Boolean)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> from the various configured shipping providers
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/></param>
            <param name="tryGetCached">
            If set true the strategy will try to get a quote from cache
            </param>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/></returns>
        </member>
        <member name="M:NKart.Core.Extensions.ShipmentRateQuoteByShipMethod(NKart.Core.Models.IShipment,System.String,System.Boolean)">
            <summary>
            Returns a <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for a <see cref="T:NKart.Core.Models.IShipment"/> given the 'unique' key of the <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/></param>
            <param name="shipMethodKey">The GUID key as a string of the <see cref="T:NKart.Core.Models.IShipMethod"/></param>
            <param name="tryGetCached">If set true the value is first attempted to be retrieved from cache</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for the shipment by the specific <see cref="T:NKart.Core.Models.IShipMethod"/> specified</returns>
        </member>
        <member name="M:NKart.Core.Extensions.ShipmentRateQuoteByShipMethod(NKart.Core.Models.IShipment,System.Guid,System.Boolean)">
            <summary>
            Returns a <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for a <see cref="T:NKart.Core.Models.IShipment"/> given the 'unique' key of the <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/></param>
            <param name="shipMethodKey">The GUID key of the <see cref="T:NKart.Core.Models.IShipMethod"/></param>
            <param name="tryGetCached">If set true the value is first attempted to be retrieved from cache</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for the shipment by the specific <see cref="T:NKart.Core.Models.IShipMethod"/> specified</returns>
        </member>
        <member name="M:NKart.Core.Extensions.Orders(NKart.Core.Models.IShipment)">
            <summary>
            Gets the collection of <see cref="T:NKart.Core.Models.IOrder"/> for the <see cref="T:NKart.Core.Models.IShipment"/>.
            </summary>
            <param name="shipment">
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Invoices(NKart.Core.Models.IShipment)">
            <summary>
            The collection of <see cref="T:NKart.Core.Models.IInvoice"/> associated with the <see cref="T:NKart.Core.Models.IShipment"/>.
            </summary>
            <param name="shipment">
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Orders(NKart.Core.Models.IShipment,NKart.Core.IMerchelloContext)">
            <summary>
            Gets the collection of <see cref="T:NKart.Core.Models.IOrder"/> for the <see cref="T:NKart.Core.Models.IShipment"/>.
            </summary>
            <param name="shipment">
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </param>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Invoices(NKart.Core.Models.IShipment,NKart.Core.IMerchelloContext)">
            <summary>
            The collection of <see cref="T:NKart.Core.Models.IInvoice"/> associated with the <see cref="T:NKart.Core.Models.IShipment"/>.
            </summary>
            <param name="shipment">
            The <see cref="T:NKart.Core.Models.IShipment"/>
            </param>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ShipmentLineItemName(NKart.Core.Gateways.Shipping.IShipmentRateQuote)">
            <summary>
            Returns a string intended to be used as a 'Shipment Line Item' title or name
            </summary>
            <param name="shipmentRateQuote">
            The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> used to quote the line item
            </param>
            <returns>
            The shipment line item name
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ShipmentRateQuotes(NKart.Core.Models.IShipment,NKart.Core.IMerchelloContext,System.Boolean)">
            <summary>
            The shipment rate quotes.
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="tryGetCached">
            If set true the strategy will try to get a quote from cache
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ShipmentRateQuoteByShipMethod(NKart.Core.Models.IShipment,NKart.Core.IMerchelloContext,System.Guid,System.Boolean)">
            <summary>
            Returns a <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for a <see cref="T:NKart.Core.Models.IShipment"/> given the 'unique' key of the <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/></param>
            <param name="merchelloContext">The <see cref="T:NKart.Core.IMerchelloContext"/></param>
            <param name="shipMethodKey">The GUID key of the <see cref="T:NKart.Core.Models.IShipMethod"/></param>
            <param name="tryGetCached">If set true the value is first attempted to be retrieved from cache</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for the shipment by the specific <see cref="T:NKart.Core.Models.IShipMethod"/> specified</returns>
        </member>
        <member name="M:NKart.Core.Extensions.ReplaceablePatterns(NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/> for the shipment result notify model
            </summary>
            <param name="notifyModel">
            The <see cref="T:NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel"/>.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ReplaceablePatterns(NKart.Core.Models.IShipment,System.String)">
            <summary>
            Adds shipment replaceable patters.
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="currencySymbol">
            The currency Symbol.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ReplaceablePatterns(NKart.Core.Models.IShipMethod)">
            <summary>
            Replaces shipmethod values.
            </summary>
            <param name="shipMethod">
            The ship method.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Clone(NKart.Core.Models.IShipment)">
            <summary>
            Clones a shipment
            </summary>
            <param name="org">
            The org.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
            <remarks>
            http://issues.merchello.com/youtrack/issue/M-458
            </remarks>
        </member>
        <member name="M:NKart.Core.Extensions.AsAddress(NKart.Core.Models.IWarehouse)">
            <summary>
            Returns a Warehouse address as an <see cref="T:NKart.Core.Models.IAddress"/>
            </summary>
            <param name="warehouse">
            The warehouse.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.DefaultCatalog(NKart.Core.Models.IWarehouse)">
            <summary>
            Helper extension that returns the first <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> for the warehouse
            </summary>
            <param name="warehouse">
            The warehouse.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.TriggerFor(NKart.Core.Observation.ITrigger)">
            <summary>
            Gets the <see cref="T:NKart.Core.Observation.TriggerForAttribute"/>
            </summary>
            <param name="trigger">
            The trigger.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Observation.TriggerForAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.MonitorFor(NKart.Core.Observation.IMonitor)">
            <summary>
            Gets the <see cref="T:NKart.Core.Observation.MonitorForAttribute"/>
            </summary>
            <param name="monitor">
            The monitor.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Observation.MonitorForAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetOfferComponentAttribute(NKart.Core.Marketing.Offer.OfferComponentBase)">
            <summary>
            Wrapper to retrieve the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentAttribute"/>.
            </summary>
            <param name="component">
            The component.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Marketing.Offer.OfferComponentAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsOfferComponentConfiguration(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            Maps the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentDefinition"/> to a <see cref="T:NKart.Core.Marketing.Offer.OfferComponentConfiguration"/> so 
            that it can be serialized and saved to the database as JSON more easily.
            </summary>
            <param name="definition">
            The definition.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Marketing.Offer.OfferComponentConfiguration"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AsPagedCollection``2(Umbraco.Core.Persistence.Page{``0},System.Func{``0,``1},System.String)">
            <summary>
            Maps a <see cref="T:Umbraco.Core.Persistence.Page`1"/> to <see cref="T:NKart.Core.PagedCollection`1"/>.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="mapper">
            The mapper.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <typeparam name="TDto">
            The originating DTO
            </typeparam>
            <typeparam name="TItem">
            The result item
            </typeparam>
            <returns>
            The <see cref="T:NKart.Core.PagedCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveDetachedValueOverriders(Umbraco.Core.PluginManager)">
            <summary>
            Resolves the <see cref="T:NKart.Core.ValueConverters.ValueCorrections.DetachedValueCorrectionBase"/>.
            </summary>
            <param name="pluginManager">
            The plugin manager.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.ValueConverters.ValueCorrections.IDetachedValueCorrection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveGatewayProviders(Umbraco.Core.PluginManager)">
            <summary>
            Returns all available GatewayProvider
            </summary>
            <param name="pluginManager">
            The plugin Manager.
            </param>
            <returns>
            The collection of gateway providers resolved
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveObserverMonitors(Umbraco.Core.PluginManager)">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Observation.IMonitor"/> types decorated with the <see cref="T:NKart.Core.Observation.MonitorForAttribute"/>
            </summary>
            <param name="pluginManager">
            The plugin Manager.
            </param>
            <returns>
            The collection of monitor types resolved
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveObservableTriggers(Umbraco.Core.PluginManager)">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Observation.ITrigger"/> types decorated with the <see cref="T:NKart.Core.Observation.TriggerForAttribute"/>
            </summary>
            <param name="pluginManager">
            The plugin Manager.
            </param>
            <returns>
            The collection of trigger types resolved
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveOfferConstraintChains(Umbraco.Core.PluginManager)">
            <summary>
            The resolve offer constraint chains.
            </summary>
            <param name="pluginManager">
            The plugin manager.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Chains.OfferConstraints.IOfferProcessor"/> types
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveEnityCollectionProviders(Umbraco.Core.PluginManager)">
            <summary>
            The resolve entity collection providers.
            </summary>
            <param name="pluginManager">
            The plugin manager.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.ResolveMerchelloMigrations(Umbraco.Core.PluginManager)">
            <summary>
            Resolves Merchello specific migrations.
            </summary>
            <param name="pluginManager">
            The plugin manager.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Populate``1(NKart.Core.Trees.TreeNode{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Populates the tree from flattened data.
            </summary>
            <param name="tree">
            The tree.
            </param>
            <param name="data">
            The data.
            </param>
            <typeparam name="TNode">
            The type of the object to be represented as a tree node
            </typeparam>
            <returns>
            The <see cref="T:NKart.Core.Trees.TreeNode`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Siblings``1(NKart.Core.Trees.TreeNode{``0},System.Linq.Expressions.Expression{System.Func{NKart.Core.Trees.TreeNode{``0},System.Boolean}})">
            <summary>
            Gets the siblings of a node.
            </summary>
            <param name="tree">
                The tree.
            </param>
            <param name="predicate">
            An optional lambda expression
            </param>
            <typeparam name="TNode">
            The type of the tree node value
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.AncestorsOrSelf``1(NKart.Core.Trees.TreeNode{``0},System.Linq.Expressions.Expression{System.Func{NKart.Core.Trees.TreeNode{``0},System.Boolean}})">
            <summary>
            Gets the ancestors of a node including itself.
            </summary>
            <param name="tree">
            The tree.
            </param>
            <param name="predicate">
            The predicate.
            </param>
            <typeparam name="TNode">
            The type of the tree node value
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Ancestors``1(NKart.Core.Trees.TreeNode{``0},System.Linq.Expressions.Expression{System.Func{NKart.Core.Trees.TreeNode{``0},System.Boolean}})">
            <summary>
            Gets the ancestors of a node including itself.
            </summary>
            <param name="tree">
            The tree.
            </param>
            <param name="predicate">
            An optional lambda expression.
            </param>
            <typeparam name="TNode">
            The type of the tree node value
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.DescendantsOrSelf``1(NKart.Core.Trees.TreeNode{``0},System.Linq.Expressions.Expression{System.Func{NKart.Core.Trees.TreeNode{``0},System.Boolean}})">
            <summary>
            Gets the descendants of a node.
            </summary>
            <param name="tree">
            The tree.
            </param>
            <param name="predicate">
            The predicate.
            </param>
            <typeparam name="TNode">
            The type of the tree node value
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.Descendants``1(NKart.Core.Trees.TreeNode{``0},System.Linq.Expressions.Expression{System.Func{NKart.Core.Trees.TreeNode{``0},System.Boolean}})">
            <summary>
            Gets the descendants of a node.
            </summary>
            <param name="tree">
            The tree.
            </param>
            <param name="predicate">
            The predicate.
            </param>
            <typeparam name="TNode">
            The type of the tree node value
            </typeparam>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.FirstByValue``1(NKart.Core.Trees.TreeNode{``0},``0)">
            <summary>
            Finds the first node with a matching key value.
            </summary>
            <param name="tree">
            The tree.
            </param>
            <param name="value">
            The value.
            </param>
            <typeparam name="TNode">
            The type of the tree node value
            </typeparam>
            <returns>
            The <see cref="T:NKart.Core.Trees.TreeNode`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Extensions.GetVersion(Semver.SemVersion,System.Int32)">
            <summary>
            Gets <see cref="T:System.Version"/> from <see cref="T:Semver.SemVersion"/>.
            </summary>
            <param name="semVersion">
            The semantic version.
            </param>
            <param name="maxParts">
            The max parts.
            </param>
            <returns>
            The <see cref="T:System.Version"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Logging.IRemoteLogger">
            <summary>
            Defines a remote logging provider.
            </summary>
            <remarks>
            Allows for developers to wire in external logging services
            This is designated as a service due to legacy reasons.
            </remarks>
        </member>
        <member name="P:NKart.Core.Logging.IRemoteLogger.IsReady">
            <summary>
            Gets a value indicating whether the provider is ready.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.IRemoteLogger.Error(System.Type,System.String,System.Exception)">
            <summary>
            Logs an error with format items.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IRemoteLogger.Warn(System.Type,System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IRemoteLogger.WarnWithException(System.Type,System.String,System.Exception)">
            <summary>
            Logs a warning with an exception.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IRemoteLogger.Info(System.Type,System.String)">
            <summary>
            Logs an informative message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IRemoteLogger.Debug(System.Type,System.String)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="T:NKart.Core.Logging.ExtendedLoggerData">
            <summary>
            Represents extra logger data that can be passed to remote loggers.
            </summary>
        </member>
        <member name="F:NKart.Core.Logging.ExtendedLoggerData._categories">
            <summary>
            The categories.
            </summary>
        </member>
        <member name="F:NKart.Core.Logging.ExtendedLoggerData._logData">
            <summary>
            An internal collection to store extra log data.
            </summary>
        </member>
        <member name="F:NKart.Core.Logging.ExtendedLoggerData._logger">
            <summary>
            A reference to the Umbraco logger.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.ExtendedLoggerData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Logging.ExtendedLoggerData"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.ExtendedLoggerData.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Logging.ExtendedLoggerData"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="P:NKart.Core.Logging.ExtendedLoggerData.Categories">
            <summary>
            Gets the categories.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.ExtendedLoggerData.AddCategory(System.String)">
            <summary>
            The add category.
            </summary>
            <param name="category">
            The category.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.ExtendedLoggerData.AddCategoryRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The add category range.
            </summary>
            <param name="categories">
            The categories.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.ExtendedLoggerData.HasValue(System.String)">
            <summary>
            Returns a value indicating whether the dictionary contains a value for the alias.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            A value indicating whether or not the dictionary contains a value.
            </returns>
        </member>
        <member name="M:NKart.Core.Logging.ExtendedLoggerData.GetValue(System.String)">
            <summary>
            Gets a value from an internal collection.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Logging.ExtendedLoggerData.GetValue``1(System.String)">
            <summary>
            Gets a value from an internal collection as a typed object.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <typeparam name="T">
            The type of object to return
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Logging.ExtendedLoggerData.SetValue(System.String,System.String)">
            <summary>
            Sets a string value.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.ExtendedLoggerData.SetValue``1(System.String,``0)">
            <summary>
            Sets an object value.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <param name="value">
            The value.
            </param>
            <typeparam name="T">
            The type of object to be stored
            </typeparam>
        </member>
        <member name="T:NKart.Core.Logging.IExtendedLoggerData">
            <summary>
            Defines additional data that can be passed to remote loggers.
            </summary>
        </member>
        <member name="P:NKart.Core.Logging.IExtendedLoggerData.Categories">
            <summary>
            Gets the categories.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerData.AddCategory(System.String)">
            <summary>
            Adds a category.
            </summary>
            <param name="category">
            The category.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerData.AddCategoryRange(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a range of categories.
            </summary>
            <param name="categories">
            The categories.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerData.HasValue(System.String)">
            <summary>
            Returns a value indicating whether the dictionary contains a value for the alias.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            A value indicating whether or not the dictionary contains a value.
            </returns>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerData.GetValue(System.String)">
            <summary>
            Gets a value from an internal collection.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerData.GetValue``1(System.String)">
            <summary>
            Gets a value from an internal collection as a typed object.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <typeparam name="T">
            The type of object to return
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerData.SetValue(System.String,System.String)">
            <summary>
            Sets a string value.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerData.SetValue``1(System.String,``0)">
            <summary>
            Sets an object value.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <param name="value">
            The value.
            </param>
            <typeparam name="T">
            The type of object to be stored
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerDataLogger.Error(System.Type,System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            The error.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            Additional logger data
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerDataLogger.Warn(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a warning .
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerDataLogger.WarnWithException(System.Type,System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a warning with an exception.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerDataLogger.Info(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an informative message with extra logging data.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.IExtendedLoggerDataLogger.Debug(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a debug message with extra logging data.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="T:NKart.Core.Logging.IMultiLogger">
            <summary>
            Marker interface for the a MultiLogger.
            </summary>
        </member>
        <member name="P:NKart.Core.Logging.IMultiLogger.UmbracoLogger">
            <summary>
            Gets the Umbraco <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Logging.IMultiLogger.RemoteLogger">
            <summary>
            Gets the remote logger.
            </summary>
        </member>
        <member name="T:NKart.Core.Logging.RemoteLoggerBase">
            <summary>
            A base class for LoggerProviders.
            </summary>
        </member>
        <member name="P:NKart.Core.Logging.RemoteLoggerBase.IsReady">
            <summary>
            Gets a value indicating whether is ready.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.Error(System.Type,System.String,System.Exception)">
            <summary>
            Logs an error.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.Warn(System.Type,System.String)">
            <summary>
            Logs a warning.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.WarnWithException(System.Type,System.String,System.Exception)">
            <summary>
            Logs a warning with an exception.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.Info(System.Type,System.String)">
            <summary>
            Logs an informative message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.Debug(System.Type,System.String)">
            <summary>
            Logs debug information.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.Error(System.Type,System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an exception.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.Warn(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a warning.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.WarnWithException(System.Type,System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a warning with an exception.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.Info(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an informative message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.RemoteLoggerBase.Debug(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs debug information.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="T:NKart.Core.Logging.MultiLogger">
            <summary>
            A logger capable of logging to multiple sources.
            </summary>
            <remarks>
            This is a wrapper for Umbraco's ILogger
            </remarks>
        </member>
        <member name="F:NKart.Core.Logging.MultiLogger._umbracoLogger">
            <summary>
            The <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Logging.MultiLogger._remoteLogger">
            <summary>
            The <see cref="T:NKart.Core.Logging.IRemoteLogger"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Logging.MultiLogger._hasRemoteLogger">
            <summary>
            A value indicating whether or not a remote logger is configured.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Logging.MultiLogger"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Logging.MultiLogger"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.#ctor(Umbraco.Core.Logging.ILogger,NKart.Core.Logging.IRemoteLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Logging.MultiLogger"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="remoteRemoteLogger">
            The remote logger.
            </param>
        </member>
        <member name="P:NKart.Core.Logging.MultiLogger.UmbracoLogger">
            <summary>
            Gets the Umbraco <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Logging.MultiLogger.RemoteLogger">
            <summary>
            Gets the <see cref="T:NKart.Core.Logging.IRemoteLogger"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Logging.MultiLogger.IsReady">
            <summary>
            Gets a value indicating whether is ready.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Error(System.Type,System.String,System.Exception)">
            <summary>
            Logs an error.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Warn(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Logs a warning.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="formatItems">
            The format items.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.WarnWithException(System.Type,System.String,System.Exception,System.Func{System.Object}[])">
            <summary>
            Logs a warning with an exception.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="e">
            The e.
            </param>
            <param name="formatItems">
            The format items.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Info(System.Type,System.Func{System.String})">
            <summary>
            Logs a message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="generateMessage">
            The generate message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Info(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Logs a message.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="generateMessageFormat">
            The generate message format.
            </param>
            <param name="formatItems">
            The format items.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Debug(System.Type,System.Func{System.String})">
            <summary>
            Logs debug information.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="generateMessage">
            The generate message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Debug(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Logs debug information.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="generateMessageFormat">
            The generate message format.
            </param>
            <param name="formatItems">
            The format items.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Error(System.Type,System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an error with extra log data.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Warn(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a warning with extra log data.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.WarnWithException(System.Type,System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Warns with an exception.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Info(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an informative message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.Debug(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an informative message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogger.GetBaseLoggingData">
            <summary>
            The get base logging data.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Logging.IExtendedLoggerData"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Logging.MultiLogHelper">
            <summary>
            The multi log helper.
            </summary>
        </member>
        <member name="P:NKart.Core.Logging.MultiLogHelper.UmbracoLogger">
            <summary>
            Gets the Umbraco <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Logging.MultiLogHelper.RemoteLogger">
            <summary>
            Gets the remote logger.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Error``1(System.String,System.Exception)">
            <summary>
            Logs and error.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Error(System.Type,System.String,System.Exception)">
            <summary>
            Logs and error.
            </summary>
            <param name="callingType">
            The calling Type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Warn``1(System.String,System.Func{System.Object}[])">
            <summary>
            Logs a warning
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="formatItems">
            The format items.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Warn(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Logs a warning
            </summary>
            <param name="callingType">
            The calling Type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="formatItems">
            The format items.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.WarnWithException``1(System.String,System.Exception,System.Func{System.Object}[])">
            <summary>
            Logs a warning with an exception.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="e">
            The e.
            </param>
            <param name="formatItems">
            The format items.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.WarnWithException(System.Type,System.String,System.Exception,System.Func{System.Object}[])">
            <summary>
            Logs a warning with an exception.
            </summary>
            <param name="callingType">
            The calling Type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="e">
            The exception.
            </param>
            <param name="formatItems">
            The format items.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Info``1(System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="message">
            The message.
            </param>
            <typeparam name="T">
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Info(System.Type,System.String)">
            <summary>
            Logs a message
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Info``1(System.Func{System.String})">
            <summary>
            Logs an informative message.
            </summary>
            <param name="generateMessage">
            The generate message.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Info(System.Type,System.Func{System.String})">
            <summary>
            Logs an informative message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="generateMessage">
            The generate message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Info(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Logs an informative message.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="generateMessageFormat">
            The generate message format.
            </param>
            <param name="formatItems">
            The format items.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Debug``1(System.Func{System.String})">
            <summary>
            Logs a debug message.
            </summary>
            <param name="generateMessage">
            The generate message.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Debug(System.Type,System.Func{System.String})">
            <summary>
            Logs a debug message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="generateMessage">
            The generate message.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Debug``1(System.String,System.Func{System.Object}[])">
            <summary>
            Logs a debug message.
            </summary>
            <param name="generateMessageFormat">
            The generate message format.
            </param>
            <param name="formatItems">
            The format items.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Debug(System.Type,System.String,System.Func{System.Object}[])">
            <summary>
            Logs a debug message.
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="generateMessageFormat">
            The generate message format.
            </param>
            <param name="formatItems">
            The format items.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Error``1(System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an error.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Error(System.Type,System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an error.
            </summary>
            <param name="callingType">
            The calling Type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Warn``1(System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a warning
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Warn(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a warning.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.WarnWithException``1(System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a warning with an exception.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.WarnWithException(System.Type,System.String,System.Exception,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a warning with an exception.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="exception">
            The exception.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Info``1(System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an informative message
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
            <typeparam name="T">
            The calling type
            </typeparam>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Info(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs an informative message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Debug``1(System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a debug message.
            </summary>
            <typeparam name="T">
            The calling type
            </typeparam>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogHelper.Debug(System.Type,System.String,NKart.Core.Logging.IExtendedLoggerData)">
            <summary>
            Logs a debug message.
            </summary>
            <param name="callingType">
            The calling type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="loggerData">
            The logger data.
            </param>
        </member>
        <member name="T:NKart.Core.Logging.MultiLogResolver">
            <summary>
            The multi logger resolver.
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogResolver.#ctor(NKart.Core.Logging.IMultiLogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Logging.MultiLogResolver"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="P:NKart.Core.Logging.MultiLogResolver.Logger">
            <summary>
            Gets the current logger
            </summary>
        </member>
        <member name="M:NKart.Core.Logging.MultiLogResolver.SetLogger(NKart.Core.Logging.IMultiLogger)">
            <summary>
            Method allowing to change the logger during startup
            </summary>
            <param name="logger">
            The <see cref="T:NKart.Core.Logging.IMultiLogger"/>
            </param>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.DetachedContentValuesSerializationHelper">
            <summary>
            Represents a serialization helper to ensure consistency in serialization and deserialization of detached
            content values.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedContentValuesSerializationHelper.Deserialize(System.String)">
            <summary>
            Deserializes JSON stored in database fields.
            </summary>
            <param name="json">
            The JSON value stored in the database field.
            </param>
            <returns>
            The collection of key value pairs to be used in an object instance.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedContentValuesSerializationHelper.Serialize(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Serializes values to JSON to be persisted in the database.
            </summary>
            <param name="values">
            The values.
            </param>
            <returns>
            The JSON <see cref="T:System.String"/>.
            </returns>>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.DetachedContentCollection`1">
            <summary>
            The detached content collection.
            </summary>
            <typeparam name="T">
            The type of detached content
            </typeparam>
            <remarks>
            This collection assumes that all content will be for the same entity and thus uses
            the culture name as the key.
            </remarks>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentCollection`1._addLocker">
            <summary>
            The add locker.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.DetachedContentCollection`1.IsEmpty">
            <summary>
            Gets a value indicating whether or not the current collection is empty
            </summary>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedContentCollection`1.IndexOfKey(System.String)">
            <summary>
            Gets the index of the key in the current collection.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The index of the key in the collection or -1 if not found.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedContentCollection`1.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="!:T"/> whose culture name matches the culture name.
            </summary>
            <param name="cultureName">The culture name</param>
            <returns><c>true</c> if the collection contains the specified culture name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedContentCollection`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of <see cref="!:T"/> to the collection.
            </summary>
            <param name="items">
            The items.
            </param>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedContentCollection`1.Accept(NKart.Core.Models.Interfaces.IVisitor{`0})">
            <summary>
            Allows visitor to visit each item in the collection
            </summary>
            <param name="visitor">A <see cref="T:NKart.Core.Models.Interfaces.IVisitor`1"/></param>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedContentCollection`1.Add(`0)">
            <summary>
            The add.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedContentCollection`1.GetKeyForItem(`0)">
            <summary>
            Gets the property that is used as the key for this collection.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The key for the collection.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.DetachedContentType">
            <summary>
            The detached content type.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentType._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentType._entityTfKey">
            <summary>
            The entity type field key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentType._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentType._description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentType._contentTypeKey">
            <summary>
            The content type id.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedContentType.#ctor(System.Guid,System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.DetachedContent.DetachedContentType"/> class.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="contentTypeKey">
            The content Type Key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.DetachedContentType.EntityTfKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.DetachedContentType.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.DetachedContentType.Description">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.DetachedContentType.ContentTypeKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.DetachedContentType.EntityType">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.DetachedContentType.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentType.PropertySelectors.EntityTfKeySelector">
            <summary>
            The entity type field key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentType.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentType.PropertySelectors.DescriptionSelector">
            <summary>
            The description selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.DetachedContentType.PropertySelectors.ContentTypeKeySelector">
            <summary>
            The content type id selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection">
            <summary>
            The detached data values collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection"/> class.
            </summary>
            <param name="keyValues">
            The key values.
            </param>
        </member>
        <member name="E:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection.CollectionChanged">
            <summary>
            The collection changed.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection.SetValue(System.String,System.String)">
            <summary>
            Sets a detached data value.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection.RemoveValue(System.String)">
            <summary>
            Removes a value from extended data.
            </summary>
            <param name="key">
            The key.
            </param>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection.GetValue(System.String)">
            <summary>
            Gets a value from the collection.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The on collection changed.
            </summary>
            <param name="args">
            The args.
            </param>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.DetachedDataValuesCollection.Load(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            The load.
            </summary>
            <param name="keyValues">
            The key values.
            </param>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.IDetachedContent">
            <summary>
            Defines DetachedContent.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IDetachedContent.DetachedContentType">
            <summary>
            Gets the detached content type.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IDetachedContent.CultureName">
            <summary>
            Gets the culture name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IDetachedContent.DetachedDataValues">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.IDetachedContentType">
            <summary>
            Represents detached content.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IDetachedContentType.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IDetachedContentType.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IDetachedContentType.ContentTypeKey">
            <summary>
            Gets or sets the content type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IDetachedContentType.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.IProductVariantDetachedContent">
            <summary>
            Represents product variant detached content.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IProductVariantDetachedContent.ProductVariantKey">
            <summary>
            Gets the product variant key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IProductVariantDetachedContent.TemplateId">
            <summary>
            Gets or sets the template id.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IProductVariantDetachedContent.Slug">
            <summary>
            Gets or sets the slug.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.IProductVariantDetachedContent.CanBeRendered">
            <summary>
            Gets or sets a value indicating whether virtual content can be rendered.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent">
            <inheritdoc/>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent._templateId">
            <summary>
            The template id.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent._slug">
            <summary>
            The slug.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent._canBeRendered">
            <summary>
            A value indicating whether or not we should all the virtual content to render.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.#ctor(System.Guid,NKart.Core.Models.DetachedContent.IDetachedContentType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent"/> class.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <param name="detachedContentType">
            The detached content type.
            </param>
            <param name="cultureName">
            The culture name.
            </param>
        </member>
        <member name="M:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.#ctor(System.Guid,NKart.Core.Models.DetachedContent.IDetachedContentType,System.String,NKart.Core.Models.DetachedContent.DetachedDataValuesCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent"/> class.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <param name="detachedContentType">
            The detached content type.
            </param>
            <param name="cultureName">
            The culture name.
            </param>
            <param name="detachedDataValuesCollection">
            The detached data values collection.
            </param>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.DetachedContentType">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.CultureName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.DetachedDataValues">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.ProductVariantKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.TemplateId">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.Slug">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.CanBeRendered">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.PropertySelectors.TemplateIdSelector">
            <summary>
            The template id selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.PropertySelectors.SlugSelector">
            <summary>
            The slug selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DetachedContent.ProductVariantDetachedContent.PropertySelectors.CanBeRenderedSelector">
            <summary>
            The can be rendered selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.IDateStamped">
            <summary>
            Represents an entity that is date stamped.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.IDateStamped.CreateDate">
            <summary>
            Gets or sets the Created Date
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.IDateStamped.UpdateDate">
            <summary>
            Gets or sets the Modified Date
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.DeployableEntity">
            <summary>
            Represents a deployable entity.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.DeployableEntity.SetKeyForDeploymentCreate(System.Guid)">
            <summary>
            Allows a key to be set when creating an entity given that GUIDs should match between environments
            </summary>
            <param name="key">
            The key.
            </param>
            <remarks>
            You need to be careful that this is only called when you are certain that an entity with the given key
            does not already exist in the target environment or there will be a constraint violation.
            </remarks>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.IHasKeyId">
            <summary>
            Indicates class has a Key (GUID) based Id.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.IHasKeyId.Key">
            <summary>
            Gets or sets the GUID based Id
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.IVersionTaggedEntity">
            <summary>
            Represents an entity that can be "tagged" with a versioning GUID
            </summary>
            <remarks>
            
            Used in the order fulfillment process to track the validity of a Checkout, Shipment rate quotes, etc.
            
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.IVersionTaggedEntity.VersionKey">
            <summary>
            Gets or sets the version key.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.VersionTaggedEntity">
            <summary>
            Represents an entity that is marked with a version GUID.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.VersionTaggedEntity._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.VersionTaggedEntity._versionKey">
            <summary>
            The version key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.VersionTaggedEntity.VersionKey">
            <summary>
            Gets or sets the version key.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.VersionTaggedEntity.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.VersionTaggedEntity.PropertySelectors.VersionKeySelector">
            <summary>
            The version key selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.Entity">
            <summary>
            Defines a Merchello entity.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity._propertyChangedInfo">
            <summary>
            Tracks the properties that have changed
            </summary>        
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity._key">
            <summary>
            The entity key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity._hasIdentity">
            <summary>
            A value that indicates whether or not this entity has an identity.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity._wasCancelled">
            <summary>
            A value that indicates a CRUD operation was cancelled.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity._createDate">
            <summary>
            The create date.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity._updateDate">
            <summary>
            The update date.
            </summary>
        </member>
        <member name="E:NKart.Core.Models.EntityBase.Entity.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.Entity.CreateDate">
            <summary>
            Gets or sets the Created Date
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.Entity.UpdateDate">
            <summary>
            Gets or sets the Modified Date
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.Entity.HasIdentity">
            <summary>
            Gets or sets a value indicating whether or not the current entity has an identity
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.Entity.Key">
            <summary>
            Gets or sets the GUID based Id
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.Entity.WasCancelled">
            <summary>
            Gets or sets a value indicating whether the WasCancelled flag has been set, which is used to track
            whether some action against an entity was cancelled through some event.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.Entity.IsDirty">
            <summary>
            Indicates whether the current entity is dirty.
            </summary>
            <returns>True if entity is dirty, otherwise False</returns>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.Entity.IsPropertyDirty(System.String)">
            <summary>
            Indicates whether a specific property on the current entity is dirty.
            </summary>
            <param name="propertyName">Name of the property to check</param>
            <returns>True if Property is dirty, otherwise False</returns>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.Entity.ResetDirtyProperties">
            <summary>
            Resets dirty properties by clearing the dictionary used to track changes.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.Entity.ResetHasIdentity(System.Boolean)">
            <summary>
            Special case override of default HasIdentity behavior when we want developers to be able to define their own "Keys" rather than
            allow the system to generate them.
            </summary>
            <param name="value">
            The value.
            </param>
            <remarks>
            
            GatewayProvider users this
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.Entity.AddingEntity">
            <summary>
            Method to call on entity saved when first added
            </summary>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.Entity.UpdatingEntity">
            <summary>
            Method to call on entity saved/updated
            </summary>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.Entity.SetPropertyValueAndDetectChanges``1(``0,``0@,System.Reflection.PropertyInfo)">
            <summary>
            Used by inheritors to set the value of properties, this will detect if the property value actually changed and if it did
            it will ensure that the property has a dirty flag set.
            </summary>
            <typeparam name="T">
            The type of the property
            </typeparam>
            <param name="newVal">
            The new value
            </param>
            <param name="origVal">
            The original value
            </param>
            <param name="propertySelector">
            The property selector
            </param>
            <remarks>
            This is required because we don't want a property to show up as "dirty" if the value is the same. For example, when we
            save a document type, nearly all properties are flagged as dirty just because we've 'reset' them, but they are all set
            to the same value, so it's really not dirty.
            </remarks>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.Entity.SetPropertyValueAndDetectChanges``1(``0,``0@,System.Reflection.PropertyInfo,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            The set property value and detect changes.
            </summary>
            <param name="newVal">
            The new value.
            </param>
            <param name="origVal">
            The original value.
            </param>
            <param name="propertySelector">
            The property selector.
            </param>
            <param name="comparer">
            The equality comparer.
            </param>
            <typeparam name="T">
            The type of the property
            </typeparam>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.Entity.OnPropertyChanged(System.Reflection.PropertyInfo)">
            <summary>
            Method to call on a property setter.
            </summary>
            <param name="propertyInfo">The property info.</param>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.Entity.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity.PropertySelectors.KeySelector">
            <summary>
            The key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity.PropertySelectors.WasCancelledSelector">
            <summary>
            The was cancelled selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity.PropertySelectors.CreateDateSelector">
            <summary>
            The create date selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity.PropertySelectors.UpdateDateSelector">
            <summary>
            The update date selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityBase.Entity.PropertySelectors.HasIdentitySelector">
            <summary>
            The has identity selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.IEntity">
            <summary>
            Defines an Entity.
            Entities should always have an Id, Created and Modified date
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.IEntity.Key">
            <summary>
            Gets or sets the GUID based Id
            </summary>
        </member>
        <member name="P:NKart.Core.Models.EntityBase.IEntity.HasIdentity">
            <summary>
            Gets a value indicating whether the current entity has an identity, e.g. Id.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityBase.ITracksDirty">
            <summary>
            An interface that defines the object is tracking property changes and if it is Dirty
            </summary>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.ITracksDirty.IsDirty">
            <summary>
            The is dirty.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.ITracksDirty.IsPropertyDirty(System.String)">
            <summary>
            The is property dirty.
            </summary>
            <param name="propertyName">
            The property name.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.EntityBase.ITracksDirty.ResetDirtyProperties">
            <summary>
            The reset dirty properties.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IDeepCloneable">
            <summary>
            Represents an entity that can be deep cloned.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.IDeepCloneable.DeepClone">
            <summary>
            Deep clones the entity.
            </summary>
            <returns>
            The cloned <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.IShallowClone">
            <summary>
            Represents an entity that can be shallow copied.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.IShallowClone.ShallowClone">
            <summary>
            Performs a shallow copy of an object.
            </summary>
            <returns>
            The copy of the <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.InvoiceAdjustmentResult">
            <summary>
                A result from adjusting an existing invoice
            </summary>
        </member>
        <member name="M:NKart.Core.Models.InvoiceAdjustmentResult.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="invoiceLineItemType">
            Allows a string to be passed into preset the InvoiceLineItemType
            </param>
        </member>
        <member name="M:NKart.Core.Models.InvoiceAdjustmentResult.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceAdjustmentResult.Success">
            <summary>
                Was the overall adjustment successful
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceAdjustmentResult.Message">
            <summary>
                A return message, could be an error
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceAdjustmentResult.InvoiceAdjustmentType">
            <summary>
                The type of adjustment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceAdjustmentResult.InvoiceLineItemType">
            <summary>
            The type of 
            </summary>
        </member>
        <member name="T:NKart.Core.Models.InvoiceLineItemType">
            <summary>
                The type of line item being edited
            </summary>
        </member>
        <member name="F:NKart.Core.Models.InvoiceLineItemType.Product">
            <summary>
                standard product line item
            </summary>
        </member>
        <member name="F:NKart.Core.Models.InvoiceLineItemType.Custom">
            <summary>
                Custom line item
            </summary>
        </member>
        <member name="T:NKart.Core.Models.InvoiceAdjustmentType">
            <summary>
                The type of adjustment for the invoice
            </summary>
        </member>
        <member name="F:NKart.Core.Models.InvoiceAdjustmentType.AddProducts">
            <summary>
                Adding product(s) to an invoice
            </summary>
        </member>
        <member name="F:NKart.Core.Models.InvoiceAdjustmentType.DeleteProduct">
            <summary>
                Deleting a product line item
            </summary>
        </member>
        <member name="F:NKart.Core.Models.InvoiceAdjustmentType.UpdateProductDetails">
            <summary>
            Used for custom products, where the name, qty, sku or price has been adjusted
            </summary>
        </member>
        <member name="F:NKart.Core.Models.InvoiceAdjustmentType.General">
            <summary>
                General Adjustment
            </summary>
        </member>
        <member name="T:NKart.Core.Models.InvoiceOrderShipment">
            <summary>
            This is just a helper class to deal with invoice adjustments
            </summary>
            <remarks>
            Invoice adjustments are tricky because or orders, and shipments being tied to orders
            This class is just to help make this process a bit easier
            </remarks>
        </member>
        <member name="M:NKart.Core.Models.InvoiceOrderShipment.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipment.Invoice">
            <summary>
            The invoice id
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipment.Orders">
            <summary>
            The order Id
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipment.HasOrders">
            <summary>
            Does this invoice have an order
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipment.LineItems">
            <summary>
            Line items
            </summary>
        </member>
        <member name="T:NKart.Core.Models.InvoiceOrderShipmentLineItem">
            <summary>
            A helper class to tie together the Invoice and Order lineitems
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.InvoiceLineItemId">
            <summary>
            The invoice line item id
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.OrderLineItemId">
            <summary>
            The order line item id
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.OrderId">
            <summary>
            The order id
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.ShipmentId">
            <summary>
             The shipment id
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.HasShipment">
            <summary>
            Has a shipment been created
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.HasAssociatedOrderLineItem">
            <summary>
            Is there an associated order line item
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.CanUpdate">
            <summary>
            Can this line item be updated
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.ItemId">
            <summary>
            The Product or Product variant id
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.Sku">
            <summary>
            The item SKU
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.Name">
            <summary>
            The Item Name
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.Price">
            <summary>
            The Item Price
            </summary>
        </member>
        <member name="P:NKart.Core.Models.InvoiceOrderShipmentLineItem.Qty">
            <summary>
            The item Qty
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Querying.QueryBuilderParameter">
            <summary>
            Represents a query builder parameter.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Querying.QueryBuilderParameter.FieldName">
            <summary>
            Gets or sets the field name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Querying.QueryBuilderParameter.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Querying.QueryBuilderParameter.MatchCondition">
            <summary>
            Gets or sets the match type.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.DigitalMediaDto">
            <summary>
            The Digital Media DTO.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DigitalMediaDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DigitalMediaDto.FirstAccessed">
            <summary>
            Gets or sets a value to calculate validity
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DigitalMediaDto.ProductVariantKey">
            <summary>
            Gets or sets a value used to retrieve download
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DigitalMediaDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DigitalMediaDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DigitalMediaDto.ExtendedData">
            <summary>
            Gets or sets the extended data.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.Customer2EntityCollectionDto">
            <summary>
            The customer 2 entity collection dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Customer2EntityCollectionDto.CustomerKey">
            <summary>
            Gets or sets the invoice key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Customer2EntityCollectionDto.EntityCollectionKey">
            <summary>
            Gets or sets the product collection key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Customer2EntityCollectionDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Customer2EntityCollectionDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.DistinctCurrencyCodeDto">
            <summary>
            A dto used for querying distinct currency codes.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DistinctCurrencyCodeDto.CurrencyCode">
            <summary>
            Gets or sets the currency code.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.DtoExtensions">
            <summary>
            The DTO extensions.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Rdbms.DtoExtensions.TableNameColumnCount(NKart.Core.Models.Rdbms.IDto)">
            <summary>
            The table name.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.Rdbms.DtoExtensions.ColumnValues(NKart.Core.Models.Rdbms.IDto)">
            <summary>
            The column values.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The collection of column tuples
            </returns>
        </member>
        <member name="M:NKart.Core.Models.Rdbms.DtoExtensions.GetColumnProperties(NKart.Core.Models.Rdbms.IDto)">
            <summary>
            Gets the column properties.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.EntityUseCountDto">
            <summary>
            A DTO object used for querying use counts of entities.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityUseCountDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityUseCountDto.UseCount">
            <summary>
            Gets or sets the use count.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.IDto">
            <summary>
            Marker interface for DTO objects.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.KeyDto">
            <summary>
            The key dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.KeyDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.NoteDto">
            <summary>
            The note dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NoteDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NoteDto.EntityKey">
            <summary>
            Gets or sets the entity key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NoteDto.EntityTfKey">
            <summary>
            Gets or sets the reference type.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NoteDto.Author">
            <summary>
            Gets or sets the author.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NoteDto.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NoteDto.InternalOnly">
            <summary>
            Gets or sets a value indicating whether the note should be for internal use only.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NoteDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NoteDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.DetachedContentTypeDto">
            <summary>
            The detached content type dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DetachedContentTypeDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DetachedContentTypeDto.EntityTfKey">
            <summary>
            Gets or sets the entity type field key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DetachedContentTypeDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DetachedContentTypeDto.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DetachedContentTypeDto.ContentTypeKey">
            <summary>
            Gets or sets the content type id.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DetachedContentTypeDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.DetachedContentTypeDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.Invoice2EntityCollectionDto">
            <summary>
            The invoice 2 entity collection dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Invoice2EntityCollectionDto.InvoiceKey">
            <summary>
            Gets or sets the invoice key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Invoice2EntityCollectionDto.EntityCollectionKey">
            <summary>
            Gets or sets the product collection key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Invoice2EntityCollectionDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Invoice2EntityCollectionDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.OfferRedeemedDto">
            <summary>
            The offer settings dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.OfferSettingsKey">
            <summary>
            Gets or sets the offer settings key.
            </summary>
            <remarks>
            This accepts a null so that the offer can be deleted without having to 
            delete this reference
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.OfferCode">
            <summary>
            Gets or sets the offer code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.OfferProviderKey">
            <summary>
            Gets or sets the offer provider key.
            </summary>
            <remarks>
            This does not need to allow nulls since the key is not associated
            with a database constraint.
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.CustomerKey">
            <summary>
            Gets or sets the customer key.
            </summary>
            <remarks>
            Not all offers will be associated with known customers (could be anonymous)
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.InvoiceKey">
            <summary>
            Gets or sets the invoice key.
            </summary>
            <remarks>
            If the invoice is deleted - so will this record
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.RedeemedDate">
            <summary>
            Gets or sets the redeemed date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.ExtendedData">
            <summary>
            Gets or sets the extended data serialization.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferRedeemedDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.OfferSettingsDto">
            <summary>
            The offer settings dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.OfferCode">
            <summary>
            Gets or sets the offer code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.OfferProviderKey">
            <summary>
            Gets or sets the offer provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.OfferStartsDate">
            <summary>
            Gets or sets the offer starts date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.OfferEndsDate">
            <summary>
            Gets or sets the offer ends date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.Active">
            <summary>
            Gets or sets a value indicating whether active.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.ConfigurationData">
            <summary>
            Gets or sets the configuration data.
            </summary>
            <remarks>
            This field stores JSON for constraints and reward fields
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OfferSettingsDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.Product2EntityCollectionDto">
            <summary>
            The product 2 product collection dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2EntityCollectionDto.ProductKey">
            <summary>
            Gets or sets the product key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2EntityCollectionDto.EntityCollectionKey">
            <summary>
            Gets or sets the product collection key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2EntityCollectionDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2EntityCollectionDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.EntityCollectionDto">
            <summary>
            The product collection dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.ParentKey">
            <summary>
            Gets or sets the parent key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.EntityTfKey">
            <summary>
            Gets or sets the entity type field key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.ProviderKey">
            <summary>
            Gets or sets the key for the collection provider.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.IsFilter">
            <summary>
            Gets or sets a value indicating whether is filter.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.ExtendedData">
            <summary>
            Gets or sets the extended data.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.EntityCollectionDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ProductOptionAttributeShareDto">
            <summary>
            The product 2 product option dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionAttributeShareDto.ProductKey">
            <summary>
            Gets or sets the option key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionAttributeShareDto.OptionKey">
            <summary>
            Gets or sets the option key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionAttributeShareDto.AttributeKey">
            <summary>
            Gets or sets the product attribute key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionAttributeShareDto.IsDefaultChoice">
            <summary>
            Gets or sets a value indicating whether is default choice.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionAttributeShareDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionAttributeShareDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto">
            <summary>
            The product variant 2 detached content dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.Key">
            <summary>
            Gets or sets the unique key.
            </summary>
            <remarks>
            This is weird situation where we want a Key so that we can use <see cref="T:NKart.Core.Models.EntityBase.IEntity"/> but the actual primary constraint needs to be 
            multiple keys.
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.ProductVariantKey">
            <summary>
            Gets or sets the product variant key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.CultureName">
            <summary>
            Gets or sets the culture name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.DetachedContentTypeKey">
            <summary>
            Gets or sets the detached content type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.Values">
            <summary>
            Gets or sets the property values.
            </summary>
            <remarks>
            Introduced in version 1.12.0
            Used to store property value JSON similar to the Nested Content package
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.TemplateId">
            <summary>
            Gets or sets the template id.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.Slug">
            <summary>
            Gets or sets the slug.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.CanBeRendered">
            <summary>
            Gets or sets a value indicating whether virtual content can be rendered.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto.DetachedContentType">
            <summary>
            Gets or sets the detached published content type.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.CustomerIndexDto">
            <summary>
            The customer index dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerIndexDto.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerIndexDto.CustomerKey">
            <summary>
            Gets or sets the customer key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerIndexDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerIndexDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.IPageableDto">
            <summary>
            The PageableDto interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.IPageableDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ShipmentStatusDto">
            <summary>
            The shipment status dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentStatusDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentStatusDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentStatusDto.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentStatusDto.Reportable">
            <summary>
            Gets or sets a value indicating whether reportable.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentStatusDto.Active">
            <summary>
            Gets or sets a value indicating whether active.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentStatusDto.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentStatusDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentStatusDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.AuditLogDto">
            <summary>
            The audit dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AuditLogDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AuditLogDto.EntityKey">
            <summary>
            Gets or sets the entity key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AuditLogDto.EntityTfKey">
            <summary>
            Gets or sets the reference type.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AuditLogDto.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AuditLogDto.Verbosity">
            <summary>
            Gets or sets the verbosity level. 
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AuditLogDto.ExtendedData">
            <summary>
            Gets or sets the extended data collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AuditLogDto.IsError">
            <summary>
            Gets or sets a value indicating whether this is an error record.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AuditLogDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AuditLogDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.NotificationMessageDto">
            <summary>
            The notification message dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.MethodKey">
            <summary>
            Gets or sets the method key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.MonitorKey">
            <summary>
            Gets or sets the monitor key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.FromAddress">
            <summary>
            Gets or sets the from address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.ReplyTo">
            <summary>
            Gets or sets the reply to.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.BodyText">
            <summary>
            Gets or sets the body text.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.MaxLength">
            <summary>
            Gets or sets the max length.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.BodyTextIsFilePath">
            <summary>
            Gets or sets a value indicating whether body text is file path.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.Recipients">
            <summary>
            Gets or sets the recipients.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.SendToCustomer">
            <summary>
            Gets or sets a value indicating whether send to customer.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.Disabled">
            <summary>
            Gets or sets a value indicating whether disabled.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.NotificationMessageDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.User2AppDto">
            <summary>
            Internal Umbraco dto used for package installation and removal - in GrantPermissionForApp PackageAction
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.UserDto">
            <summary>
            Internal Umbraco dto used for package installation and removal - in GrantPermissionForApp PackageAction
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ILineItemDto">
            <summary>
            Defines a LineItemDto
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.CatalogInventoryDto">
            <summary>
            The catalog inventory dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CatalogInventoryDto.CatalogKey">
            <summary>
            Gets or sets the catalog key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CatalogInventoryDto.ProductVariantKey">
            <summary>
            Gets or sets the product variant key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CatalogInventoryDto.Count">
            <summary>
            Gets or sets the count.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CatalogInventoryDto.LowCount">
            <summary>
            Gets or sets the low count.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CatalogInventoryDto.Location">
            <summary>
            Gets or sets the location.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CatalogInventoryDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CatalogInventoryDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CatalogInventoryDto.WarehouseCatalogDto">
            <summary>
            Gets or sets the warehouse catalog dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CatalogInventoryDto.ProductVariantDto">
            <summary>
            Gets or sets the product variant dto.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ProductVariantIndexDto">
            <summary>
            The product variant index dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantIndexDto.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantIndexDto.ProductVariantKey">
            <summary>
            Gets or sets the product variant key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantIndexDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantIndexDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.StoreSettingDto">
            <summary>
            The store setting dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.StoreSettingDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.StoreSettingDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.StoreSettingDto.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.StoreSettingDto.TypeName">
            <summary>
            Gets or sets the type name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.StoreSettingDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.StoreSettingDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.WarehouseCatalogDto">
            <summary>
            The warehouse catalog dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseCatalogDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseCatalogDto.WarehouseKey">
            <summary>
            Gets or sets the warehouse key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseCatalogDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseCatalogDto.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseCatalogDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseCatalogDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.TaxMethodDto">
            <summary>
            The merchTaxMethod table.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TaxMethodDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TaxMethodDto.ProviderKey">
            <summary>
            Gets or sets the provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TaxMethodDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TaxMethodDto.CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TaxMethodDto.PercentageTaxRate">
            <summary>
            Gets or sets the percentage tax rate.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TaxMethodDto.ProvinceData">
            <summary>
            Gets or sets the province data.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TaxMethodDto.ProductTaxMethod">
            <summary>
            Gets or sets a value indicating whether product tax method.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TaxMethodDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TaxMethodDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.AppliedPaymentDto">
            <summary>
            The DTO for the merchAppliedPayment table.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AppliedPaymentDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AppliedPaymentDto.PaymentKey">
            <summary>
            Gets or sets the payment key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AppliedPaymentDto.InvoiceKey">
            <summary>
            Gets or sets the invoice key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AppliedPaymentDto.AppliedPaymentTfKey">
            <summary>
            Gets or sets the applied payment type field key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AppliedPaymentDto.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AppliedPaymentDto.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AppliedPaymentDto.Exported">
            <summary>
            Gets or sets a value indicating whether exported.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AppliedPaymentDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AppliedPaymentDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.OrderDto">
            <summary>
            The order dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.InvoiceKey">
            <summary>
            Gets or sets the invoice key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.OrderNumberPrefix">
            <summary>
            Gets or sets the order number prefix.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.OrderNumber">
            <summary>
            Gets or sets the order number.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.OrderDate">
            <summary>
            Gets or sets the order date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.OrderStatusKey">
            <summary>
            Gets or sets the order status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.VersionKey">
            <summary>
            Gets or sets the version key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.Exported">
            <summary>
            Gets or sets a value indicating whether exported.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.OrderIndexDto">
            <summary>
            Gets or sets the order index dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.OrderDto.OrderStatusDto">
            <summary>
            Gets or sets the order status dto.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ProductAttributeDto">
            <summary>
            A DTO object for performing product attribute related data operations.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductAttributeDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductAttributeDto.OptionKey">
            <summary>
            Gets or sets the option key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductAttributeDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductAttributeDto.Sku">
            <summary>
            Gets or sets the SKU.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductAttributeDto.DetachedContentValues">
            <summary>
            Gets or sets the detached content values.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductAttributeDto.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductAttributeDto.IsDefaultChoice">
            <summary>
            Gets or sets a value indicating whether is default choice.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductAttributeDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductAttributeDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ProductOptionDto">
            <summary>
            DTO object for a product option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionDto.DetachedContentTypeKey">
            <summary>
            Gets or sets the detached content type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionDto.Required">
            <summary>
            Gets or sets a value indicating whether required.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionDto.Shared">
            <summary>
            Gets or sets a value indicating whether this represents a shared option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionDto.UiOption">
            <summary>
            Gets or sets the UI option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductOptionDto.Product2ProductOptionDto">
            <summary>
            Gets or sets the result for product to product option association.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.Product2ProductOptionDto">
            <summary>
            The product 2 product option dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2ProductOptionDto.ProductKey">
            <summary>
            Gets or sets the product key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2ProductOptionDto.OptionKey">
            <summary>
            Gets or sets the option key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2ProductOptionDto.UseName">
            <summary>
            Gets or sets the name for the option when a shared option is used on a product.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2ProductOptionDto.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2ProductOptionDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2ProductOptionDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.Product2ProductOptionDto.ProductOptionDto">
            <summary>
            Gets or sets the product option dto.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ProductVariantDto">
            <summary>
            The product variant dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.ProductKey">
            <summary>
            Gets or sets the product key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Sku">
            TODO add index to SKU http://issues.merchello.com/youtrack/issue/M-646
            <summary>
            Gets or sets the SKU.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Price">
            <summary>
            Gets or sets the price.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.CostOfGoods">
            <summary>
            Gets or sets the cost of goods.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.SalePrice">
            <summary>
            Gets or sets the sale price.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.OnSale">
            <summary>
            Gets or sets a value indicating whether on sale.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Manufacturer">
            <summary>
            Gets or sets the manufacturer.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.ManufacturerModelNumber">
            <summary>
            Gets or sets the manufacturer model number.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Weight">
            <summary>
            Gets or sets the weight.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Length">
            <summary>
            Gets or sets the length.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Barcode">
            <summary>
            Gets or sets the barcode.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Available">
            <summary>
            Gets or sets a value indicating whether available.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.TrackInventory">
            <summary>
            Gets or sets a value indicating whether track inventory.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.OutOfStockPurchase">
            <summary>
            Gets or sets a value indicating whether out of stock purchase.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Taxable">
            <summary>
            Gets or sets a value indicating whether taxable.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Shippable">
            <summary>
            Gets or sets a value indicating whether shippable.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Download">
            <summary>
            Gets or sets a value indicating whether download.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.DownloadMediaId">
            <summary>
            Gets or sets the download media id.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.Master">
            <summary>
            Gets or sets a value indicating whether this variant is the master variant.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.IsDefault">
            <summary>
            Gets or sets a value indicating whether this variant is the default variant
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.VersionKey">
            <summary>
            Gets or sets the version key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariantDto.ProductVariantIndexDto">
            <summary>
            Gets or sets the product variant index dto.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ProductVariant2ProductAttributeDto">
            <summary>
            The product variant 2 product attribute DTO.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariant2ProductAttributeDto.ProductVariantKey">
            <summary>
            Gets or sets the product variant key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariant2ProductAttributeDto.OptionKey">
            <summary>
            Gets or sets the option key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariant2ProductAttributeDto.ProductAttributeKey">
            <summary>
            Gets or sets the product attribute key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariant2ProductAttributeDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariant2ProductAttributeDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductVariant2ProductAttributeDto.ProductAttributeDto">
            <summary>
            Gets or sets the product attribute DTO.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ProductDto">
            <summary>
            The product dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ProductDto.ProductVariantDto">
            <summary>
            Gets or sets the product variant dto.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.TypeFieldDto">
            <summary>
            The type field DTO.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TypeFieldDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TypeFieldDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TypeFieldDto.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TypeFieldDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.TypeFieldDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.CustomerAddressDto">
            <summary>
            The customer address dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.CustomerKey">
            <summary>
            Gets or sets the customer key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.Label">
            <summary>
            Gets or sets the label.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.FullName">
            <summary>
            Gets or sets the full name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.Company">
            <summary>
            Gets or sets the company.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.AddressTfKey">
            <summary>
            Gets or sets the address tf key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.Address1">
            <summary>
            Gets or sets the address 1.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.Address2">
            <summary>
            Gets or sets the address 2.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.Locality">
            <summary>
            Gets or sets the locality.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.Region">
            <summary>
            Gets or sets the region.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.IsDefault">
            <summary>
            Gets or sets a value indicating whether is default.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerAddressDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.AnonymousCustomerDto">
            <summary>
            The anonymous customer dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AnonymousCustomerDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AnonymousCustomerDto.LastActivityDate">
            <summary>
            Gets or sets the last activity date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AnonymousCustomerDto.ExtendedData">
            <summary>
            Gets or sets the extended data.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AnonymousCustomerDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.AnonymousCustomerDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ItemCacheItemDto">
            <summary>
            The item cache item dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.ContainerKey">
            <summary>
            Gets or sets the container key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.LineItemTfKey">
            <summary>
            Gets or sets the line item type field key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.Sku">
            <summary>
            Gets or sets the SKU.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.Quantity">
            <summary>
            Gets or sets the quantity.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.Price">
            <summary>
            Gets or sets the price.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.ExtendedData">
            <summary>
            Gets or sets the extended data.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.Exported">
            <summary>
            Gets or sets a value indicating whether exported.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheItemDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.CustomerDto">
            <summary>
            The customer dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.LoginName">
            <summary>
            Gets or sets the login name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.FirstName">
            <summary>
            Gets or sets the first name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.LastName">
            <summary>
            Gets or sets the last name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.Email">
            <summary>
            Gets or sets the email.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.TaxExempt">
            <summary>
            Gets or sets a value indicating whether tax exempt.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.LastActivityDate">
            <summary>
            Gets or sets the last activity date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.ExtendedData">
            <summary>
            Gets or sets the extended data.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.Notes">
            <summary>
            Gets or sets the extended data.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.CustomerDto.CustomerIndexDto">
            <summary>
            Gets or sets the customer index dto.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.InvoiceDto">
            <summary>
            The invoice dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.CustomerKey">
            <summary>
            Gets or sets the customer key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.InvoiceNumberPrefix">
            <summary>
            Gets or sets the invoice number prefix.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.InvoiceNumber">
            <summary>
            Gets or sets the invoice number.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.PoNumber">
            <summary>
            Gets or sets the po number.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.InvoiceDate">
            <summary>
            Gets or sets the invoice date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.InvoiceStatusKey">
            <summary>
            Gets or sets the invoice status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.VersionKey">
            <summary>
            Gets or sets the version key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToName">
            <summary>
            Gets or sets the bill to name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToAddress1">
            <summary>
            Gets or sets the bill to address 1.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToAddress2">
            <summary>
            Gets or sets the bill to address 2.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToLocality">
            <summary>
            Gets or sets the bill to locality.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToRegion">
            <summary>
            Gets or sets the bill to region.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToPostalCode">
            <summary>
            Gets or sets the bill to postal code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToCountryCode">
            <summary>
            Gets or sets the bill to country code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToEmail">
            <summary>
            Gets or sets the bill to email.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToPhone">
            <summary>
            Gets or sets the bill to phone.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.BillToCompany">
            <summary>
            Gets or sets the bill to company.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.CurrencyCode">
            <summary>
            Gets or sets the currency code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.Exported">
            <summary>
            Gets or sets a value indicating whether exported.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.Archived">
            <summary>
            Gets or sets a value indicating whether archived.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.Total">
            <summary>
            Gets or sets the total.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.InvoiceIndexDto">
            <summary>
            Gets or sets the invoice index dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceDto.InvoiceStatusDto">
            <summary>
            Gets or sets the invoice status dto.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.InvoiceStatusDto">
            <summary>
            The invoice status dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceStatusDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceStatusDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceStatusDto.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceStatusDto.Reportable">
            <summary>
            Gets or sets a value indicating whether reportable.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceStatusDto.Active">
            <summary>
            Gets or sets a value indicating whether active.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceStatusDto.SortOrder">
            <summary>
            Gets or sets the sort order.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceStatusDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.InvoiceStatusDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ItemCacheDto">
            <summary>
            The item cache dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheDto.EntityKey">
            <summary>
            Gets or sets the entity key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheDto.ItemCacheTfKey">
            <summary>
            Gets or sets the item cache type field key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheDto.VersionKey">
            <summary>
            Gets or sets the version key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ItemCacheDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.ShipmentDto">
            <summary>
            The shipment dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ShipmentNumberPrefix">
            <summary>
            Gets or sets the shipment number prefix.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ShipmentNumber">
            <summary>
            Gets or sets the invoice number.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ShipmentStatusKey">
            <summary>
            Gets or sets the shipment status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ShippedDate">
            <summary>
            Gets or sets the shipped date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.FromOrganization">
            <summary>
            Gets or sets the from organization.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.FromName">
            <summary>
            Gets or sets the from name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.FromAddress1">
            <summary>
            Gets or sets the from address 1.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.FromAddress2">
            <summary>
            Gets or sets the from address 2.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.FromLocality">
            <summary>
            Gets or sets the from locality.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.FromRegion">
            <summary>
            Gets or sets the from region.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.FromPostalCode">
            <summary>
            Gets or sets the from postal code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.FromCountryCode">
            <summary>
            Gets or sets the from country code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.FromIsCommercial">
            <summary>
            Gets or sets a value indicating whether from is commercial.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ToOrganization">
            <summary>
            Gets or sets the to organization.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ToName">
            <summary>
            Gets or sets the to name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ToAddress1">
            <summary>
            Gets or sets the to address 1.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ToAddress2">
            <summary>
            Gets or sets the to address 2.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ToLocality">
            <summary>
            Gets or sets the to locality.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ToRegion">
            <summary>
            Gets or sets the to region.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ToPostalCode">
            <summary>
            Gets or sets the to postal code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ToCountryCode">
            <summary>
            Gets or sets the to country code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ToIsCommercial">
            <summary>
            Gets or sets a value indicating whether to is commercial.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.Email">
            <summary>
            Gets or sets the email.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ShipMethodKey">
            <summary>
            Gets or sets the ship method key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.VersionKey">
            <summary>
            Gets or sets the version key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.Carrier">
            <summary>
            Gets or sets the carrier.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.TrackingCode">
            <summary>
            Gets or sets the tracking code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.TrackingUrl">
            <summary>
            Gets or sets the tracking url.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.ShipmentDto.ShipmentStatusDto">
            <summary>
            Gets or sets the shipment status dto.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Rdbms.WarehouseDto">
            <summary>
            The warehouse dto.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.Address1">
            <summary>
            Gets or sets the address 1.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.Address2">
            <summary>
            Gets or sets the address 2.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.Locality">
            <summary>
            Gets or sets the locality.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.Region">
            <summary>
            Gets or sets the region.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.CountryCode">
            <summary>
            Gets or sets the country code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.Phone">
            <summary>
            Gets or sets the phone.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.Email">
            <summary>
            Gets or sets the email.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.IsDefault">
            <summary>
            Gets or sets a value indicating whether is default.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.UpdateDate">
            <summary>
            Gets or sets the update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Rdbms.WarehouseDto.CreateDate">
            <summary>
            Gets or sets the create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Counting.EntityUseCount">
            <summary>
            Intended to get the use count of an entity.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Counting.EntityUseCount.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Counting.EntityUseCount.UseCount">
            <summary>
            Gets or sets the count.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Counting.IProductOptionUseCount">
            <summary>
            Represents the usage of an option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Counting.IProductOptionUseCount.Option">
            <summary>
            Gets or sets the option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Counting.IProductOptionUseCount.Shared">
            <summary>
            Gets or sets a value indicating whether the option is shared.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Counting.IProductOptionUseCount.Choices">
            <summary>
            Gets or sets the choices.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Counting.ProductOptionUseCount">
            <summary>
            Represents the usage of an option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Counting.ProductOptionUseCount.Option">
            <summary>
            Gets or sets the option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Counting.ProductOptionUseCount.Shared">
            <summary>
            Gets or sets a value indicating whether the option is shared.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Counting.ProductOptionUseCount.Choices">
            <summary>
            Gets or sets the choices.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.CurrencyFormat">
            <summary>
            The currency format.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.CurrencyFormat.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.CurrencyFormat"/> class.
            </summary>
            <param name="format">
            The format.
            </param>
            <param name="symbol">
            The symbol.
            </param>
        </member>
        <member name="P:NKart.Core.Models.CurrencyFormat.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.CurrencyFormat.Symbol">
            <summary>
            Gets or sets the symbol.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.CurrencyFormat.CreateDefault(System.String)">
            <summary>
            The create default.
            </summary>
            <param name="symbol">
            The symbol.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.CurrencyFormat"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.IHasParent">
            <summary>
            Defines an entity that has a parent key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IHasParent.ParentKey">
            <summary>
            Gets the parent key.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityCollection">
            <summary>
            The entity collection.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection._entityTfKey">
            <summary>
            The entity type field key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection._prodiverKey">
            <summary>
            The dynamic collection.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection._parentKey">
            <summary>
            The _parent key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection._sortOrder">
            <summary>
            The sort order.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection._extendedData">
            <summary>
            The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection._isFilter">
            <summary>
            Gets a value indicating whether the collection is represented as a filter.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.EntityCollection.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.EntityCollection"/> class.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="providerKey">
            The provider Key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.EntityCollection.ParentKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.EntityCollection.EntityTfKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.EntityCollection.EntityType">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.EntityCollection.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.EntityCollection.SortOrder">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.EntityCollection.ProviderKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.EntityCollection.IsFilter">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.EntityCollection.ExtendedData">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.EntityCollection.ExtendedDataChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the extended data collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.EntityCollection.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection.PropertySelectors.EntityTfKeySelector">
            <summary>
            The entity type field key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection.PropertySelectors.ProviderKeySelector">
            <summary>
            The provider key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection.PropertySelectors.ParentKeySelector">
            <summary>
            The parent key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection.PropertySelectors.SortOrderSelector">
            <summary>
            The sort info selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection.PropertySelectors.ExtendedDataChangedSelector">
            <summary>
            The extended data changed selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityCollection.PropertySelectors.IsFilterSelector">
            <summary>
            The is filter selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityFilterGroup">
            <summary>
            Represents a specified entity filter collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.EntityFilterGroup.#ctor(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.EntityFilterGroup"/> class.
            </summary>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="P:NKart.Core.Models.EntityFilterGroup.Filters">
            <summary>
            Gets or sets the attribute collections.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IEntityFilterGroup">
            <summary>
            Defines the entity filter grounp.  Used for filtering entities.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IEntityFilterGroup.Filters">
            <summary>
            Gets the attribute collections.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.ICurrencyFormat">
            <summary>
            Defines a standard currency format
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.ICurrencyFormat.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.ICurrencyFormat.Symbol">
            <summary>
            Gets or sets the symbol.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IEntityCollection">
            <summary>
            The EntityCollection interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IEntityCollection.ParentKey">
            <summary>
            Gets or sets the parent key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IEntityCollection.EntityType">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IEntityCollection.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IEntityCollection.SortOrder">
            <summary>
            Gets the sort order.
            </summary>
            <remarks>
            Zero based sort order
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IEntityCollection.ProviderKey">
            <summary>
            Gets or sets the collection provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IEntityCollection.IsFilter">
            <summary>
            Gets or sets a value indicating whether is filter.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IHasEntityTypeField">
            <summary>
            Defines a class that exposes an entity type field key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IHasEntityTypeField.EntityTfKey">
            <summary>
            Gets or sets the entity type field key.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IDataModifierLog">
            <summary>
            Defines the ModifiedData.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IDataModifierLog.PropertyName">
            <summary>
            Gets or sets the property name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IDataModifierLog.OriginalValue">
            <summary>
            Gets or sets the original value.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IDataModifierLog.ModifiedValue">
            <summary>
            Gets or sets the modified value.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IDataModifierLog.ExtendedData">
            <summary>
            Gets or sets the extended data.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IOfferRedeemed">
            <summary>
            Defines an offer redeemed record.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferRedeemed.OfferSettingsKey">
            <summary>
            Gets or sets the offer settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferRedeemed.OfferCode">
            <summary>
            Gets or sets the offer code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferRedeemed.OfferProviderKey">
            <summary>
            Gets or sets the offer provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferRedeemed.CustomerKey">
            <summary>
            Gets or sets the customer key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferRedeemed.RedeemedDate">
            <summary>
            Gets or sets the redeemed date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferRedeemed.InvoiceKey">
            <summary>
            Gets or sets the invoice key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferRedeemed.ExtendedData">
            <summary>
            Gets the extended data.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IOfferSettings">
            <summary>
            The DiscountOfferSettings interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferSettings.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferSettings.OfferCode">
            <summary>
            Gets or sets the offer code.
            </summary>
            <remarks>
            This must be unique
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferSettings.OfferProviderKey">
            <summary>
            Gets or sets the provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferSettings.OfferStartsDate">
            <summary>
            Gets or sets the offer starts date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferSettings.OfferEndsDate">
            <summary>
            Gets or sets the offer ends date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferSettings.Active">
            <summary>
            Gets or sets a value indicating whether active.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferSettings.Expired">
            <summary>
            Gets a value indicating whether the offer has expired.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferSettings.HasStarted">
            <summary>
            Gets a value indicating whether the offer has started.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IOfferSettings.ComponentDefinitions">
            <summary>
            Gets or sets the component configurations.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IDigitalMedia">
            <summary>
            Defines DigitalMedia.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IDigitalMedia.ProductVariantKey">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IDigitalMedia.FirstAccessed">
            <summary>
            Gets or sets the first accessed date
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IVisitor`1">
            <summary>
            The Visitor interface.
            </summary>
            <typeparam name="TItem">
            The type item that will be visited
            </typeparam>
        </member>
        <member name="M:NKart.Core.Models.Interfaces.IVisitor`1.Visit(`0)">
            <summary>
            Executes the "visit"
            </summary>
            <param name="item">
            The item to be visited
            </param>
            <remarks>
            This is the Visitor design pattern.  PluralSight has some great intros
            </remarks>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IAuditLog">
            <summary>
            Defines an Audit record.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IAuditLog.EntityKey">
            <summary>
            Gets or sets the entity key related to the audit record
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IAuditLog.EntityTfKey">
            <summary>
            Gets or sets the entity type field key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IAuditLog.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IAuditLog.Verbosity">
            <summary>
            Gets or sets the verbosity level.
            </summary>
            <remarks>
            Currently not used
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IAuditLog.IsError">
            <summary>
            Gets or sets a value indicating whether this is a record of an error.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IOrderByField">
            <summary>
            Marker interface for OrderByField models.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Interfaces.IShipProvince">
            <summary>
            Represents a province used for shipping.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IShipProvince.AllowShipping">
            <summary>
            Gets or sets a value indicating whether or not to allow shipping to the province
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IShipProvince.RateAdjustment">
            <summary>
            Gets or sets a rate adjustment when shipping to this province
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Interfaces.IShipProvince.RateAdjustmentType">
            <summary>
            Gets or sets the type of rate adjustment
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IHasNotes">
            <summary>
            Defines a model with notes.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IHasNotes.Notes">
            <summary>
            Gets or sets the notes.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.INote">
            <summary>
            Defines a note.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INote.EntityKey">
            <summary>
            Gets or sets the entity key related to the note
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INote.EntityTfKey">
            <summary>
            Gets or sets the entity type field key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INote.Author">
            <summary>
            Gets or sets the author.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INote.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INote.InternalOnly">
            <summary>
            Gets or sets a value indicating whether the not is for internal use only.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Note">
            <summary>
            The note.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note._entityKey">
            <summary>
            The entity key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note._entityTfKey">
            <summary>
            The reference type.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note._author">
            <summary>
            The author.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note._message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note._internalOnly">
            <summary>
            The internal only.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Note.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Note"/> class.
            </summary>
            <param name="entityKey">
            The entity Key.
            </param>
            <param name="entityTfKey">
            The entity type field Key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.Note.EntityKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Note.EntityTfKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Note.Author">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Note.Message">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Note.InternalOnly">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.Note.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note.PropertySelectors.EntityKeySelector">
            <summary>
            The entity key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note.PropertySelectors.AuthorSelector">
            <summary>
            The author selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note.PropertySelectors.MessageSelector">
            <summary>
            The message selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note.PropertySelectors.EntityTfKeySelector">
            <summary>
            The reference type selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Note.PropertySelectors.InternalOnlySelector">
            <summary>
            The internal only selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IDataModifierData">
            <summary>
            Defines ModifiableData.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IDataModifierData.ModifiedDataLogs">
            <summary>
            Gets or sets the modified data logs.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IProductVariantDataModifierData">
            <summary>
            Defines modifiable product data.
            </summary>
            <remarks>
            1.9.1 used in Data Modifier layer in the MerchelloHelper
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IProductVariantDataModifierData.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariantDataModifierData.Price">
            <summary>
            Gets or sets the price.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariantDataModifierData.SalePrice">
            <summary>
            Gets or sets the sale price.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariantDataModifierData.OnSale">
            <summary>
            Gets or sets a value indicating whether on sale.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariantDataModifierData.Available">
            <summary>
            Gets or sets a value indicating whether available.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariantDataModifierData.TrackInventory">
            <summary>
            Gets or sets a value indicating whether track inventory.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariantDataModifierData.Shippable">
            <summary>
            Gets or sets a value indicating whether shippable.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariantDataModifierData.Taxable">
            <summary>
            Gets or sets a value indicating whether taxable.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.DigitalMedia">
            <summary>
            The digital media.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DigitalMedia._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DigitalMedia._firstAccessed">
            <summary>
            First accessed data.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DigitalMedia._productVariantKey">
            <summary>
            Product variant key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DigitalMedia._extendedData">
            <summary>
            The extended data collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DigitalMedia.ProductVariantKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DigitalMedia.FirstAccessed">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.DigitalMedia.ExtendedData">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.DigitalMedia.ExtendedDataChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the ExtendDataCollection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.DigitalMedia.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DigitalMedia.PropertySelectors.FirstAccessedSelector">
            <summary>
            The first accessed selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DigitalMedia.PropertySelectors.ProductVariantSelector">
            <summary>
            The product variant selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.DigitalMedia.PropertySelectors.ExtendedDataChangedSelector">
            <summary>
            The extended data changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ProductVariantDataModifierData">
            <summary>
            The modifiable product variant data.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariantDataModifierData._modifiedDataLogs">
            <summary>
            The _modified data logs.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ProductVariantDataModifierData.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ProductVariantDataModifierData.Price">
            <summary>
            Gets or sets the price.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ProductVariantDataModifierData.SalePrice">
            <summary>
            Gets or sets the sale price.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ProductVariantDataModifierData.OnSale">
            <summary>
            Gets or sets a value indicating whether on sale.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ProductVariantDataModifierData.Available">
            <summary>
            Gets or sets a value indicating whether available.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ProductVariantDataModifierData.TrackInventory">
            <summary>
            Gets or sets a value indicating whether track inventory.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ProductVariantDataModifierData.Shippable">
            <summary>
            Gets or sets a value indicating whether shippable.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ProductVariantDataModifierData.Taxable">
            <summary>
            Gets or sets a value indicating whether taxable.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ProductVariantDataModifierData.ModifiedDataLogs">
            <summary>
            Gets or sets the modified data logs.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.DataModifierLog">
            <summary>
            Represents a DataModifierLog.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DataModifierLog.PropertyName">
            <summary>
            Gets or sets the property name of the property modified.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DataModifierLog.OriginalValue">
            <summary>
            Gets or sets the original value.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DataModifierLog.ModifiedValue">
            <summary>
            Gets or sets the modified value.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.DataModifierLog.ExtendedData">
            <summary>
            Gets or sets the extended data.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel">
            <summary>
            The ShipmentResult interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel.Shipment">
            <summary>
            Gets or sets the shipment.
            </summary>
            <value>
            The shipment.
            </value>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel.Invoice">
            <summary>
            Gets or sets the invoice.
            </summary>
            <value>
            The invoice.
            </value>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel.ShipMethod">
            <summary>
            Gets or sets the ship method.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.MonitorModels.INotifyModel">
            <summary>
            Defines the NotifyModel
            </summary>
        </member>
        <member name="T:NKart.Core.Models.MonitorModels.MonitorModelExtensions">
            <summary>
            Extension methods for Notification Monitor Models
            </summary>
        </member>
        <member name="M:NKart.Core.Models.MonitorModels.MonitorModelExtensions.ToOrderConfirmationNotification(NKart.Core.Gateways.Payment.IPaymentResult)">
            <summary>
            The to order confirmation notification.
            </summary>
            <param name="paymentResult">
            The payment result.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.MonitorModels.MonitorModelExtensions.ToOrderConfirmationNotification(NKart.Core.Gateways.Payment.IPaymentResult,System.Collections.Generic.IEnumerable{System.String},NKart.Core.Models.IShipment,NKart.Core.Models.IShipMethod,System.String)">
            <summary>
            The to order confirmation notification.
            </summary>
            <param name="paymentResult">
            The payment result.
            </param>
            <param name="contacts">
            The contacts.
            </param>
            <param name="shipment">
            The shipment.
            </param>
            <param name="shipMethod">
            The ship Method.
            </param>
            <param name="currencySymbol">
            The currency Symbol.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.MonitorModels.MonitorModelExtensions.ToOrderShippedNotification(NKart.Core.Gateways.Payment.IPaymentResult)">
            <summary>
            To the order shipped notification.
            </summary>
            <param name="paymentResult">
            The payment result.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.MonitorModels.MonitorModelExtensions.ToOrderShippedNotification(NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            To the order shipped notification.
            </summary>
            <param name="shipmentResult">
            The shipment Result.
            </param>
            <param name="contacts">
            The contacts.
            </param>
        </member>
        <member name="T:NKart.Core.Models.MonitorModels.NotifyModelBase">
            <summary>
            Defines the base MonitorModel
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.NotifyModelBase.Contacts">
            <summary>
            Gets or sets an array of additional recipients (ex. email addresses, phone numbers, twitter handles ...)
            </summary>
        </member>
        <member name="T:NKart.Core.Models.MonitorModels.PaymentResultNotifyModel">
            <summary>
            Represents a PaymentResultMonitorModel
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.PaymentResultNotifyModel.Payment">
            <summary>
            Gets or sets the <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.PaymentResultNotifyModel.Invoice">
            <summary>
            Gets or sets the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.PaymentResultNotifyModel.Shipment">
            <summary>
            Gets or sets the shipment.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.PaymentResultNotifyModel.ShipMethod">
            <summary>
            Gets or sets the ship method.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.PaymentResultNotifyModel.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.PaymentResultNotifyModel.PaymentSuccess">
            <summary>
            Gets or sets a value indicating whether or not the payment was successful
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.PaymentResultNotifyModel.ApproveOrderCreation">
            <summary>
            Gets or sets a value indicating whether or not the payment result approved the order creation
            </summary>
        </member>
        <member name="T:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel">
            <summary>
            Defines a PaymentResultMonitorModel
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel.Payment">
            <summary>
            Gets or sets the <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel.Invoice">
            <summary>
            Gets or sets the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel.Shipment">
            <summary>
            Gets or sets the shipment.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel.ShipMethod">
            <summary>
            Gets or sets the ship method.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel.PaymentSuccess">
            <summary>
            Gets or sets a value indicating whether or not the payment was successful
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel.ApproveOrderCreation">
            <summary>
            Gets or sets a value indicating whether or not the payment result approved the order creation
            </summary>
        </member>
        <member name="T:NKart.Core.Models.MonitorModels.ShipmentResultNotifyModel">
            <summary>
            Represents a ShippingResultModel
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.ShipmentResultNotifyModel.Shipment">
            <summary>
            Gets or sets the shipment.
            </summary>
            <value>
            The shipment.
            </value>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.ShipmentResultNotifyModel.Invoice">
            <summary>
            Gets or sets the invoice.
            </summary>
            <value>
            The invoice.
            </value>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.ShipmentResultNotifyModel.ShipMethod">
            <summary>
            Gets or sets the ship method.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.MonitorModels.ShipmentResultNotifyModel.CurrencySymbol">
            <summary>
            Gets or sets the currency symbol.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.AuditLog">
            <summary>
            The audit log.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog._entityKey">
            <summary>
            The entity key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog._entityTfKey">
            <summary>
            The reference type.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog._message">
            <summary>
            The message.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog._verbosity">
            <summary>
            The verbosity.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog._extendedData">
            <summary>
            The _extended data.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog._isError">
            <summary>
            The is error.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.AuditLog.EntityKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AuditLog.EntityTfKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AuditLog.Message">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AuditLog.Verbosity">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AuditLog.ExtendedData">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AuditLog.IsError">
            <summary>
            Gets or sets a value indicating whether this is a record of an error.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.AuditLog.ExtendedDataChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The extended data changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.AuditLog.PropertySelectors">
            <summary>
            Property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog.PropertySelectors.ExtendedDataChangedSelector">
            <summary>
            The extended data changed selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog.PropertySelectors.EntityKeySelector">
            <summary>
            The entity key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog.PropertySelectors.MessageSelector">
            <summary>
            The message selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog.PropertySelectors.EntityTfKeySelector">
            <summary>
            The reference type selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog.PropertySelectors.VerbositySelector">
            <summary>
            The verbosity selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AuditLog.PropertySelectors.IsErrorSelector">
            <summary>
            The is error selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IShipmentStatus">
            <summary>
            Marker interface for the shipment status.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.OfferComponentDefinitionCollection">
            <summary>
            A collection of <see cref="T:NKart.Core.Marketing.Offer.OfferComponentConfiguration"/>s.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferComponentDefinitionCollection._addLocker">
            <summary>
            The add locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.OfferComponentDefinitionCollection.IndexOfKey(System.Guid)">
            <summary>
            Returns the index of the key in the collection or -1 if not found
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The index of the key in the collection or -1 if not found.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.OfferComponentDefinitionCollection.Add(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            The add.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Models.OfferComponentDefinitionCollection.GetKeyForItem(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            Returns the ComponentKey for the item.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.OfferRedeemed">
            <summary>
            Represents an offer redemption record.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed._offerSettingsKey">
            <summary>
            The offer settings key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed._offerCode">
            <summary>
            The offer code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed._offerProviderKey">
            <summary>
            The offer provider key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed._customerKey">
            <summary>
            The customer key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed._redeemedDate">
            <summary>
            The redemption date.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed._invoiceKey">
            <summary>
            The invoice key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed._extendedData">
            <summary>
            The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.OfferRedeemed.#ctor(System.String,System.Guid,System.Guid,System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.OfferRedeemed"/> class.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <param name="offerSettingsKey">
            The offer settings key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.OfferRedeemed.OfferSettingsKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferRedeemed.OfferCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferRedeemed.OfferProviderKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferRedeemed.CustomerKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferRedeemed.RedeemedDate">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferRedeemed.InvoiceKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferRedeemed.ExtendedData">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.OfferRedeemed.AddingEntity">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.OfferRedeemed.ExtendedDataChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the extended data collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.OfferRedeemed.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed.PropertySelectors.OfferSettingsKeySelector">
            <summary>
            The offer settings key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed.PropertySelectors.OfferCodeSelector">
            <summary>
            The offer code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed.PropertySelectors.OfferProviderKeySelector">
            <summary>
            The offer provider key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed.PropertySelectors.CustomerKeySelector">
            <summary>
            The customer key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed.PropertySelectors.RedeemedDateSelector">
            <summary>
            The redeemed date selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed.PropertySelectors.InvoiceKeySelector">
            <summary>
            The invoice key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferRedeemed.PropertySelectors.ExtendedDataChangedSelector">
            <summary>
            The extended data changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.OfferSettings">
            <summary>
            Represents marketing Offer Settings.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings._name">
            <summary>
            The offer name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings._offerCode">
            <summary>
            The offer code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings._offerProviderKey">
            <summary>
            The offer provider key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings._offerStartsDate">
            <summary>
            The offer starts date.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings._offerEndsDate">
            <summary>
            The offer ends date.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings._active">
            <summary>
            A value indicating whether or not the offer is active.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings._componentDefinitions">
            <summary>
            The <see cref="T:NKart.Core.Models.OfferComponentDefinitionCollection"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.OfferSettings.#ctor(System.String,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.OfferSettings"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer Code.
            </param>
            <param name="offerProviderKey">
            The offer Provider Key.
            </param>
        </member>
        <member name="M:NKart.Core.Models.OfferSettings.#ctor(System.String,System.String,System.Guid,NKart.Core.Models.OfferComponentDefinitionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.OfferSettings"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer Code.
            </param>
            <param name="offerProviderKey">
            The offer Provider Key.
            </param>
            <param name="componentDefinitions">
            The <see cref="T:NKart.Core.Models.OfferComponentDefinitionCollection"/>.
            </param>
        </member>
        <member name="P:NKart.Core.Models.OfferSettings.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferSettings.OfferCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferSettings.OfferProviderKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferSettings.OfferStartsDate">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferSettings.OfferEndsDate">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferSettings.Active">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferSettings.Expired">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferSettings.HasStarted">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OfferSettings.ComponentDefinitions">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.OfferSettings.ComponentDefinitionsOnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handlers the <see cref="T:NKart.Core.Models.OfferComponentDefinitionCollection"/> changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="notifyCollectionChangedEventArgs">
            The notify collection changed event args.
            </param>
        </member>
        <member name="T:NKart.Core.Models.OfferSettings.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings.PropertySelectors.OfferCodeSelector">
            <summary>
            The offer code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings.PropertySelectors.OfferProviderKeySelector">
            <summary>
            The offer provider key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings.PropertySelectors.OfferStartsDateSelector">
            <summary>
            The offer starts date selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings.PropertySelectors.OfferEndsDateSelector">
            <summary>
            The offer ends date selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings.PropertySelectors.ActiveSelector">
            <summary>
            The active selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OfferSettings.PropertySelectors.ComponentDefinitionsChangedSelector">
            <summary>
            The component configurations changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ShipmentStatus">
            <summary>
            Represents a shipment status.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.NotifiedStatusBase">
            <summary>
            The notified status base.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase._alias">
            <summary>
            The alias.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase._reportable">
            <summary>
            The reportable.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase._active">
            <summary>
            The active.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase._sortOrder">
            <summary>
            The sort order.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.NotifiedStatusBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotifiedStatusBase.Alias">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotifiedStatusBase.Reportable">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotifiedStatusBase.Active">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotifiedStatusBase.SortOrder">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.NotifiedStatusBase.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase.PropertySelectors.AliasSelector">
            <summary>
            The alias selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase.PropertySelectors.ReportableSelector">
            <summary>
            The reportable selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase.PropertySelectors.ActiveSelector">
            <summary>
            The active selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotifiedStatusBase.PropertySelectors.SortOrderSelector">
            <summary>
            The sort order selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.EntityFilterCollection">
            <summary>
            The specified filter attribute collection.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.EntityFilterCollection._addLocker">
            <summary>
            The _add locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.EntityFilterCollection.IndexOfKey(System.Guid)">
            <summary>
            The index of key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.EntityFilterCollection.Remove(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Removes the <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/> from the Specification Collection.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            Returns a value indicating whether or not the item was removed from the collection.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.EntityFilterCollection.Add(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Adds a entity collection to the collection.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Models.EntityFilterCollection.GetKeyForItem(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Gets the key for the item.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.Currency">
            <summary>
            The currency.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Currency.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Currency"/> class.
            </summary>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="symbol">
            The symbol.
            </param>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:NKart.Core.Models.Currency.CurrencyCode">
            <summary>
            Gets the ISO Currency Code
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Currency.Symbol">
            <summary>
            Gets the Currency Symbol
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Currency.Name">
            <summary>
            Gets the currency name
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IHasExtendedData">
            <summary>
            Defines a class which includes an <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IHasExtendedData.ExtendedData">
            <summary>
            Gets a collection to store custom/extended data
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IGatewayProviderMethod">
            <summary>
            Marker interface for a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> method
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICurrency.CurrencyCode">
            <summary>
            The ISO Currency Code
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICurrency.Symbol">
            <summary>
            The Currency Symbol
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICurrency.Name">
            <summary>
            The Currency Name
            </summary>
        </member>
        <member name="T:NKart.Core.Models.INotificationMethod">
            <summary>
            Represents a notification method.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMethod.Name">
            <summary>
            Gets or sets the name of the notification
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMethod.Description">
            <summary>
            Gets or sets a brief description of the notification
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMethod.ProviderKey">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMethod.ServiceCode">
            <summary>
            Gets or sets the service code
            </summary>
        </member>
        <member name="T:NKart.Core.Models.INotificationMessage">
            <summary>
            Defines a notification message
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.MonitorKey">
            <summary>
            Gets or sets an optional key for Notification Monitor Rule
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.MethodKey">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.INotificationMethod"/> key
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.Name">
            <summary>
            Gets or sets the name of the notification
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.Description">
            <summary>
            Gets or sets the  a brief description of the notification
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.FromAddress">
            <summary>
            Gets the sender's "from" address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.ReplyTo">
            <summary>
            Gets or sets the Reply To address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.BodyText">
            <summary>
            Gets or sets the path or text source
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.MaxLength">
            <summary>
            Gets or sets the  maximum length of the message to be sent
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.BodyTextIsFilePath">
            <summary>
            Gets or sets a value indicating whether or not the string value of Message is actually a path to a file to read
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.Recipients">
            <summary>
            Gets or sets the recipients of the notification
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.SendToCustomer">
            <summary>
            Gets or sets a value indicating whether or not this notification should be sent to the customer
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotificationMessage.Disabled">
            <summary>
            Gets or sets a value indicating whether or not this notification is disabled
            </summary>
        </member>
        <member name="M:NKart.Core.Models.INotificationMessage.ShallowCopy">
            <summary>
            Clones the message.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.INotificationMessage"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.INotifyStatus">
            <summary>
            Represents a status
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotifyStatus.Name">
            <summary>
            Gets or sets the name of the status
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotifyStatus.Alias">
            <summary>
            Gets or sets the alias of the  status
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotifyStatus.Reportable">
            <summary>
            Gets or sets a value indicating whether or not to report on this status
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotifyStatus.Active">
            <summary>
            Gets or sets a value indicating whether or not this  status is active
            </summary>
        </member>
        <member name="P:NKart.Core.Models.INotifyStatus.SortOrder">
            <summary>
            Gets or sets the sort order of the  status
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IOrder">
            <summary>
            Defines an Order
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IOrder.InvoiceKey">
            <summary>
            Gets the invoice 'key'
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IOrder.OrderNumberPrefix">
            <summary>
            Gets or sets the order number prefix
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IOrder.OrderNumber">
            <summary>
            Gets or sets the order number
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IOrder.OrderDate">
            <summary>
            Gets or sets the date of the order
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IOrder.OrderStatusKey">
            <summary>
            Gets the order status key
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IOrder.OrderStatus">
            <summary>
            Gets or sets the <see cref="T:NKart.Core.Models.IOrderStatus"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IOrder.Exported">
            <summary>
            Gets or sets a value indicating whether or not this order has been exported to an external system
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IOrderStatus">
            <summary>
            Marker interface for an order status
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IPaymentMethod">
            <summary>
            Represents a payment method
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPaymentMethod.ProviderKey">
            <summary>
            Gets the key associated with the gateway provider for the payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPaymentMethod.Name">
            <summary>
            Gets or sets the name of the payment method
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPaymentMethod.Description">
            <summary>
            Gets or sets the description of the payment method
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPaymentMethod.PaymentCode">
            <summary>
            Gets or sets the payment code of the payment method
            </summary>
        </member>
        <member name="T:NKart.Core.Models.NotificationMessage">
            <summary>
            Defines a notification message
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._methodKey">
            <summary>
            The notification method key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._bodyText">
            <summary>
            The body text.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._fromAddress">
            <summary>
            The from address.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._replyTo">
            <summary>
            The reply to.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._maxLength">
            <summary>
            The max length.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._bodyTextIsFilePath">
            <summary>
            The body text is file path.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._monitorKey">
            <summary>
            The monitor key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._recipients">
            <summary>
            The _recipients.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._sendToCustomer">
            <summary>
            The send to customer.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage._disabled">
            <summary>
            The disabled.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.NotificationMessage.#ctor(System.Guid,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.NotificationMessage"/> class.
            </summary>
            <param name="notificationMethodKey">
            The notification method key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="fromAddress">
            The from address.
            </param>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.MethodKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.Description">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.FromAddress">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.ReplyTo">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.BodyText">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.MaxLength">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.BodyTextIsFilePath">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.MonitorKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.Recipients">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.SendToCustomer">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMessage.Disabled">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.NotificationMessage.ShallowCopy">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.NotificationMessage.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.DescriptionSelector">
            <summary>
            The description selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.FromSelector">
            <summary>
            The from selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.ReplyToSelector">
            <summary>
            The reply to selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.MaxLengthSelector">
            <summary>
            The max length selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.MessageSelector">
            <summary>
            The message selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.MessageIsFilePathSelector">
            <summary>
            The message is file path selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.MonitorKeySelector">
            <summary>
            The monitor key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.RecipientsSelector">
            <summary>
            The recipients selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.SendToCustomerSelector">
            <summary>
            The send to customer selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMessage.PropertySelectors.DisabledSelector">
            <summary>
            The disabled selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.NotificationMethod">
            <summary>
            Represents a notification method
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMethod._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMethod._providerKey">
            <summary>
            The provider key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMethod._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMethod._description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMethod._serviceCode">
            <summary>
            The service code.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.NotificationMethod.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.NotificationMethod"/> class.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.NotificationMethod.ProviderKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMethod.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMethod.Description">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.NotificationMethod.ServiceCode">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.NotificationMethod.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMethod.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMethod.PropertySelectors.DescriptionSelector">
            <summary>
            The description selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.NotificationMethod.PropertySelectors.ServiceCodeSelector">
            <summary>
            The service code selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Order">
            <summary>
            Represents an Order
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order._invoiceKey">
            <summary>
            The invoice key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order._orderNumberPrefix">
            <summary>
            The order number prefix.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order._orderNumber">
            <summary>
            The order number.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order._orderDate">
            <summary>
            The order date.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order._orderStatus">
            <summary>
            The order status.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order._exported">
            <summary>
            True or false indicating whether or not this order has been exported.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order._examineId">
            <summary>
            The examine id.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order._items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Order.#ctor(NKart.Core.Models.IOrderStatus,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Order"/> class.
            </summary>
            <param name="orderStatus">
            The order status.
            </param>
            <param name="invoiceKey">
            The invoice key.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Order.#ctor(NKart.Core.Models.IOrderStatus,System.Guid,NKart.Core.Models.LineItemCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Order"/> class.
            </summary>
            <param name="orderStatus">
            The order status.
            </param>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <param name="lineItemCollection">
            The line item collection.
            </param>
        </member>
        <member name="P:NKart.Core.Models.Order.InvoiceKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Order.OrderNumberPrefix">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Order.OrderNumber">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Order.OrderDate">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Order.OrderStatusKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Order.OrderStatus">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Order.Exported">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Order.Items">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Order.ExamineId">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Order.Accept(NKart.Core.Models.ILineItemVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.Order.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order.PropertySelectors.InvoiceKeySelector">
            <summary>
            The invoice key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order.PropertySelectors.OrderNumberPrefixSelector">
            <summary>
            The order number prefix selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order.PropertySelectors.OrderNumberSelector">
            <summary>
            The order number selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order.PropertySelectors.OrderDateSelector">
            <summary>
            The order date selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order.PropertySelectors.OrderStatusSelector">
            <summary>
            The order status selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Order.PropertySelectors.ExportedSelector">
            <summary>
            The exported selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.OrderCollection">
            <summary>
            The order collection.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.OrderStatus">
            <summary>
            Represents an order status.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.PaymentMethod">
            <summary>
            Represents a payment method
            </summary>
        </member>
        <member name="F:NKart.Core.Models.PaymentMethod._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.PaymentMethod._providerKey">
            <summary>
            The provider key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.PaymentMethod._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.PaymentMethod._description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.PaymentMethod._paymentCode">
            <summary>
            The payment code.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.PaymentMethod.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.PaymentMethod"/> class.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.PaymentMethod.ProviderKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.PaymentMethod.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.PaymentMethod.Description">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.PaymentMethod.PaymentCode">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.PaymentMethod.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.PaymentMethod.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.PaymentMethod.PropertySelectors.DescriptionSelector">
            <summary>
            The description selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.PaymentMethod.PropertySelectors.PaymentCodeSelector">
            <summary>
            The payment code selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.EntityTypeField">
            <summary>
            Type fields for Merchello entities
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.EntityTypeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.TypeFields.EntityTypeField"/> class.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.CustomTypeFields">
            <summary>
            Gets the custom type fields.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.CampaignOffer">
            <summary>
            Gets the campaign offer.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.Customer">
            <summary>
            Gets the customer entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.EntityCollection">
            <summary>
            Gets the entity collection.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.GatewayProvider">
            <summary>
            Gets the GatewayProvider entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.Invoice">
            <summary>
            Gets the Invoice entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.ItemCache">
            <summary>
            Gets the ItemCache entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.Order">
            <summary>
            Gets the order entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.Payment">
            <summary>
            Gets the payment entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.Product">
            <summary>
            Gets the product entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.ProductOption">
            <summary>
            Gets the product option entity type field.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.Shipment">
            <summary>
            Gets the shipment entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.Warehouse">
            <summary>
            Gets the Warehouse entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.WarehouseCatalog">
            <summary>
            Gets the warehouse catalog entity type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EntityTypeField.Entities">
            <summary>
            Gets the entities.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.EntityTypeField.BuildCache">
            <summary>
            The build cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.EntityTypeField.GetCustom(System.String)">
            <summary>
            Returns a custom address or NullTypeField TypeKey (GUID)
            </summary>
            <param name="alias">The alias of the custom entities</param>
            <returns>An object of <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/></returns>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.IEntityTypeField">
            <summary>
            Defines the EntityTypeField.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.Customer">
            <summary>
            Gets the customer entity type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.EntityCollection">
            <summary>
            Gets the entity collection entity type.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.GatewayProvider">
            <summary>
            Gets the GatewayProvider entity type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.Invoice">
            <summary>
            Gets the Invoice entity type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.ItemCache">
            <summary>
            Gets the ItemCache entity type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.Order">
            <summary>
            Gets the Order entity type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.Payment">
            <summary>
            Gets the Payment entity type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.Product">
            <summary>
            Gets the Product entity type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.Shipment">
            <summary>
            Gets the Shipment Entity type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.Warehouse">
            <summary>
            Gets the Warehouse Entity type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IEntityTypeField.WarehouseCatalog">
            <summary>
            Gets the WarehouseCatalog entity type
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.AppliedPaymentTypeField">
            <summary>
            Indicates whether a shopping cart basket is either a "basket" or a "wishlist" representation
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.AppliedPaymentTypeField.GetCustom(System.String)">
            <summary>
            Returns a custom basket or a NullTypeField
            </summary>
            <param name="alias">The alias of the custom basket</param>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.AppliedPaymentTypeField.Credit">
            <summary>
            A credit applied payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.AppliedPaymentTypeField.Debit">
            <summary>
            A debit applied payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.AppliedPaymentTypeField.Void">
            <summary>
            A void applied payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.AppliedPaymentTypeField.Denied">
            <summary>
            A denied applied payment
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.IAppliedPaymentTypeField">
            <summary>
            Defines a TransactionTypeField
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IAppliedPaymentTypeField.Credit">
            <summary>
            The Credit type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IAppliedPaymentTypeField.Debit">
            <summary>
            The Debit type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IAppliedPaymentTypeField.Void">
            <summary>
            The Void Type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IAppliedPaymentTypeField.Denied">
            <summary>
            The Denied Type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IAppliedPaymentTypeField.Refund">
            <summary>
            The Refund Type
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.IGatewayProviderTypeField">
            <summary>
            Defines the provider gateway type field
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IGatewayProviderTypeField.Payment">
            <summary>
            The <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/> for the payment providers
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IGatewayProviderTypeField.Notification">
            <summary>
            The <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/> for the notification providers
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IGatewayProviderTypeField.Shipping">
            <summary>
            The <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/> for shipping providers
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IGatewayProviderTypeField.Taxation">
            <summary>
            The <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/> for the taxation providers
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.GatewayProviderTypeField.Payment">
            <summary>
            Indicates the gateway provider is for payments
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.GatewayProviderTypeField.Notification">
            <summary>
            Indicates the gateway provider is for Notifications
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.GatewayProviderTypeField.Shipping">
            <summary>
            Indicates the gateway provider is for shipping
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.GatewayProviderTypeField.Taxation">
            <summary>
            Indicates the gateway provider is for taxation
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.GatewayProviderTypeField.GetCustom(System.String)">
            <summary>
            Returns a gateway provider typefield or NullTypeField TypeKey (Guid)
            </summary>
            <param name="alias">The alias of the custom type field</param>
            <returns>An object of <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/></returns>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.IAddressTypeField">
            <summary>
            Defines an AddressTypeField
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IAddressTypeField.Shipping">
            <summary>
            The residential type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IAddressTypeField.Billing">
            <summary>
            The commercial type
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.IItemCacheTypeField">
            <summary>
            Defines a BasketTypeField
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IItemCacheTypeField.Basket">
            <summary>
            The basket type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IItemCacheTypeField.Wishlist">
            <summary>
            The wishlist type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IItemCacheTypeField.Checkout">
            <summary>
            The checkout type
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.ILineItemTypeField">
            <summary>
            The LineItemTypeField interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ILineItemTypeField.Product">
            <summary>
            Gets the product line item type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ILineItemTypeField.Shipping">
            <summary>
            Gets the shipping line item type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ILineItemTypeField.Tax">
            <summary>
            Gets the tax line item type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ILineItemTypeField.Discount">
            <summary>
            Gets the discount line item type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ILineItemTypeField.Adjustment">
            <summary>
            Gets the adjustment line item type.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.IPaymentMethodTypeField">
            <summary>
            Defines a PaymentTypeField
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IPaymentMethodTypeField.Cash">
            <summary>
            The cash type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IPaymentMethodTypeField.CreditCard">
            <summary>
            The credit card type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.IPaymentMethodTypeField.PurchaseOrder">
            <summary>
            The purchase order type
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.IProductTypeField">
            <summary>
            Defines the ProductTypeField
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.ITypeFieldMapper`1">
            <summary>
            Defines a TypeFieldMapper
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ITypeFieldMapper`1.CustomTypeFields">
            <summary>
            Gets the collection of custom type fields.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.ITypeFieldMapper`1.GetTypeField(System.Guid)">
            <summary>
            Returns the enumerated value from the TypeKey
            </summary>
            <param name="key"><see cref="T:System.Guid"/></param>        
        </member>
        <member name="M:NKart.Core.Models.TypeFields.ITypeFieldMapper`1.GetTypeField(`0)">
            <summary>
            Returns a <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/> from an enumerated value
            </summary>        
        </member>
        <member name="T:NKart.Core.Models.TypeFields.EnumTypeFieldConverter">
            <summary>
            Utility class to for converting type fields.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EnumTypeFieldConverter.Address">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.TypeFields.IAddressTypeField"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EnumTypeFieldConverter.ItemItemCache">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.TypeFields.IItemCacheTypeField"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EnumTypeFieldConverter.LineItemType">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.TypeFields.ILineItemTypeField"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EnumTypeFieldConverter.PaymentMethod">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.TypeFields.IPaymentMethodTypeField"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EnumTypeFieldConverter.AppliedPayment">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.TypeFields.IAppliedPaymentTypeField"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EnumTypeFieldConverter.Product">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.TypeFields.IAppliedPaymentTypeField"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EnumTypeFieldConverter.EntityType">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.TypeFields.IEntityTypeField"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.EnumTypeFieldConverter.GatewayProvider">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.TypeFields.IGatewayProviderTypeField"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.LineItemTypeField">
            <summary>
            The line item type field.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.LineItemTypeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.TypeFields.LineItemTypeField"/> class.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.LineItemTypeField.Product">
            <summary>
            Gets the product.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.LineItemTypeField.Shipping">
            <summary>
            Gets the shipping.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.LineItemTypeField.Tax">
            <summary>
            Gets the tax.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.LineItemTypeField.Discount">
            <summary>
            Gets the discount.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.LineItemTypeField.Adjustment">
            <summary>
            Gets the adjustment.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.LineItemTypeField.LineItems">
            <summary>
            Gets the line items.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.LineItemTypeField.CustomTypeFields">
            <summary>
            Gets the custom type fields.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.LineItemTypeField.BuildCache">
            <summary>
            The build cache.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.ProductTypeField">
            <summary>
            Product Types
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ProductTypeField.CustomTypeFields">
            <summary>
            Gets the custom type fields.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ProductTypeField.Products">
            <summary>
            Gets the products.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.ProductTypeField.BuildCache">
            <summary>
            The build cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.ProductTypeField.GetCustom(System.String)">
            <summary>
            Returns a product type or NullTypeField
            </summary>
            <param name="alias">The alias of the product type</param>
            <returns>An object of <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/></returns>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.TypeFieldMapper`1">
            <summary>
            The type field mapper.
            </summary>
            <typeparam name="T">
            The type of TypeField
            </typeparam>
        </member>
        <member name="F:NKart.Core.Models.TypeFields.TypeFieldMapper`1.CachedTypeFields">
            <summary>
            The cached type fields.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.TypeFieldMapper`1.CustomTypeFields">
            <summary>
            Gets the custom type fields.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.TypeFieldMapper`1.BuildCache">
            <summary>
            Builds the TypeField cache for the respective type
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.TypeFieldMapper`1.GetTypeField(System.Guid)">
            <summary>
            Returns the respective enum value for a given <see cref="T:NKart.Core.Models.TypeFields.TypeField"/> TypeKey
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.TypeFieldMapper`1.GetTypeField(`0)">
            <summary>
            Returns a typefield for a given key
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.TypeFieldMapper`1.AddUpdateCache(`0,NKart.Core.Models.TypeFields.ITypeField)">
            <summary>
            Adds a key value pair to the dictionary
            </summary>
            <param name="key"></param>
            <param name="typeField"></param>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.TypeFieldMapper`1.Fields">
            <summary>
            A collection of custom typefields from the configuration file
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.TypeFieldMapper`1.GetTypeField(NKart.Core.Configuration.Outline.TypeFieldElement)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.TypeFields.TypeField"/> from a configuration file element
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.TypeFieldMapper`1.GetCustom(System.String)">
            <summary>
            The get custom.
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.TypeFieldMapper`1.Custom(System.String)">
            <summary>
            Returns a custom <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/> from the Merchello configuration section
            </summary>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.TypeFieldMapperBase">
            <summary>
            The type field mapper base.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.TypeFieldMapperBase.NotFound">
            <summary>
            Gets the not found.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.AddressTypeField">
            <summary>
            Identifies an address as either shipping or billing
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.AddressTypeField.Shipping">
            <summary>
            Indicates the address is a residential address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.AddressTypeField.Billing">
            <summary>
            Indicates the address is a billing address
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.AddressTypeField.GetCustom(System.String)">
            <summary>
            Returns a custom address or NullTypeField TypeKey (Guid)
            </summary>
            <param name="alias">The alias of the custom address</param>
            <returns>An object of <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/></returns>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.ItemCacheTypeField">
            <summary>
            Indicates whether a shopping cart basket is either a "basket" or a "wishlist" representation
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.ItemCacheTypeField.GetCustom(System.String)">
            <summary>
            Returns a custom basket or a NullTypeField
            </summary>
            <param name="alias">The alias of the custom basket</param>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ItemCacheTypeField.Basket">
            <summary>
            Default ecommerce basket item cache
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ItemCacheTypeField.Backoffice">
            <summary>
            Default ecommerce basket item cache
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ItemCacheTypeField.Wishlist">
            <summary>
            The Wishlist item cache
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ItemCacheTypeField.Checkout">
            <summary>
            The Checkout item cache
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ITypeField.Alias">
            <summary>
            The unique alias of the TypeField
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ITypeField.Name">
            <summary>
            The descriptive name of the TypeField
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.ITypeField.TypeKey">
            <summary>
            The key associated with the TypeField
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.PaymentMethodTypeField">
            <summary>
            The payment method type field.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.PaymentMethodTypeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.TypeFields.PaymentMethodTypeField"/> class.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.PaymentMethodTypeField.CustomTypeFields">
            <summary>
            Gets the custom type fields.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.PaymentMethodTypeField.Cash">
            <summary>
            Gets a value indicating the payment method is cash
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.PaymentMethodTypeField.Redirect">
            <summary>
            Gets a value indicating the payment method is based off a redirect.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.PaymentMethodTypeField.CreditCard">
            <summary>
            Gets a value indicating the payment method is credit card
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.PaymentMethodTypeField.PurchaseOrder">
            <summary>
            Gets a value indicating the payment method is purchase order
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.PaymentMethodTypeField.CustomerCredit">
            <summary>
            Gets a value indicating the payment method is a customer credit.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.PaymentMethodTypeField.PaymentMethods">
            <summary>
            Gets the payment methods.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.PaymentMethodTypeField.BuildCache">
            <summary>
            The build cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.PaymentMethodTypeField.GetCustom(System.String)">
            <summary>
            Returns a custom payment methods or a NullTypeField
            </summary>
            <param name="alias">The alias of the custom payment method</param>
            <returns>An object of <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/></returns>
        </member>
        <member name="T:NKart.Core.Models.TypeFields.TypeField">
            <summary>
            Wrapper for the TypeFieldElement configuration class.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TypeFields.TypeField._alias">
            <summary>
            The alias of the type file.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TypeFields.TypeField._name">
            <summary>
            The name of the type field.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TypeFields.TypeField._typeKey">
            <summary>
            The GUID key representing the type - generally "TfKey".
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TypeFields.TypeField.#ctor(System.String,System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.TypeFields.TypeField"/> class.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.TypeField.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.TypeField.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.TypeFields.TypeField.TypeKey">
            <summary>
            Gets the type key.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Address">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Address.#ctor">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.Address1">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.Address2">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.Locality">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.Region">
            <summary>
            Gets or sets the state or province of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Address.PostalCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.CountryCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.Phone">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.Email">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.Organization">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.IsCommercial">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Address.AddressType">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Address.Equals(NKart.Core.Models.IAddress)">
            <summary>
            Overrides the default equals comparison method
            </summary>
            <param name="other">
            The "other" address to compare to "this" address
            </param>
            <returns>
            A value indicating whether or not the addresses are to be considered equal
            </returns>
        </member>
        <member name="T:NKart.Core.Models.AppliedPayment">
            <summary>
            The applied payment.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment._invoiceKey">
            <summary>
            The invoice key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment._paymentKey">
            <summary>
            The payment key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment._appliedPaymentTfKey">
            <summary>
            The applied payment type field key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment._description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment._amount">
            <summary>
            The amount.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment._exported">
            <summary>
            The exported
            </summary>
        </member>
        <member name="M:NKart.Core.Models.AppliedPayment.#ctor(System.Guid,System.Guid,NKart.Core.AppliedPaymentType)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.AppliedPayment"/> class.
            </summary>
            <param name="paymentKey">
            The payment key.
            </param>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <param name="appliedPaymentType">
            The applied payment type.
            </param>
        </member>
        <member name="M:NKart.Core.Models.AppliedPayment.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.AppliedPayment"/> class.
            </summary>
            <param name="paymentKey">
            The payment key.
            </param>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <param name="appliedPaymentTfKey">
            The applied payment type field key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.AppliedPayment.PaymentKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AppliedPayment.InvoiceKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AppliedPayment.AppliedPaymentTfKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AppliedPayment.Description">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AppliedPayment.Amount">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AppliedPayment.Exported">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.AppliedPayment.TransactionType">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.AppliedPayment.PropertySelectors">
            <summary>
            Property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment.PropertySelectors.AppliedPaymentTypeFieldSelector">
            <summary>
            The applied payment type field selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment.PropertySelectors.DescriptionSelector">
            <summary>
            The description selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment.PropertySelectors.AmountSelector">
            <summary>
            The amount selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.AppliedPayment.PropertySelectors.ExportedSelector">
            <summary>
            The exported selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Country">
            <summary>
            Implementation of Country
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Country._countryCode">
            <summary>
            The country code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Country._name">
            <summary>
            The English name of the country.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Country._provinces">
            <summary>
            The provinces.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Country.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Country"/> class.
            </summary>
            <param name="countryCode">
            The country code.
            </param>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Country.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{NKart.Core.Models.IProvince})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Country"/> class.
            </summary>
            <param name="countryCode">
            The country code.
            </param>
            <param name="name">
            The name of the country.
            </param>
            <param name="provinces">
            The provinces.
            </param>
        </member>
        <member name="P:NKart.Core.Models.Country.CountryCode">
            <summary>
            Gets the two letter ISO Region code
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Country.Name">
            <summary>
            Gets the English name associated with the region
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Country.Iso">
            <summary>
            Gets or sets the ISO code associated with the region
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Country.ProvinceLabel">
            <summary>
            Gets or sets the label associated with the province list.  (ex. for US this would be 'States')
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Country.Provinces">
            <summary>
            Gets the Provinces (if any) associated with the country
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Customer">
            <summary>
            The customer.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer._firstName">
            <summary>
            The first name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer._lastName">
            <summary>
            The last name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer._email">
            <summary>
            The email.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer._loginName">
            <summary>
            The login name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer._taxExempt">
            <summary>
            The tax exempt.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer._notes">
            <summary>
            The _notes.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer._examineId">
            <summary>
            The examine id.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer._addresses">
            <summary>
            The addresses.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Customer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Customer"/> class.
            </summary>
            <param name="loginName">
            The login Name associated with the membership provider users
            </param>
        </member>
        <member name="P:NKart.Core.Models.Customer.FullName">
            <summary>
            Gets the full name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.Customer.FirstName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Customer.LastName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Customer.Email">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Customer.LoginName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Customer.TaxExempt">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Customer.Notes">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Customer.Addresses">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Customer.ExamineId">
            <summary>
            Gets or sets the examine id.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Customer.PropertySelectors">
            <summary>
            Property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer.PropertySelectors.LoginNameSelector">
            <summary>
            The login name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer.PropertySelectors.FirstNameSelector">
            <summary>
            The first name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer.PropertySelectors.LastNameSelector">
            <summary>
            The last name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer.PropertySelectors.EmailSelector">
            <summary>
            The email selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Customer.PropertySelectors.TaxExemptSelector">
            <summary>
            The tax exempt selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.CustomerAddress">
            <summary>
            The customer address.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._customerKey">
            <summary>
            The customer key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._label">
            <summary>
            The label.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._fullName">
            <summary>
            The full name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._company">
            <summary>
            The company.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._addressTypeFieldKey">
            <summary>
            The address type field key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._address1">
            <summary>
            The address 1.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._address2">
            <summary>
            The address 2.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._locality">
            <summary>
            The locality.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._region">
            <summary>
            The region.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._postalCode">
            <summary>
            The postal code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._countryCode">
            <summary>
            The country code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._phone">
            <summary>
            The phone.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress._isDefault">
            <summary>
            The is default.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.CustomerAddress.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.CustomerAddress"/> class.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.CustomerKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.Label">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.FullName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.Company">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.AddressTypeFieldKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.Address1">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.Address2">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.Locality">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.Region">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.PostalCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.CountryCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.Phone">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.AddressType">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CustomerAddress.IsDefault">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.CustomerAddress.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.LabelSelector">
            <summary>
            The label selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.FullNameSelector">
            <summary>
            The full name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.CompanySelector">
            <summary>
            The company selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.AddressTypeFieldSelector">
            <summary>
            The address type field selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.Address1Selector">
            <summary>
            The address 1 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.Address2Selector">
            <summary>
            The address 2 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.LocalitySelector">
            <summary>
            The locality selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.RegionSelector">
            <summary>
            The region selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.PostalCodeSelector">
            <summary>
            The postal code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.CountryCodeSelector">
            <summary>
            The country code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.PhoneSelector">
            <summary>
            The phone selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.CustomerKeySelector">
            <summary>
            The customer key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerAddress.PropertySelectors.IsDefaultSelector">
            <summary>
            The is default selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.CustomerBase">
            <summary>
            Represents a customer base class
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerBase._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerBase._lastActivityDate">
            <summary>
            The last activity date.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerBase._extendedData">
            <summary>
            The _extended data.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.CustomerBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.CustomerBase"/> class.
            </summary>
            <param name="isAnonymous">
            The is anonymous.
            </param>
        </member>
        <member name="M:NKart.Core.Models.CustomerBase.#ctor(System.Boolean,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.CustomerBase"/> class.
            </summary>
            <param name="isAnonymous">
            The is anonymous.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="P:NKart.Core.Models.CustomerBase.LastActivityDate">
            <summary>
            Gets or sets date the customer was last active on the site
            </summary>
        </member>
        <member name="P:NKart.Core.Models.CustomerBase.IsAnonymous">
            <summary>
            Gets a value indicating whether or not this customer is an anonymous customer 
            </summary>
        </member>
        <member name="P:NKart.Core.Models.CustomerBase.ExtendedData">
            <summary>
            Gets a collection to store custom/extended data for the customer
            </summary>
        </member>
        <member name="M:NKart.Core.Models.CustomerBase.AddingEntity">
            <summary>
            Asserts that the last activity date is set to the current date time
            </summary>
        </member>
        <member name="M:NKart.Core.Models.CustomerBase.UpdatingEntity">
            <summary>
            Asserts that the last activity date is set to the current date time
            </summary>
        </member>
        <member name="M:NKart.Core.Models.CustomerBase.ExtendedDataChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The extended data changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.CustomerBase.PropertySelectors">
            <summary>
            Property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerBase.PropertySelectors.LastActivityDateSelector">
            <summary>
            The last activity date selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CustomerBase.PropertySelectors.ExtendedDataChangedSelector">
            <summary>
            The extended data changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ExtendedDataCollection">
            <summary>
            Represents an ExtendedDataCollection
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ExtendedDataCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ExtendedDataCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/> class.
            </summary>
            <param name="persistedXml">
            The persisted xml.
            </param>
        </member>
        <member name="E:NKart.Core.Models.ExtendedDataCollection.CollectionChanged">
            <summary>
            The collection changed.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ExtendedDataCollection.SetValue(System.String,System.String)">
            <summary>
            Sets an extended data value.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ExtendedDataCollection.RemoveValue(System.String)">
            <summary>
            Removes a value from extended data.
            </summary>
            <param name="key">
            The key.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ExtendedDataCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ExtendedDataCollection.GetValue(System.String)">
            <summary>
            Gets a value from the collection.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.ExtendedDataCollection.SerializeToXml">
            <summary>
            Serializes the collection to an Xml representation.
            </summary>
            <returns>
            The Xml representation.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.ExtendedDataCollection.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The on collection changed.
            </summary>
            <param name="args">
            The args.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ExtendedDataCollection.AssertValidKey(System.String)">
            <summary>
            Ensures that a key is value.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.GatewayProviderSettings">
            <summary>
            Defines a generic Gateway Provider
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings._description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings._providerTfKey">
            <summary>
            The provider type field key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings._extendedData">
            <summary>
            The extended data.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings._encryptExtendedData">
            <summary>
            The encrypt extended data.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.GatewayProviderSettings.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.GatewayProviderSettings.Description">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.GatewayProviderSettings.ProviderTfKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.GatewayProviderSettings.ExtendedData">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.GatewayProviderSettings.EncryptExtendedData">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.GatewayProviderSettings.Activated">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.GatewayProviderSettings.GatewayProviderType">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.GatewayProviderSettings.AddingEntity">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.GatewayProviderSettings.ExtendedDataChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the extended data collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.GatewayProviderSettings.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings.PropertySelectors.DescriptionSelector">
            <summary>
            The description selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings.PropertySelectors.ProviderTfKeySelector">
            <summary>
            The provider type field key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings.PropertySelectors.ExtendedDataChangedSelector">
            <summary>
            The extended data changed selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.GatewayProviderSettings.PropertySelectors.EncryptExtendedDataSelector">
            <summary>
            The encrypt extended data selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IAddress">
            <summary>
            Represents a standard address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.Name">
            <summary>
            Gets or sets the name for the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.Address1">
            <summary>
            Gets or sets the first address line
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.Address2">
            <summary>
            Gets or sets the second address line
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.Locality">
            <summary>
            Gets or sets the city or locality of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.Region">
            <summary>
            Gets or sets the state or province of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.PostalCode">
            <summary>
            Gets or sets the postal code of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.CountryCode">
            <summary>
            Gets or sets the country code of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.Phone">
            <summary>
            Gets or sets the telephone number of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.Email">
            <summary>
            Gets or sets the email address associated with the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.Organization">
            <summary>
            Gets or sets the organization or company name associated with the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAddress.IsCommercial">
            <summary>
            Gets or sets a value indicating whether or not this record represents commercial or business address
            </summary>
            <remarks>
            Used by certain shipping providers in shipping rate quotations
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IAddress.AddressType">
            <summary>
            Gets or sets the address type.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IAppliedPayment">
            <summary>
            Represents an Applied Payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAppliedPayment.PaymentKey">
            <summary>
            Gets the payment key
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAppliedPayment.InvoiceKey">
            <summary>
            Gets the invoice key of the invoice associated with this transaction.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAppliedPayment.AppliedPaymentTfKey">
            <summary>
            Gets the type field for the Applied Payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAppliedPayment.Description">
            <summary>
            Gets or sets the description for the transaction.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAppliedPayment.Amount">
            <summary>
            Gets or sets the amount of the Transaction
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IAppliedPayment.Exported">
            <summary>
            Gets or sets a value indicating whether or not the transaction has been exported.
            </summary>
            <remarks>
            This is not actually used by Merchello but is useful in some implementations.
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IAppliedPayment.TransactionType">
            <summary>
            Gets or sets the transaction type associated with this transaction.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ICustomer">
            <summary>
            Defines a Merchello customer
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomer.FullName">
            <summary>
            Gets the full name of the customer
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomer.FirstName">
            <summary>
            Gets or sets first name of the customer
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomer.LastName">
            <summary>
            Gets or sets last name of the customer
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomer.Email">
            <summary>
            Gets or sets email address of the customer
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomer.LoginName">
            <summary>
            Gets the login name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomer.TaxExempt">
            <summary>
            Gets or sets a value indicating whether tax exempt.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomer.Addresses">
            <summary>
            Gets the addresses.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ICustomerAddress">
            <summary>
            Defines a Merchello customer
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.CustomerKey">
            <summary>
            Gets the customer key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.Label">
            <summary>
            Gets or sets the descriptive label for the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.FullName">
            <summary>
            Gets or sets the full name for the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.Company">
            <summary>
            Gets or sets company name for the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.AddressTypeFieldKey">
            <summary>
            Gets or sets type of address indicator
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.Address1">
            <summary>
            Gets or sets first address line
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.Address2">
            <summary>
            Gets or sets second address line
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.Locality">
            <summary>
            Gets or sets the city or locality of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.Region">
            <summary>
            Gets or sets state or province of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.PostalCode">
            <summary>
            Gets or sets the postal code of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.CountryCode">
            <summary>
            Gets or sets the country code of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.Phone">
            <summary>
            Gets or sets the telephone number of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.AddressType">
            <summary>
            Gets or sets the <see cref="P:NKart.Core.Models.ICustomerAddress.AddressType"/> of the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerAddress.IsDefault">
            <summary>
            Gets or sets a value indicating whether is default.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ICustomerBase">
            <summary>
            Defines the customer base class 
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerBase.LastActivityDate">
            <summary>
            Gets or sets the date the customer was last active on the site
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICustomerBase.IsAnonymous">
            <summary>
            Gets a value indicating whether or not this customer is anonymous
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IGatewayProviderSettings">
            <summary>
            Defines a Gateway Provider
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IGatewayProviderSettings.ProviderTfKey">
            <summary>
            Gets or sets the type field key for the provider
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IGatewayProviderSettings.Name">
            <summary>
            Gets or sets the name of the provider
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IGatewayProviderSettings.Description">
            <summary>
            Gets or sets the description of the provider
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IGatewayProviderSettings.EncryptExtendedData">
            <summary>
            Gets or sets a value indicating whether or the ExtendedData collection should be encrypted before persisted.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IGatewayProviderSettings.Activated">
            <summary>
            Gets a value indicating whether or not this provider is a "registered" and active provider.
            </summary>
            <remarks>
            Any provider returned from the <see cref="T:NKart.Core.Services.GatewayProviderService"/> would be an active provider
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IGatewayProviderSettings.GatewayProviderType">
            <summary>
            Gets the type of the Gateway Provider
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IInvoice">
            <summary>
            Defines an invoice.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.CustomerKey">
            <summary>
            Gets or sets the unique customer 'key' to associated with the invoice
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.InvoiceNumberPrefix">
            <summary>
            Gets or sets the optional invoice number prefix
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.InvoiceNumber">
            <summary>
            Gets or sets the invoice number
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.PoNumber">
            <summary>
            Gets or sets the po number.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.InvoiceDate">
            <summary>
            Gets or sets the date the invoice was issued to customer
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.InvoiceStatusKey">
            <summary>
            Gets the key for the invoice status associated with this invoice
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.InvoiceStatus">
            <summary>
            Gets or sets the Invoice Status
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToName">
            <summary>
            Gets or sets the full name to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToAddress1">
            <summary>
            Gets or sets the address line 1 to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToAddress2">
            <summary>
            Gets or sets the address line 2 to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToLocality">
            <summary>
            Gets or sets the city or locality to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToRegion">
            <summary>
            Gets or sets the state, region or province to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToPostalCode">
            <summary>
            Gets or sets the postal code to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToCountryCode">
            <summary>
            Gets or sets the country code to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToEmail">
            <summary>
            Gets or sets the email address to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToPhone">
            <summary>
            Gets or sets the phone number to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.BillToCompany">
            <summary>
            Gets or sets the company name to use for billing.  Generally copied from customer address.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.CurrencyCode">
            <summary>
            Gets or sets the currency code.
            </summary>
            <remarks>
            Introduced in 1.14.0
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.Exported">
            <summary>
            Gets or sets a value indicating whether or not this invoice has been exported to an external system
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.Archived">
            <summary>
            Gets or sets a value indicating whether or not this invoice has been archived
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.Total">
            <summary>
            Gets or sets the total invoice amount
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IInvoice.Orders">
            <summary>
            Gets or sets the collection of Orders associated with the Invoice
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IInvoiceLineItem">
            <summary>
            Represents an invoice line item
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IInvoiceStatus">
            <summary>
            Marker interface for the invoice status
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IItemCache">
            <summary>
            Defines a customer item cache
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IItemCache.EntityKey">
            <summary>
            The key of the entity associated with the item cache
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IItemCache.ItemCacheTfKey">
            <summary>
            The registry type field <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/> guid typeKey
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IItemCache.ItemCacheType">
            <summary>
            The <see cref="P:NKart.Core.Models.IItemCache.ItemCacheType"/> of the customer registry
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IItemCacheLineItem">
            <summary>
            Marker interface for ICustomerItemCacheLineItem
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ILineItem">
            <summary>
            Represents a Line Item
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ILineItem.ContainerKey">
            <summary>
            Gets or sets the key of the container collection
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ILineItem.LineItemTfKey">
            <summary>
            Gets or sets the line item type field key (<see cref="T:NKart.Core.Models.TypeFields.ITypeField"/>.TypeKey) for the registry item
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ILineItem.Sku">
            <summary>
            Gets or sets SKU for the line item
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ILineItem.Name">
            <summary>
            Gets or sets the name for the line item
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ILineItem.Quantity">
            <summary>
            Gets or sets the quantity for the line item
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ILineItem.Price">
            <summary>
            Gets or sets the price for the line item
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ILineItem.Exported">
            <summary>
            Gets or sets a value indicating whether or not this line item has been exported to an external system
            </summary>
            <remarks>
            This property is not used by Merchello but is useful in some implementations.
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.ILineItem.LineItemType">
            <summary>
            Gets line item type
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ILineItem.TotalPrice">
            <summary>
            Gets total price of the line item (quantity * price)
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ILineItem.Accept(NKart.Core.Models.ILineItemVisitor)">
            <summary>
            Accept for visitor operations
            </summary>
            <param name="vistor">The <see cref="T:NKart.Core.Models.ILineItemVisitor"/></param>
        </member>
        <member name="T:NKart.Core.Models.ILineItemContainer">
            <summary>
            The LineItemContainer interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ILineItemContainer.Items">
            <summary>
            Gets the collection of <see cref="T:NKart.Core.Models.ILineItem"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ILineItemContainer.Accept(NKart.Core.Models.ILineItemVisitor)">
            <summary>
            Accepts visitor class to visit invoice line items
            </summary>
            <param name="visitor">The <see cref="T:NKart.Core.Models.ILineItemVisitor"/> class</param>
        </member>
        <member name="T:NKart.Core.Models.ILineItemVisitor">
            <summary>
            Defines a line item visitor
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IOrderLineItem">
            <summary>
            Represents anOrder Line Item
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IOrderLineItem.ShipmentKey">
            <summary>
            Gets or sets the unique key associated with the shipment record in which this item was shipped.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IOrderLineItem.BackOrder">
            <summary>
            Gets or sets a value indicating whether or not this line item represents a back order line item
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IPayment">
            <summary>
            Defines a Merchello Payment 
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.CustomerKey">
            <summary>
            Gets or sets the key of the customer associated with the Payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.PaymentMethodKey">
            <summary>
            Gets or sets the payment method key for the payment provider
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.PaymentTypeFieldKey">
            <summary>
            Gets or sets the payment type field key for the payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.PaymentMethodName">
            <summary>
            Gets or sets name of the payment method for the payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.ReferenceNumber">
            <summary>
            Gets or sets the reference number for the payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.Amount">
            <summary>
            Gets or sets the amount for the payment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.Authorized">
            <summary>
            Gets or sets a value indicating whether or not this payment has been authorized with the payment gateway provider
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.Collected">
            <summary>
            Gets or sets a value indicating whether or not this payment has been collected by the merchant
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.Voided">
            <summary>
            Gets or sets a value indicating whether the payment has been voided.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IPayment.Exported">
            <summary>
            Gets or sets a value indicating whether or not this payment has be exported to another system
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IProduct">
            <summary>
            The Product interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProduct.ProductVariantKey">
            <summary>
            Gets the product variant key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProduct.DefinesOptions">
            <summary>
            Gets a value indicating whether or not this product group defines product options.
            e.g. The product has no required options
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProduct.ProductOptions">
            <summary>
            Gets or sets the product's collection of options (Attribute selection)
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProduct.ProductVariants">
            <summary>
            Gets or sets the product's collection of <see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
            <remarks>
            A product variant is the culmination of a product with product option choices selected
            </remarks>
        </member>
        <member name="T:NKart.Core.Models.IProductAttribute">
            <summary>
            Defines a product attribute
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductAttribute.OptionKey">
            <summary>
            Gets or sets the key of the option which defines the attribute group this attribute belongs to
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductAttribute.Name">
            <summary>
            Gets or sets the name of the attribute
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductAttribute.Sku">
            <summary>
            Gets or sets the suggested SKU concatenation
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductAttribute.SortOrder">
            <summary>
            Gets or sets sort order for the product attribute with respect to an option
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductAttribute.IsDefaultChoice">
            <summary>
            Gets or sets a value indicating whether is default choice.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductAttribute.DetachedDataValues">
            <summary>
            Gets the values.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.IProductAttribute.Clone">
            <summary>
            Returns a clone of the attribute.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductAttribute"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.IProductBase">
            <summary>
            Defines a product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Sku">
            <summary>
            Gets or sets the SKU for the Product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Name">
            <summary>
            Gets or sets the name for the Product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Price">
            <summary>
            Gets or sets the price for the Product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.CostOfGoods">
            <summary>
            Gets or sets the shop's cost for the product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.SalePrice">
            <summary>
            Gets or sets the sale price of the product if on sale
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.OnSale">
            <summary>
            Gets or sets a value indicating whether or not this product is on sale
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Manufacturer">
            <summary>
            Gets or sets the manufacturer of the product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.ManufacturerModelNumber">
            <summary>
            Gets or sets the manufacturer model number of the product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Weight">
            <summary>
            Gets or sets the weight of the product - intended to be used for shipping
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Length">
            <summary>
            Gets or sets the length of the product - intended to be used for shipping
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Width">
            <summary>
            Gets or sets the width of the product  - intended to be used for shipping
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Height">
            <summary>
            Gets or sets the height of the product  - intended to be used for shipping
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Barcode">
            <summary>
            Gets or sets the optional barcode of the product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Available">
            <summary>
            Gets or sets a value indicating whether or not this product is available for purchase.  This would override inventory if marked false.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.TrackInventory">
            <summary>
            Gets or sets a value indicating whether or not to track inventory on this product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.OutOfStockPurchase">
            <summary>
            Gets or sets a value indicating whether or not this product can be purchased when inventory levels are 
            0 or below.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Taxable">
            <summary>
            Gets or sets a value indicating whether or not this product should be considered in tax computations
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Shippable">
            <summary>
            Gets or sets a value indicating whether or not this product is able to be shipped, thus placed in a shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.Download">
            <summary>
            Gets or sets a value indicating whether or not this product is available for download
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.DownloadMediaId">
            <summary>
            Gets or sets the Umbraco MediaId of the download product
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.VersionKey">
            <summary>
            Gets the version key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.CatalogInventories">
            <summary>
            Gets product inventory
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductBase.DetachedContents">
            <summary>
            Gets the detached contents.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IProductOption">
            <summary>
            Defines a product option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductOption.Name">
            <summary>
            Gets or sets the name of the option
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductOption.UseName">
            <summary>
            Gets or sets the use name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductOption.Required">
            <summary>
            Gets or sets a value indicating whether or not it is required to select an option in order to purchase the associated product.
            </summary>
            <remarks>
            If true - a product item to product attribute relation is created defines the composition of a product item
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IProductOption.SortOrder">
            <summary>
            Gets the order in which to list product option with respect to its product association.
            </summary>
            <remarks>
            This field is stored in the product 2 product option association and is not valid for shared option list (it is populated when associated with a product) - cache value should always be 0.
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IProductOption.Shared">
            <summary>
            Gets or sets a value indicating whether this is a shared option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductOption.DetachedContentTypeKey">
            <summary>
            Gets or sets the detached content type key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductOption.UiOption">
            <summary>
            Gets or sets the UI option.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductOption.Choices">
            <summary>
            Gets or sets the choices (product attributes) associated with this option
            </summary>
        </member>
        <member name="M:NKart.Core.Models.IProductOption.Clone">
            <summary>
            Gets a clone version of the option.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.IProductVariant">
            <summary>
            Defines a product variant
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariant.ProductKey">
            <summary>
            Gets or sets the product key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariant.Attributes">
            <summary>
            Gets the product's attributes
            </summary>
            <remarks>
            Designated options that make up this product
            e.g. for product T-Shirt -> attributes could be  Small, Black
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IProductVariant.TotalInventoryCount">
            <summary>
            Gets the total (sum) of inventory "counts" across all associated warehouses
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariant.ExamineId">
            <summary>
            Gets the id used in the examine index.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariant.Master">
            <summary>
            Gets a value indicating whether this represents the master product variant.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProductVariant.IsDefault">
            <summary>
            Gets a value indicating whether this variant is the default variant to display
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ICountryBase">
            <summary>
            Represents a region
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICountryBase.RegionInfo">
            <summary>
            The <see cref="T:System.Globalization.RegionInfo"/> associated with the Region
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IShipment">
            <summary>
            Defines a Merchello Shipment object interface
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ShipmentNumberPrefix">
            <summary>
            Gets or sets the shipment number prefix.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ShipmentNumber">
            <summary>
            Gets or sets the shipment number.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ShipmentStatusKey">
            <summary>
            Gets the shipment status key.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ShipmentStatus">
            <summary>
            Gets or sets the Shipment Status
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ShippedDate">
            <summary>
            Gets or sets the date the shipment was shipped
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.FromOrganization">
            <summary>
            Gets or sets the organization or company name associated with the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.FromName">
            <summary>
            Gets or sets the origin address's name for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.FromAddress1">
            <summary>
            Gets or sets the origin address line 1 for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.FromAddress2">
            <summary>
            Gets or sets the origin address line 2 for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.FromLocality">
            <summary>
            Gets or sets the origin address locality or city for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.FromRegion">
            <summary>
            Gets or sets the origin address region, state or province for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.FromPostalCode">
            <summary>
            Gets or sets the origin address's postal code for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.FromCountryCode">
            <summary>
            Gets or sets the origin address's country code for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.FromIsCommercial">
            <summary>
            Gets or sets a value indicating whether or not the origin's address is a commercial address. Used by some shipping providers.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ToOrganization">
            <summary>
            Gets or sets the organization or company name associated with the address
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ToName">
            <summary>
            Gets or sets the destination address's name or company for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ToAddress1">
            <summary>
            Gets or sets the destination address line 1 for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ToAddress2">
            <summary>
            Gets or sets the destination address line 2 for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ToLocality">
            <summary>
            Gets or sets the destination address locality or city for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ToRegion">
            <summary>
            Gets or sets the destination address region, state or province for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ToPostalCode">
            <summary>
            Gets or sets the destination address's postal code for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ToCountryCode">
            <summary>
            Gets or sets the destination address's country code for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ToIsCommercial">
            <summary>
            Gets or sets a value indicating whether or not the destination address is a commercial address.  Used by some shipping providers.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.ShipMethodKey">
            <summary>
            Gets or sets the ship method associated with this shipment
            </summary>
            <remarks>
            This is nullable in case a provider (and related shipmethods) is deleted and we want to maintain the shipment record
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IShipment.Phone">
            <summary>
            Gets or sets the phone number at the shipping address for the Shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.Email">
            <summary>
            Gets or sets the contact email address associated with this shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.Carrier">
            <summary>
            Gets or sets the name of the freight carrier associated with this shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.TrackingCode">
            <summary>
            Gets or sets the tracking code associated with this shipment
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipment.TrackingUrl">
            <summary>
            Gets or sets the tracking url.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IShipMethod">
            <summary>
            Represents shipping method.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipMethod.Name">
            <summary>
            Gets or sets the name for the shipping method.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipMethod.ProviderKey">
            <summary>
            Gets the key associated with the gateway provider.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipMethod.ShipCountryKey">
            <summary>
            Gets the key associated with the ship country.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipMethod.Surcharge">
            <summary>
            Gets or sets the surcharge.
            </summary>
            <remarks>
            Currently not being used.
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IShipMethod.ServiceCode">
            <summary>
            Gets or sets the service code (generally defined by the provider).
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipMethod.Taxable">
            <summary>
            Gets or sets a value indicating whether or not this shipping method is taxable.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipMethod.Provinces">
            <summary>
            Gets or sets the province collection.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IShipRateTier">
            <summary>
            Represents a shipment rate tier
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipRateTier.ShipMethodKey">
            <summary>
            Gets the key of the ship method
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipRateTier.RangeLow">
            <summary>
            Gets or sets low end of the range defined by this tier
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipRateTier.RangeHigh">
            <summary>
            Gets or sets the high end of the range defined by this tier
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipRateTier.Rate">
            <summary>
            Gets or sets the rate or cost for this range
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IStoreSetting">
            <summary>
            Represents a Merchello Store Setting
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IStoreSetting.Name">
            <summary>
            Gets or sets the name of the store setting
            </summary>
            <remarks>
            Should be unique but not enforced
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IStoreSetting.Value">
            <summary>
            Gets or sets the value of the store setting
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IStoreSetting.TypeName">
            <summary>
            Gets or sets the type of the store setting
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ITaxMethod">
            <summary>
            Represents a taxation method
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ITaxMethod.ProviderKey">
            <summary>
            Gets the key associated with the gateway provider for the tax rate data
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ITaxMethod.Name">
            <summary>
            Gets or sets then name associated with the tax method (e.g. VAT)
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ITaxMethod.CountryCode">
            <summary>
            Gets the two digit ISO Country code
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ITaxMethod.PercentageTaxRate">
            <summary>
            Gets or sets then percentage tax rate
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ITaxMethod.Provinces">
            <summary>
            Gets or sets the stores province adjustments (if any) for the tax country
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ITaxMethod.ProductTaxMethod">
            <summary>
            Gets or sets a value indicating whether product tax method.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ITaxMethod.HasProvinces">
            <summary>
            Gets a value indicating whether or not the country has provinces
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ITaxProvince">
            <summary>
            Represents a Tax Province
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ITaxProvince.PercentAdjustment">
            <summary>
            Gets or sets the percentage rate adjustment to the tax rate
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IWarehouse">
            <summary>
            Represents a warehouse or shipping origin.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.Name">
            <summary>
            Gets or sets the name for the Warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.Address1">
            <summary>
            Gets or sets the address1 for the Warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.Address2">
            <summary>
            Gets or sets the address2 for the Warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.Locality">
            <summary>
            Gets or sets the locality for the Warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.Region">
            <summary>
            Gets or sets the region for the Warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.PostalCode">
            <summary>
            Gets or sets the postalCode for the Warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.CountryCode">
            <summary>
            Gets or sets the country code of the warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.Phone">
            <summary>
            Gets or sets the phone number of the warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.Email">
            <summary>
            Gets or sets the contact email address of the warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.IsDefault">
            <summary>
            Gets or sets a value indicating whether or not this warehouse is the primary (or default) warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouse.WarehouseCatalogs">
            <summary>
            Gets the warehouse catalogs.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IWarehouseCatalog">
            <summary>
            Represents a warehouse catalog
            </summary>
            <remarks>
            
            Warehouses can have multiple catalogs for inventory purposes.  This is to 
            provide a way to separate out Shipping Methods based on types of product.  If an product 
            can only ship overnight and refrigerated (such as Live Lobster) we need to be able to separate
            this out from a T-Shirt.  In this case there could be a Warehouse Catalog with common items and
            a separate Warehouse Catalog for Frozen/Live Items.
            
            </remarks>
        </member>
        <member name="P:NKart.Core.Models.IWarehouseCatalog.WarehouseKey">
            <summary>
            Gets the unique key identifying the warehouse that maintains this catalog
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouseCatalog.Name">
            <summary>
            Gets or sets the optional name or title of the catalog
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IWarehouseCatalog.Description">
            <summary>
            Gets or sets the optional description of the catalog
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IShipCountry">
            <summary>
            Represents a country that can be used in shipping rules.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipCountry.CatalogKey">
            <summary>
            Gets the warehouse catalog key
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IShipCountry.HasProvinces">
            <summary>
            Gets a value indicating whether or not this <see cref="T:NKart.Core.Models.IShipCountry"/> defines a province collection.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ICatalogInventory">
            <summary>
            Defines product inventory for a warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICatalogInventory.ProductVariantKey">
            <summary>
            Gets the unique key of the product variant
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICatalogInventory.CatalogKey">
            <summary>
            Gets the unique catalog key
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICatalogInventory.Count">
            <summary>
            Gets or sets the number of products in inventory for the warehouse
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICatalogInventory.LowCount">
            <summary>
            Gets or sets the number at which inventory for the product is considered to be low
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICatalogInventory.Location">
            <summary>
            Gets or sets the location of the product.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICatalogInventory.UpdateDate">
            <summary>
            Gets or sets the record update date.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICatalogInventory.CreateDate">
            <summary>
            Gets or sets the record create date.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Invoice">
            <summary>
            The invoice.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._customerKey">
            <summary>
            The customer key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._invoiceNumber">
            <summary>
            The invoice number.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._invoiceNumberPrefix">
            <summary>
            The invoice number prefix.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._poNumber">
            <summary>
            The purchase order number.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._invoiceDate">
            <summary>
            The invoice date.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._invoiceStatus">
            <summary>
            The invoice status.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToName">
            <summary>
            The bill to name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToAddress1">
            <summary>
            The bill to address 1.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToAddress2">
            <summary>
            The bill to address 2.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToLocality">
            <summary>
            The bill to locality.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToRegion">
            <summary>
            The bill to region.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToPostalCode">
            <summary>
            The bill to postal code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToCountryCode">
            <summary>
            The bill to country code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToEmail">
            <summary>
            The bill to email.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToPhone">
            <summary>
            The bill to phone.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._billToCompany">
            <summary>
            The bill to company.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._currencyCode">
            <summary>
            The currency code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._exported">
            <summary>
            The exported.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._archived">
            <summary>
            The archived.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._total">
            <summary>
            The total.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._examineId">
            <summary>
            The examine id.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._items">
            <summary>
            The items.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._orders">
            <summary>
            The orders.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice._notes">
            <summary>
            The notes.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Invoice.#ctor(NKart.Core.Models.IInvoiceStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Invoice"/> class.
            </summary>
            <param name="invoiceStatus">
            The invoice status.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Invoice.#ctor(NKart.Core.Models.IInvoiceStatus,NKart.Core.Models.IAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Invoice"/> class.
            </summary>
            <param name="invoiceStatus">
            The invoice status.
            </param>
            <param name="billToAddress">
            The bill to address.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Invoice.#ctor(NKart.Core.Models.IInvoiceStatus,NKart.Core.Models.IAddress,NKart.Core.Models.LineItemCollection,NKart.Core.Models.OrderCollection,NKart.Core.Models.INote[])">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Invoice"/> class.
            </summary>
            <param name="invoiceStatus">
            The invoice status.
            </param>
            <param name="billToAddress">
            The bill to address.
            </param>
            <param name="lineItemCollection">
            The line item collection.
            </param>
            <param name="orders">
            The orders.
            </param>
            <param name="notes">
            The notes collection
            </param>
        </member>
        <member name="P:NKart.Core.Models.Invoice.CustomerKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.InvoiceNumberPrefix">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.InvoiceNumber">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.PoNumber">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.InvoiceDate">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.InvoiceStatusKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.InvoiceStatus">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToAddress1">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToAddress2">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToLocality">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToRegion">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToPostalCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToCountryCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToEmail">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToPhone">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.BillToCompany">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.CurrencyCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.Exported">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.Archived">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.Total">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.Orders">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.Notes">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.Items">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Invoice.ExamineId">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Invoice.Accept(NKart.Core.Models.ILineItemVisitor)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Invoice.OrdersChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the order collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.Invoice.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.CustomerKeySelector">
            <summary>
            The customer key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.InvoiceNumberPrefixSelector">
            <summary>
            The invoice number prefix selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.InvoiceNumberSelector">
            <summary>
            The invoice number selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.PoNumberSelector">
            <summary>
            The invoice number prefix selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.InvoiceDateSelector">
            <summary>
            The invoice date selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.InvoiceStatusSelector">
            <summary>
            The invoice status selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToNameSelector">
            <summary>
            The bill to name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToAddress1Selector">
            <summary>
            The bill to address 1 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToAddress2Selector">
            <summary>
            The bill to address 2 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToLocalitySelector">
            <summary>
            The bill to locality selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToRegionSelector">
            <summary>
            The bill to region selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToPostalCodeSelector">
            <summary>
            The bill to postal code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToCountryCodeSelector">
            <summary>
            The bill to country code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToEmailSelector">
            <summary>
            The bill to email selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToPhoneSelector">
            <summary>
            The bill to phone selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.BillToCompanySelector">
            <summary>
            The bill to company selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.CurrencyCodeSelector">
            <summary>
            The bill to company selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.ExportedSelector">
            <summary>
            The exported selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.ArchivedSelector">
            <summary>
            The archived selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.TotalSelector">
            <summary>
            The total selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Invoice.PropertySelectors.OrdersChangedSelector">
            <summary>
            The orders changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.InvoiceLineItem">
            <summary>
            Represents an invoice line item
            </summary>
            <remarks>
            Needed for typed query mapper
            </remarks>
        </member>
        <member name="M:NKart.Core.Models.InvoiceLineItem.#ctor(System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.InvoiceLineItem"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Models.InvoiceLineItem.#ctor(System.String,System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.InvoiceLineItem"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Models.InvoiceLineItem.#ctor(NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.InvoiceLineItem"/> class.
            </summary>
            <param name="lineItemType">
            The line item type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="M:NKart.Core.Models.InvoiceLineItem.#ctor(NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.InvoiceLineItem"/> class.
            </summary>
            <param name="lineItemType">
            The line item type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="M:NKart.Core.Models.InvoiceLineItem.#ctor(System.Guid,System.String,System.String,System.Int32,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.InvoiceLineItem"/> class.
            </summary>
            <param name="lineItemTfKey">
            The line item type field key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="T:NKart.Core.Models.InvoiceStatus">
            <summary>
            Represents an invoice status.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ICountry">
            <summary>
            Defines a Country
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICountry.CountryCode">
            <summary>
            Gets the two letter ISO Region code
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICountry.Name">
            <summary>
            Gets the English name associated with the region
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICountry.Iso">
            <summary>
            Gets the International Organization for Standardization code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICountry.ProvinceLabel">
            <summary>
            Gets the label associated with the province list.  (e.g. for US this would be 'States')
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ICountry.Provinces">
            <summary>
            Gets the collection of Provinces (if any) associated with the country
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ItemCache">
            <summary>
            Defines a customer item register
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ItemCache._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ItemCache._entityKey">
            <summary>
            The entity key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ItemCache._itemCacheTfKey">
            <summary>
            The item cache type field key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ItemCache._items">
            <summary>
            The line items collection
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ItemCache.#ctor(System.Guid,NKart.Core.ItemCacheType)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ItemCache"/> class.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="itemCacheType">
            The item cache type.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ItemCache.#ctor(System.Guid,NKart.Core.ItemCacheType,NKart.Core.Models.LineItemCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ItemCache"/> class.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="itemCacheType">
            The item cache type.
            </param>
            <param name="items">
            The items.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ItemCache.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ItemCache"/> class.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="itemCacheTfKey">
            The item cache type field key.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ItemCache.#ctor(System.Guid,System.Guid,NKart.Core.Models.LineItemCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ItemCache"/> class.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="itemCacheTfKey">
            The item cache type field key.
            </param>
            <param name="items">
            The items.
            </param>
        </member>
        <member name="P:NKart.Core.Models.ItemCache.EntityKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ItemCache.ItemCacheTfKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ItemCache.ItemCacheType">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ItemCache.Items">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.ItemCache.Accept(NKart.Core.Models.ILineItemVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.ItemCache.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ItemCache.PropertySelectors.EntityKeySelector">
            <summary>
            The entity key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ItemCache.PropertySelectors.ItemCacheTfKeySelector">
            <summary>
            The item cache type field key selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ItemCacheLineItem">
            <summary>
            Represents a customer cached line item
            </summary>
            <remarks>
            Needed for typed query mapper
            </remarks>
        </member>
        <member name="M:NKart.Core.Models.ItemCacheLineItem.#ctor(System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ItemCacheLineItem"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ItemCacheLineItem.#ctor(System.String,System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ItemCacheLineItem"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ItemCacheLineItem.#ctor(NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ItemCacheLineItem"/> class.
            </summary>
            <param name="lineItemType">
            The line item type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ItemCacheLineItem.#ctor(NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ItemCacheLineItem"/> class.
            </summary>
            <param name="lineItemType">
            The line item type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ItemCacheLineItem.#ctor(System.Guid,System.String,System.String,System.Int32,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ItemCacheLineItem"/> class.
            </summary>
            <param name="lineItemTfKey">
            The line item type field key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="T:NKart.Core.Models.LineItemBase">
            <summary>
            Represents a line item
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase._containerKey">
            <summary>
            The container key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase._lineItemTfKey">
            <summary>
            The line item TypeField key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase._sku">
            <summary>
            The SKU.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase._name">
            <summary>
            The _name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase._quantity">
            <summary>
            The Quantity.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase._price">
            <summary>
            The Price.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase._extendedData">
            <summary>
            The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase._exported">
            <summary>
            The exported.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.LineItemBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.LineItemBase"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.LineItemBase.#ctor(System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.LineItemBase"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Models.LineItemBase.#ctor(System.String,System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.LineItemBase"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Models.LineItemBase.#ctor(NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.LineItemBase"/> class.
            </summary>
            <param name="lineItemType">
            The line item type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="M:NKart.Core.Models.LineItemBase.#ctor(NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.LineItemBase"/> class.
            </summary>
            <param name="lineItemType">
            The line item type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="M:NKart.Core.Models.LineItemBase.#ctor(System.Guid,System.String,System.String,System.Int32,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.LineItemBase"/> class.
            </summary>
            <param name="lineItemTfKey">
            The line item type field key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.ContainerKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.LineItemTfKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.Sku">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.Quantity">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.Price">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.ExtendedData">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.LineItemType">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.TotalPrice">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.LineItemBase.Exported">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.LineItemBase.Accept(NKart.Core.Models.ILineItemVisitor)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.LineItemBase.SerializeToXml">
            <summary>
            Serializes the current instance to an Xml representation - intended to be persisted in an <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>  
            </summary>
            <returns>An Xml string</returns>
        </member>
        <member name="M:NKart.Core.Models.LineItemBase.ExtendedDataChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the extended data collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.LineItemBase.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase.PropertySelectors.ContainerKeySelector">
            <summary>
            The container key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase.PropertySelectors.LineItemTfKeySelector">
            <summary>
            The line item type field key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase.PropertySelectors.SkuSelector">
            <summary>
            The SKU selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase.PropertySelectors.QuantitySelector">
            <summary>
            The quantity selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase.PropertySelectors.PriceSelector">
            <summary>
            The price selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase.PropertySelectors.ExtendedDataChangedSelector">
            <summary>
            The extended data changed selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemBase.PropertySelectors.ExportedSelector">
            <summary>
            The exported selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.LineItemCollection">
            <summary>
            Represents a Collection of <see cref="!:T"/> objects
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemCollection._addLocker">
            <summary>
            The add locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.LineItemCollection.OnAdd">
            <summary>
            The on add.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.LineItemCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.LineItemCollection"/> class.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.LineItemCollection.AddItemEventHandler">
            <summary>
            Event handler for AddingItem.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="arg">
            The event argument.
            </param>
        </member>
        <member name="E:NKart.Core.Models.LineItemCollection.AddingItem">
            <summary>
            The adding tier.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.LineItemCollection.IsEmpty">
            <summary>
            Gets a value indicating whether or not the current collection is empty
            </summary>
        </member>
        <member name="M:NKart.Core.Models.LineItemCollection.#ctor(System.Func{NKart.Core.Models.ILineItem,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.LineItemCollection"/> class.
            </summary>
            <param name="validationCallback">
            The validation callback.
            </param>
        </member>
        <member name="P:NKart.Core.Models.LineItemCollection.ValidateAdd">
            <summary>
            Gets or sets the validate add.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.LineItemCollection.IndexOfKey(System.String)">
            <summary>
            Gets the index of the key.
            </summary>
            <param name="sku">
            The SKU.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.LineItemCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains a <see cref="!:T"/> whose SKU matches the specified SKU.
            </summary>
            <param name="sku">SKU of the line item.</param>
            <returns><c>true</c> if the collection contains the specified SKU; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:NKart.Core.Models.LineItemCollection.Add(System.Collections.Generic.IEnumerable{NKart.Core.Models.ILineItem})">
            <summary>
            Adds a collection of <see cref="T:NKart.Core.Models.ILineItem"/> to the collection.
            </summary>
            <param name="items">
            The items.
            </param>
        </member>
        <member name="M:NKart.Core.Models.LineItemCollection.Accept(NKart.Core.Models.ILineItemVisitor)">
            <summary>
            Allows visitor to visit each item in the collection
            </summary>
            <param name="visitor">A <see cref="T:NKart.Core.Models.ILineItemVisitor"/></param>
        </member>
        <member name="M:NKart.Core.Models.LineItemCollection.Add(NKart.Core.Models.ILineItem)">
            <summary>
            The add.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Models.LineItemCollection.GetKeyForItem(NKart.Core.Models.ILineItem)">
            <summary>
            Gets the key for the item.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.NotifiyCollectionBase`2">
            <summary>
            Defines an abstract class for key collections with notification events
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:NKart.Core.Models.OrderLineItem">
            <summary>
            Represents an order line item
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OrderLineItem._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OrderLineItem._shipmentKey">
            <summary>
            The shipment key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OrderLineItem._backOrder">
            <summary>
            The back order.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.OrderLineItem.#ctor(System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.OrderLineItem"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Models.OrderLineItem.#ctor(System.String,System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.OrderLineItem"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Models.OrderLineItem.#ctor(NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.OrderLineItem"/> class.
            </summary>
            <param name="lineItemType">
            The line item type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="M:NKart.Core.Models.OrderLineItem.#ctor(NKart.Core.LineItemType,System.String,System.String,System.Int32,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.OrderLineItem"/> class.
            </summary>
            <param name="lineItemType">
            The line item type.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The sku.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="M:NKart.Core.Models.OrderLineItem.#ctor(System.Guid,System.String,System.String,System.Int32,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.OrderLineItem"/> class.
            </summary>
            <param name="lineItemTfKey">
            The line item type field key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="quantity">
            The quantity.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="P:NKart.Core.Models.OrderLineItem.ShipmentKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.OrderLineItem.BackOrder">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.OrderLineItem.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OrderLineItem.PropertySelectors.ShipmentKeySelector">
            <summary>
            The shipment key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.OrderLineItem.PropertySelectors.BackOrderSelector">
            <summary>
            The back order selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Payment">
            <summary>
            Represents a payment.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._customerKey">
            <summary>
            The customer key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._paymentMethodKey">
            <summary>
            The payment method key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._paymentTypeFieldKey">
            <summary>
            The payment type field key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._paymentMethodName">
            <summary>
            The payment method name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._referenceNumber">
            <summary>
            The reference number.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._amount">
            <summary>
            The amount.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._authorized">
            <summary>
            The authorized.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._collected">
            <summary>
            The collected.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._exported">
            <summary>
            The exported.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._voided">
            <summary>
            The voided.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment._extendedData">
            <summary>
            The extended data.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Payment.#ctor(NKart.Core.PaymentMethodType,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Payment"/> class.
            </summary>
            <param name="paymentMethodType">
            The payment method type.
            </param>
            <param name="amount">
            The amount.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Payment.#ctor(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Payment"/> class.
            </summary>
            <param name="paymentMethodType">
            The payment method type.
            </param>
            <param name="amount">
            The amount.
            </param>
            <param name="paymentMethodKey">
            The payment method key.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Payment.#ctor(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid},NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Payment"/> class.
            </summary>
            <param name="paymentMethodType">
            The payment method type.
            </param>
            <param name="amount">
            The amount.
            </param>
            <param name="paymentMethodKey">
            The payment method key.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Payment.#ctor(System.Guid,System.Decimal,System.Nullable{System.Guid},NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Payment"/> class.
            </summary>
            <param name="paymentTypeFieldKey">
            The payment type field key.
            </param>
            <param name="amount">
            The amount.
            </param>
            <param name="paymentMethodKey">
            The payment method key.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="P:NKart.Core.Models.Payment.CustomerKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.PaymentMethodKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.PaymentTypeFieldKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.PaymentMethodName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.ReferenceNumber">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.Amount">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.Authorized">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.Collected">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.Voided">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.Exported">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.ExtendedData">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Payment.PaymentMethodType">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Payment.ExtendedDataChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the extended data collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.Payment.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.CustomerKeySelector">
            <summary>
            The customer key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.PaymentMethodKeySelector">
            <summary>
            The payment method key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.PaymentTypeFieldKeySelector">
            <summary>
            The payment type field key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.PaymentMethodNameSelector">
            <summary>
            The payment method name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.ReferenceNumberSelector">
            <summary>
            The reference number selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.AmountSelector">
            <summary>
            The amount selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.AuthorizedSelector">
            <summary>
            The authorized selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.CollectedSelector">
            <summary>
            The collected selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.VoidedSelector">
            <summary>
            The voided selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.ExportedSelector">
            <summary>
            The exported selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Payment.PropertySelectors.ExtendedDataChangedSelector">
            <summary>
            The extended data changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Product">
            <summary>
            Defines a product variant
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Product._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Product._variant">
            <summary>
            The master product variant.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Product._productOptions">
            <summary>
            A collection of product options associated with the product.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Product._productVariants">
            <summary>
            A collection of product variants associated with the product.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Product.#ctor(NKart.Core.Models.IProductVariant)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Product"/> class.
            </summary>
            <param name="variant">
            The variant.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Product.#ctor(NKart.Core.Models.IProductVariant,NKart.Core.Models.ProductOptionCollection,NKart.Core.Models.ProductVariantCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Product"/> class.
            </summary>
            <param name="variant">
            The variant.
            </param>
            <param name="productOptions">
            The product options.
            </param>
            <param name="productVariants">
            The product variants.
            </param>
        </member>
        <member name="P:NKart.Core.Models.Product.DefinesOptions">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.ProductOptions">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.ProductVariants">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.ProductVariantKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Sku">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Price">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.CostOfGoods">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.SalePrice">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.OnSale">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Manufacturer">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.ManufacturerModelNumber">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Weight">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Length">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Width">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Height">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Barcode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Available">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.TrackInventory">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.OutOfStockPurchase">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Taxable">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Shippable">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.Download">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.DownloadMediaId">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.VersionKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.CatalogInventories">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.DetachedContents">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Product.MasterVariant">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Product.ResetDirtyProperties">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Product.AddingEntity">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Product.UpdatingEntity">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Product.ProductOptionsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The product options changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Product.ProductVariantsChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The product variants changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.Product.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Product.PropertySelectors.ProductOptionsChangedSelector">
            <summary>
            The product options changed selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Product.PropertySelectors.ProductVariantsChangedSelector">
            <summary>
            The product variants changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ProductAttribute">
            <summary>
            Defines a product attribute
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ProductAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductAttribute"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
        </member>
        <member name="P:NKart.Core.Models.ProductAttribute.OptionKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductAttribute.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductAttribute.Sku">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductAttribute.SortOrder">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductAttribute.IsDefaultChoice">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductAttribute.DetachedDataValues">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.ProductAttribute.Clone">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.ProductAttributeCollection">
            <summary>
            Defines a product attribute collection
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductAttributeCollection._addLocker">
            <summary>
            The thread locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ProductAttributeCollection.Equals(NKart.Core.Models.ProductAttributeCollection)">
            <summary>
            The equals comparison.
            </summary>
            <param name="compare">
            The compare.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.ProductAttributeCollection.IndexOfKey(System.Guid)">
            <summary>
            Gets the index of a given key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.ProductAttributeCollection.Contains(System.String)">
            <summary>
            Performs the contains operation based off the option choice SKU.
            </summary>
            <param name="sku">
            The SKU.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.ProductAttributeCollection.Remove(NKart.Core.Models.IProductAttribute)">
            <summary>
            Overrides the Remove method.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.ProductAttributeCollection.Add(NKart.Core.Models.IProductAttribute)">
            <summary>
            The add.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductAttributeCollection.GetKeyForItem(NKart.Core.Models.IProductAttribute)">
            <summary>
            The get key for item.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.ProductBase">
            <summary>
            Represents an abstract class for base Product properties and methods
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._sku">
            <summary>
            The SKU.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._price">
            <summary>
            The price.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._costOfGoods">
            <summary>
            The cost of goods.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._onSale">
            <summary>
            The on sale.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._salePrice">
            <summary>
            The sale price.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._manufacturer">
            <summary>
            The manufacturer.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._manufacturerModelNumber">
            <summary>
            The manufacturer model number.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._weight">
            <summary>
            The weight.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._width">
            <summary>
            The width.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._height">
            <summary>
            The height.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._barcode">
            <summary>
            The barcode.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._available">
            <summary>
            The available.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._trackInventory">
            <summary>
            The track inventory.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._outOfStockPurchase">
            <summary>
            The _out of stock purchase.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._taxable">
            <summary>
            The taxable.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._shippable">
            <summary>
            The shippable.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._download">
            <summary>
            The download.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._downloadMediaId">
            <summary>
            The download media id.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._versionKey">
            <summary>
            The version key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._catalogInventoryCollection">
            <summary>
            The catalog inventory collection.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase._detachedContents">
            <summary>
            The detached content collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ProductBase.#ctor(System.String,System.String,System.Decimal,NKart.Core.Models.CatalogInventoryCollection,NKart.Core.Models.DetachedContent.DetachedContentCollection{NKart.Core.Models.DetachedContent.IProductVariantDetachedContent})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductBase"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="catalogInventoryCollection">
            The catalog inventory collection.
            </param>
            <param name="detachedContents">
            The detached Contents.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductBase.#ctor(System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductBase"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.CatalogInventories">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.DetachedContents">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Sku">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Price">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.CostOfGoods">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.SalePrice">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.OnSale">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Manufacturer">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.ManufacturerModelNumber">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Weight">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Length">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Width">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Height">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Barcode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Available">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.TrackInventory">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.OutOfStockPurchase">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Taxable">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Shippable">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.Download">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.DownloadMediaId">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.VersionKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductBase.CatalogInventoryCollection">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.ProductBase.CatalogInventoryCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the catalog inventory collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductBase.DetachedContentsOnCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the detached contents on collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="notifyCollectionChangedEventArgs">
            The notify collection changed event args.
            </param>
        </member>
        <member name="T:NKart.Core.Models.ProductBase.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.SkuSelector">
            <summary>
            The SKU selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.PriceSelector">
            <summary>
            The price selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.CostOfGoodsSelector">
            <summary>
            The cost of goods selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.SalePriceSelector">
            <summary>
            The sale price selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.OnSaleSelector">
            <summary>
            The on sale selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.ManufacturerSelector">
            <summary>
            The manufacturer selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.ManufacturerModelNumberSelector">
            <summary>
            The manufacturer model number selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.WeightSelector">
            <summary>
            The weight selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.LengthSelector">
            <summary>
            The length selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.WidthSelector">
            <summary>
            The width selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.HeightSelector">
            <summary>
            The height selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.BarcodeSelector">
            <summary>
            The barcode selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.AvailableSelector">
            <summary>
            The available selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.TrackInventorySelector">
            <summary>
            The track inventory selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.OutOfStockPurchaseSelector">
            <summary>
            The out of stock purchase selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.TaxableSelector">
            <summary>
            The taxable selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.ShippableSelector">
            <summary>
            The shippable selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.DownloadSelector">
            <summary>
            The download selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.DownloadMediaIdSelector">
            <summary>
            The download media id selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.VersionKeySelector">
            <summary>
            The version key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.WarehouseInventoryChangedSelector">
            <summary>
            The warehouse inventory changed selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductBase.PropertySelectors.DetachedContentsSelector">
            <summary>
            The detached contents selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ProductOption">
            <summary>
            Represents a product option.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption._required">
            <summary>
            A value indicating whether or not it is required.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption._shared">
            <summary>
            The value indicating whether or not the option is a shared option.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption._sortOrder">
            <summary>
            The sort order.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption._uiOption">
            <summary>
            The UI option.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption._useName">
            <summary>
            The use name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption._detachedContentTypeKey">
            <summary>
            The detached content type key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption._choices">
            <summary>
            The option choices collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ProductOption.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductOption"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductOption.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductOption"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="required">
            The required.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductOption.#ctor(System.String,System.Boolean,NKart.Core.Models.ProductAttributeCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductOption"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="required">
            The required.
            </param>
            <param name="choices">
            The choices.
            </param>
        </member>
        <member name="P:NKart.Core.Models.ProductOption.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductOption.UseName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductOption.Required">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductOption.SortOrder">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductOption.Shared">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductOption.DetachedContentTypeKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductOption.UiOption">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductOption.Choices">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.ProductOption.Clone">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.ProductOption.ChoiceCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the Choice Collection Changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.ProductOption.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption.PropertySelectors.RequiredSelector">
            <summary>
            The required selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption.PropertySelectors.SortOrderSelector">
            <summary>
            The sort order selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption.PropertySelectors.SharedSelector">
            <summary>
            The shared selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption.PropertySelectors.UseNameSelector">
            <summary>
            The use name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption.PropertySelectors.UiOptionSelector">
            <summary>
            The UI option selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption.PropertySelectors.DetachedContentTypeKeySelector">
            <summary>
            The detached content type key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOption.PropertySelectors.ProductAttributesChangedSelector">
            <summary>
            The product attribute collection changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ProductOptionCollection">
            <summary>
            Defines a product option collection
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductOptionCollection._addLocker">
            <summary>
            The _add locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ProductOptionCollection.Remove(NKart.Core.Models.IProductOption)">
            <summary>
            Overrides the Remove method.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.ProductOptionCollection.Contains(System.String)">
            <summary>
            The contains.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.ProductOptionCollection.Add(NKart.Core.Models.IProductOption)">
            <summary>
            Adds a new option to the collection.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductOptionCollection.GetKeyForItem(NKart.Core.Models.IProductOption)">
            <summary>
            The get key for item.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.ProductVariant">
            <summary>
            Defines a product variant
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant._productKey">
            <summary>
            The product key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant._attibutes">
            <summary>
            The attributes.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant._master">
            <summary>
            The value indicating whether or not this is the master variant.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant._isDefault">
            <summary>
            The value indicating whether or not this is the default variant to display
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant._examineId">
            <summary>
            The examine id.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ProductVariant.#ctor(System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductVariant"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductVariant.#ctor(System.Guid,NKart.Core.Models.ProductAttributeCollection,System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductVariant"/> class.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="attributes">
            The attributes.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductVariant.#ctor(System.Guid,NKart.Core.Models.ProductAttributeCollection,NKart.Core.Models.CatalogInventoryCollection,System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductVariant"/> class.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="attributes">
            The attributes.
            </param>
            <param name="catalogInventoryCollection">
            The catalog inventory collection.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductVariant.#ctor(System.Guid,NKart.Core.Models.ProductAttributeCollection,NKart.Core.Models.CatalogInventoryCollection,System.Boolean,System.Boolean,System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductVariant"/> class.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="attributes">
            The attributes.
            </param>
            <param name="catalogInventoryCollection">
            The catalog inventory collection.
            </param>
            <param name="master">
            The master.
            </param>
            <param name="isDefault"></param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ProductVariant.#ctor(System.Guid,NKart.Core.Models.ProductAttributeCollection,NKart.Core.Models.CatalogInventoryCollection,NKart.Core.Models.DetachedContent.DetachedContentCollection{NKart.Core.Models.DetachedContent.IProductVariantDetachedContent},System.Boolean,System.Boolean,System.String,System.String,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ProductVariant"/> class.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="attributes">
            The attributes.
            </param>
            <param name="catalogInventoryCollection">
            The catalog inventory collection.
            </param>
            <param name="detachedContents">
            The detached contents.
            </param>
            <param name="master">
            The master.
            </param>
            <param name="isDefault">
            The isDefault
            </param>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
        </member>
        <member name="P:NKart.Core.Models.ProductVariant.ProductKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductVariant.TotalInventoryCount">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductVariant.ExamineId">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductVariant.Attributes">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductVariant.Master">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductVariant.IsDefault">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ProductVariant.ProductAttributes">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.ProductVariant.ProductAttributesChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the product attributes collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.ProductVariant.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant.PropertySelectors.ProductKeySelector">
            <summary>
            The product key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant.PropertySelectors.MasterSelector">
            <summary>
            The master selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant.PropertySelectors.IsDefaultSelector">
            <summary>
            The default selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ProductVariant.PropertySelectors.AttributesChangedSelector">
            <summary>
            The attributes changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ProductVariantCollection">
            <summary>
            Represents a collection of <see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ProvinceCollection`1">
            <summary>
            Defines a collection of <see cref="T:NKart.Core.Models.IProvince"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Shipment">
            <summary>
            Represents a shipment.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._shipmentStatus">
            <summary>
            The shipment status.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._shipmentNumberPrefix">
            <summary>
            The shipment number prefix.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._shipmentNumber">
            <summary>
            The shipment number.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._shippedDate">
            <summary>
            The shipped date.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._fromOrganization">
            <summary>
            From address organization.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._fromName">
            <summary>
            From address name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._fromAddress1">
            <summary>
            From address 1.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._fromAddress2">
            <summary>
            From address 2.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._fromLocality">
            <summary>
            From address locality.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._fromRegion">
            <summary>
            From address region.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._fromPostalCode">
            <summary>
            From address postal code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._fromCountryCode">
            <summary>
            From address country code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._fromIsCommercial">
            <summary>
            From address is a commercial address.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._toOrganization">
            <summary>
            To address organization.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._toName">
            <summary>
            To address name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._toAddress1">
            <summary>
            To address 1.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._toAddress2">
            <summary>
            To address 2.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._toLocality">
            <summary>
            To address locality.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._toRegion">
            <summary>
            To address region.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._toPostalCode">
            <summary>
            To address postal code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._toCountryCode">
            <summary>
            To address country code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._toIsCommercial">
            <summary>
            To address is a commercial address.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._shipMethodKey">
            <summary>
            The ship method key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._email">
            <summary>
            The email.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._phone">
            <summary>
            The phone.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._carrier">
            <summary>
            The carrier.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._trackingCode">
            <summary>
            The tracking code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._trackingUrl">
            <summary>
            The tracking url.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment._items">
            <summary>
            The collection of items.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Shipment.#ctor(NKart.Core.Models.IShipmentStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Shipment"/> class.
            </summary>
            <param name="shipmentStatus">
            The shipment Status.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Shipment.#ctor(NKart.Core.Models.IShipmentStatus,NKart.Core.Models.IAddress,NKart.Core.Models.IAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Shipment"/> class.
            </summary>
            <param name="shipmentStatus">
            The shipment Status.
            </param>
            <param name="origin">
            The origin.
            </param>
            <param name="destination">
            The destination.
            </param>
        </member>
        <member name="M:NKart.Core.Models.Shipment.#ctor(NKart.Core.Models.IShipmentStatus,NKart.Core.Models.IAddress,NKart.Core.Models.IAddress,NKart.Core.Models.LineItemCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Shipment"/> class.
            </summary>
            <param name="shipmentStatus">
            The shipment Status.
            </param>
            <param name="origin">
            The origin.
            </param>
            <param name="destination">
            The destination.
            </param>
            <param name="items">
            The items.
            </param>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ShipmentNumberPrefix">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ShipmentNumber">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ShipmentStatusKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ShipmentStatus">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ShippedDate">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.FromOrganization">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.FromName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.FromAddress1">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.FromAddress2">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.FromLocality">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.FromRegion">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.FromPostalCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.FromCountryCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.FromIsCommercial">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ToOrganization">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ToName">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ToAddress1">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ToAddress2">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ToLocality">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ToRegion">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ToPostalCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ToCountryCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ToIsCommercial">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.ShipMethodKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.Phone">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.Email">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.Carrier">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.TrackingCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.TrackingUrl">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Shipment.Items">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.Shipment.Accept(NKart.Core.Models.ILineItemVisitor)">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.Shipment.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ShipmentNumberPrefixSelector">
            <summary>
            The shipment number prefix selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ShipmentNumberSelector">
            <summary>
            The shipment number selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ShipmentStatusSelector">
            <summary>
            The shipment status selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ShippedDateSelector">
            <summary>
            The shipped date selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ShipMethodKeySelector">
            <summary>
            The ship method key selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.FromOrganizationSelector">
            <summary>
            The from organization selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.FromNameSelector">
            <summary>
            The from name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.FromAddress1Selector">
            <summary>
            The from address 1 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.FromAddress2Selector">
            <summary>
            The from address 2 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.FromLocalitySelector">
            <summary>
            The from locality selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.FromRegionSelector">
            <summary>
            The from region selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.FromPostalCodeSelector">
            <summary>
            The from postal code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.FromCountryCodeSelector">
            <summary>
            The from country code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.FromIsCommercialSelector">
            <summary>
            The from is commercial selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ToOrganizationSelector">
            <summary>
            The to organization selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ToNameSelector">
            <summary>
            The to name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ToAddress1Selector">
            <summary>
            The to address 1 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ToAddress2Selector">
            <summary>
            The to address 2 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ToLocalitySelector">
            <summary>
            The to locality selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ToRegionSelector">
            <summary>
            The to region selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ToPostalCodeSelector">
            <summary>
            The to postal code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ToCountryCodeSelector">
            <summary>
            The to country code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.ToIsCommercialSelector">
            <summary>
            The to is commercial selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.PhoneSelector">
            <summary>
            The phone selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.EmailSelector">
            <summary>
            The email selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.TrackingCodeSelector">
            <summary>
            The tracking code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.TrackingUrlSelector">
            <summary>
            The tracking url selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Shipment.PropertySelectors.CarrierSelector">
            <summary>
            The carrier selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ShipMethod">
            <inheritdoc/>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod._providerKey">
            <summary>
            The provider key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod._shipCountryKey">
            <summary>
            The ship country key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod._surcharge">
            <summary>
            The surcharge.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod._serviceCode">
            <summary>
            The service code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod._taxable">
            <summary>
            The taxable.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod._shipProvinces">
            <summary>
            The ship provinces.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ShipMethod.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ShipMethod"/> class.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="shipCountryKey">
            The ship country key.
            </param>
        </member>
        <member name="M:NKart.Core.Models.ShipMethod.#ctor(System.Guid,System.Guid,NKart.Core.Models.ProvinceCollection{NKart.Core.Models.Interfaces.IShipProvince})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ShipMethod"/> class.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="shipCountryKey">
            The ship country key.
            </param>
            <param name="shipProvinces">
            The ship provinces.
            </param>
        </member>
        <member name="P:NKart.Core.Models.ShipMethod.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipMethod.ProviderKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipMethod.ShipCountryKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipMethod.Surcharge">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipMethod.ServiceCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipMethod.Taxable">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipMethod.Provinces">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.ShipMethod.ShipProvincesChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the ship provinces changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.ShipMethod.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod.PropertySelectors.SurchargeSelector">
            <summary>
            The surcharge selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod.PropertySelectors.ServiceCodeSelector">
            <summary>
            The service code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod.PropertySelectors.TaxableSelector">
            <summary>
            The taxable selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipMethod.PropertySelectors.ProvincesChangedSelector">
            <summary>
            The provinces changed selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ShipProvince">
            <summary>
            Represents a province from a shipping context
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ShipProvince.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ShipProvince"/> class.
            </summary>
            <param name="code">
            The code.
            </param>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:NKart.Core.Models.ShipProvince.AllowShipping">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipProvince.RateAdjustment">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipProvince.RateAdjustmentType">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.ShipRateTier">
            <summary>
            Defines a ShipRateTier - used in flat rate shipping rate tables
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipRateTier._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipRateTier._shipMethodKey">
            <summary>
            The ship method key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipRateTier._rangeLow">
            <summary>
            Low range value.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipRateTier._rangeHigh">
            <summary>
            High range value.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipRateTier._rate">
            <summary>
            The rate.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ShipRateTier.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ShipRateTier"/> class.
            </summary>
            <param name="shipMethodKey">
            The ship method key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.ShipRateTier.ShipMethodKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipRateTier.RangeLow">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipRateTier.RangeHigh">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipRateTier.Rate">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.ShipRateTier.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipRateTier.PropertySelectors.RangeLowSelector">
            <summary>
            The range low selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipRateTier.PropertySelectors.RangeHighSelector">
            <summary>
            The range high selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipRateTier.PropertySelectors.RateSelector">
            <summary>
            The rate selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.StoreSetting">
            <inheritdoc/>
        </member>
        <member name="F:NKart.Core.Models.StoreSetting._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.StoreSetting._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.StoreSetting._value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.StoreSetting._typeName">
            <summary>
            The type name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.StoreSetting.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.StoreSetting.Value">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.StoreSetting.TypeName">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.StoreSetting.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.StoreSetting.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.StoreSetting.PropertySelectors.ValueSelector">
            <summary>
            The value selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.StoreSetting.PropertySelectors.TypeNameSelector">
            <summary>
            The type name selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TaxMethod">
            <summary>
            Represents a province from a taxation context
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod._providerKey">
            <summary>
            The provider key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod._countryCode">
            <summary>
            The country code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod._percentageTaxRate">
            <summary>
            The percentage tax rate.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod._productTaxMethod">
            <summary>
            The product tax method.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod._taxProvinces">
            <summary>
            The tax provinces.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TaxMethod.#ctor(System.Guid,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.TaxMethod"/> class.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="countryCode">
            The country code.
            </param>
        </member>
        <member name="P:NKart.Core.Models.TaxMethod.ProviderKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.TaxMethod.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.TaxMethod.CountryCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.TaxMethod.PercentageTaxRate">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.TaxMethod.Provinces">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.TaxMethod.ProductTaxMethod">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.TaxMethod.HasProvinces">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Models.TaxMethod.TaxProvincesChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the tax provinces changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:NKart.Core.Models.TaxMethod.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod.PropertySelectors.PercentageTaxRateSelector">
            <summary>
            The percentage tax rate selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod.PropertySelectors.ProvincesChangedSelector">
            <summary>
            The provinces changed selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.TaxMethod.PropertySelectors.ProductTaxMethodSelector">
            <summary>
            The product tax method selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.TaxProvince">
            <summary>
            Represents a province from a taxation context
            </summary>
        </member>
        <member name="M:NKart.Core.Models.TaxProvince.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.TaxProvince"/> class.
            </summary>
            <param name="code">
            The code.
            </param>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:NKart.Core.Models.TaxProvince.PercentAdjustment">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.Warehouse">
            <inheritdoc/>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._catalogs">
            <summary>
            The catalogs.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._address1">
            <summary>
            The address 1.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._address2">
            <summary>
            The address 2.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._locality">
            <summary>
            The locality.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._region">
            <summary>
            The region.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._postalCode">
            <summary>
            The postal code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._countryCode">
            <summary>
            The country code.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._phone">
            <summary>
            The phone.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._email">
            <summary>
            The email.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse._isDefault">
            <summary>
            The is default.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Warehouse.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Warehouse"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Warehouse.#ctor(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Warehouse"/> class.
            </summary>
            <param name="catalogs">
            The catalogs.
            </param>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.Address1">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.Address2">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.Locality">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.Region">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.PostalCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.CountryCode">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.Phone">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.Email">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.IsDefault">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Warehouse.WarehouseCatalogs">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.Warehouse.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.Address1Selector">
            <summary>
            The address 1 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.Address2Selector">
            <summary>
            The address 2 selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.LocalitySelector">
            <summary>
            The locality selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.RegionSelector">
            <summary>
            The region selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.PostalCodeSelector">
            <summary>
            The postal code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.CountryCodeSelector">
            <summary>
            The country code selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.PhoneSelector">
            <summary>
            The phone selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.EmailSelector">
            <summary>
            The email selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Warehouse.PropertySelectors.IsDefaultSelector">
            <summary>
            The primary selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.ShipCountry">
            <summary>
            Represents a country associated with a warehouse
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipCountry._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipCountry._country">
            <summary>
            The <see cref="T:NKart.Core.Models.ICountry"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipCountry._catalogKey">
            <summary>
            The warehouse catalog key.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.ShipCountry.#ctor(System.Guid,NKart.Core.Models.ICountry)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.ShipCountry"/> class.
            </summary>
            <param name="catalogKey">
            The catalog key.
            </param>
            <param name="country">
            The country.
            </param>
        </member>
        <member name="P:NKart.Core.Models.ShipCountry.CatalogKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.ShipCountry.CountryCode">
            <summary>
            Gets the country code.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ShipCountry.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ShipCountry.Iso">
            <summary>
            Gets the ISO.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ShipCountry.ProvinceLabel">
            <summary>
            Gets the province label.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ShipCountry.Provinces">
            <summary>
            Gets the provinces.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.ShipCountry.HasProvinces">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.ShipCountry.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.ShipCountry.PropertySelectors.CatalogKeySelector">
            <summary>
            The catalog key selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.WarehouseCatalog">
            <inheritdoc/>
        </member>
        <member name="F:NKart.Core.Models.WarehouseCatalog._ps">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.WarehouseCatalog._warehouseKey">
            <summary>
            The warehouse key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.WarehouseCatalog._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.WarehouseCatalog._description">
            <summary>
            The description.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.WarehouseCatalog.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.WarehouseCatalog"/> class.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.WarehouseCatalog.WarehouseKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.WarehouseCatalog.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.WarehouseCatalog.Description">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.WarehouseCatalog.PropertySelectors">
            <summary>
            The property selectors.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.WarehouseCatalog.PropertySelectors.NameSelector">
            <summary>
            The name selector.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.WarehouseCatalog.PropertySelectors.DescriptionSelector">
            <summary>
            The description selector.
            </summary>
        </member>
        <member name="T:NKart.Core.Models.CatalogInventory">
            <summary>
            Catalog inventory
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CatalogInventory._catalogKey">
            <summary>
            The catalog key.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CatalogInventory._productVariantKey">
            <summary>
            The product variant key.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.CatalogInventory.#ctor(System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.CatalogInventory"/> class.
            </summary>
            <param name="catalogKey">
            The catalog key.
            </param>
            <param name="productVariantKey">
            The product variant key.
            </param>
        </member>
        <member name="P:NKart.Core.Models.CatalogInventory.CatalogKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CatalogInventory.ProductVariantKey">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CatalogInventory.Count">
            <inheritdoc/>>
        </member>
        <member name="P:NKart.Core.Models.CatalogInventory.LowCount">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CatalogInventory.Location">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CatalogInventory.UpdateDate">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.CatalogInventory.CreateDate">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Models.CatalogInventoryCollection">
            <summary>
            Defines a product variant inventory collection
            </summary>
        </member>
        <member name="F:NKart.Core.Models.CatalogInventoryCollection._addLocker">
            <summary>
            The add locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.CatalogInventoryCollection.MakeKeyForItem(NKart.Core.Models.ICatalogInventory)">
            <summary>
            The make key for item.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.CatalogInventoryCollection.Contains(System.String)">
            <summary>
            The contains.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.CatalogInventoryCollection.Contains(System.Guid)">
            <summary>
            The contains.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.CatalogInventoryCollection.IndexOfKey(System.String)">
            <summary>
            The index of key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Models.CatalogInventoryCollection.Add(NKart.Core.Models.ICatalogInventory)">
            <summary>
            The add.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Models.CatalogInventoryCollection.GetKeyForItem(NKart.Core.Models.ICatalogInventory)">
            <summary>
            The get key for item.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Models.AnonymousCustomer">
            <summary>
            The anonymous customer.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.AnonymousCustomer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.AnonymousCustomer"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.AnonymousCustomer.#ctor(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.AnonymousCustomer"/> class.
            </summary>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="T:NKart.Core.Models.IAnonymousCustomer">
            <summary>
            Marker interface for anonymous customers
            </summary>
        </member>
        <member name="T:NKart.Core.Models.IProvince">
            <summary>
            Represents a province.
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProvince.Name">
            <summary>
            Gets the name of the province
            </summary>
        </member>
        <member name="P:NKart.Core.Models.IProvince.Code">
            <summary>
            Gets the two letter ISO province code
            </summary>
        </member>
        <member name="T:NKart.Core.Models.Province">
            <inheritdoc/>
        </member>
        <member name="F:NKart.Core.Models.Province._name">
            <summary>
            The name.
            </summary>
        </member>
        <member name="F:NKart.Core.Models.Province._code">
            <summary>
            The two letter ISO code.
            </summary>
        </member>
        <member name="M:NKart.Core.Models.Province.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Models.Province"/> class.
            </summary>
            <param name="code">
            The code.
            </param>
            <param name="name">
            The name.
            </param>
        </member>
        <member name="P:NKart.Core.Models.Province.Name">
            <inheritdoc/>
        </member>
        <member name="P:NKart.Core.Models.Province.Code">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.PagedCollection">
            <summary>
            The paged collection.
            </summary>
        </member>
        <member name="P:NKart.Core.PagedCollection.TotalItems">
            <summary>
            Gets or sets the total items.
            </summary>
        </member>
        <member name="P:NKart.Core.PagedCollection.CurrentPage">
            <summary>
            Gets or sets the current page.
            </summary>
        </member>
        <member name="P:NKart.Core.PagedCollection.PageSize">
            <summary>
            Gets or sets the page size.
            </summary>
        </member>
        <member name="P:NKart.Core.PagedCollection.TotalPages">
            <summary>
            Gets or sets the total pages.
            </summary>
        </member>
        <member name="P:NKart.Core.PagedCollection.SortField">
            <summary>
            Gets or sets the sort field.
            </summary>
        </member>
        <member name="P:NKart.Core.PagedCollection.IsFirstPage">
            <summary>
            Gets a value indicating whether is first page.
            </summary>
        </member>
        <member name="P:NKart.Core.PagedCollection.IsLastPage">
            <summary>
            Gets a value indicating whether is last page.
            </summary>
        </member>
        <member name="T:NKart.Core.PagedCollection`1">
            <summary>
            The paged collection.
            </summary>
            <typeparam name="TResultType">
            The type to be paged
            </typeparam>
        </member>
        <member name="P:NKart.Core.PagedCollection`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
        </member>
        <member name="M:NKart.Core.PagedCollection`1.Empty">
            <summary>
            Returns an empty page for defaults.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.PagedCollection"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddDigitalMediaTable">
            <summary>
            Adds the digital media table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddDigitalMediaTable._schemaHelper">
            <summary>
            The _schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddDigitalMediaTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddDigitalMediaTable"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddDigitalMediaTable.Up">
            <summary>
            Adds the indexes to the merchDigitalMedia table.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddDigitalMediaTable.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddIndexesToInvoice">
            <summary>
            Adds name, price, sale price, barcode and manufacturer indexes to product variant.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddIndexesToInvoice.Up">
            <summary>
            Adds the indexes to the merchInvoice table.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddIndexesToInvoice.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddIndexesToInvoice.CreateIndex(NKart.Core.Persistence.DatabaseModelDefinitions.DbIndexDefinition[],System.String,System.String)">
            <summary>
            Creates an index.
            </summary>
            <param name="dbIndexes">
            The collection of database indexes.
            </param>
            <param name="indexName">
            The index name.
            </param>
            <param name="columnName">
            The column name.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddIndexesToProductVariant">
            <summary>
            Adds name, price, sale price, barcode and manufacturer indexes to product variant.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddIndexesToProductVariant.Up">
            <summary>
            Adds the indexes to the merchProductVariant table.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddIndexesToProductVariant.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFiveZero.AddIndexesToProductVariant.CreateIndex(NKart.Core.Persistence.DatabaseModelDefinitions.DbIndexDefinition[],System.String,System.String)">
            <summary>
            Creates an index.
            </summary>
            <param name="dbIndexes">
            The collection of database indexes.
            </param>
            <param name="indexName">
            The index name.
            </param>
            <param name="columnName">
            The column name.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFourZero.AddShipmentTrackingUrlColumns">
            <summary>
            Adds the shipment tracking Url field.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFourZero.AddShipmentTrackingUrlColumns.Up">
            <summary>
            Updates the merchShipment table adding the trackingUrl field.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoFourZero.AddShipmentTrackingUrlColumns.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoSevenTwo.AddIsDefaultColumn">
            <summary>
                Adds new IsDefault column to product variants which makes it easier to display the default selected variant
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoSevenTwo.AddIsDefaultColumn.Up">
            <summary>
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoSevenTwo.AddIsDefaultColumn.Down">
            <summary>
                Downgrades the database.
            </summary>
            <exception cref="T:NKart.Core.Persistence.Migrations.DataLossException"></exception>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeOne.AlterProductAttributeColumnToNtext">
            <summary>
            Alters detachedContentValues column to NTEXT.
            </summary>
            <seealso cref="!:http://issues.merchello.com/youtrack/issue/M-1225" />
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeOne.AlterProductAttributeColumnToNtext.Up">
            <summary>
            Updates the merchProductAttribute table altering detachedContentValues to NTEXT.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeOne.AlterProductAttributeColumnToNtext.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero.AddEntityCollectionColumns">
            <summary>
            Extends the merchEntityCollection table with addition columns.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero.AddEntityCollectionColumns.Up">
            <summary>
            Updates the merchEntityCollection table adding the columns.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero.AddEntityCollectionColumns.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero.AlterAppliedPaymentDescriptionFieldSize">
            <summary>
            Migration to update the description field size in the merchAppliedPayment table
            </summary>
            <remarks>
            See issue http://issues.merchello.com/youtrack/issue/M-682 for details
            </remarks>
            <seealso cref="T:Umbraco.Core.Persistence.Migrations.MigrationBase" />
            <seealso cref="T:NKart.Core.Persistence.Migrations.IMerchelloMigration" />
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero.AlterAppliedPaymentDescriptionFieldSize.Up">
            <summary>
            Updates the column size
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoThreeZero.AlterAppliedPaymentDescriptionFieldSize.Down">
            <summary>
            Undoes the column size update
            </summary>
            <exception cref="T:Umbraco.Core.Persistence.Migrations.DataLossException">Cannot downgrade from a version 2.3.0 database to a prior version, the database schema has already been modified</exception>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.AddEntityCollectionTypeField">
            <summary>
            The add entity collection type field.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.AddEntityCollectionTypeField._database">
            <summary>
            The _database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.AddEntityCollectionTypeField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.AddEntityCollectionTypeField"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.AddEntityCollectionTypeField.Up">
            <summary>
            Inserts the entity collection type field.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.AddEntityCollectionTypeField.Down">
            <summary>
            Deletes the entity collection type field.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateCustomer2EntityCollectionTable">
            <summary>
            The create customer 2 entity collection table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateCustomer2EntityCollectionTable._schemaHelper">
            <summary>
            The _schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateCustomer2EntityCollectionTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateCustomer2EntityCollectionTable"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateCustomer2EntityCollectionTable.Up">
            <summary>
            Adds the table to the database
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateCustomer2EntityCollectionTable.Down">
            <summary>
            The down.
            </summary>
            <exception cref="T:Umbraco.Core.Persistence.Migrations.DataLossException">
            Throws a data loss exception on a downgrade attempt
            </exception>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateInvoice2EntityCollectionTable">
            <summary>
            Create merchInvoice2EntityCollection table in the database.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateInvoice2EntityCollectionTable._schemaHelper">
            <summary>
            The schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateInvoice2EntityCollectionTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateInvoice2EntityCollectionTable"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateInvoice2EntityCollectionTable.Up">
            <summary>
            Adds the table to the database
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateInvoice2EntityCollectionTable.Down">
            <summary>
            The down.
            </summary>
            <exception cref="T:Umbraco.Core.Persistence.Migrations.DataLossException">
            Throws a data loss exception on a downgrade attempt
            </exception>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateProduct2EntityCollectionTable">
            <summary>
            The create product 2 product collection table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateProduct2EntityCollectionTable._schemaHelper">
            <summary>
            The schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateProduct2EntityCollectionTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateProduct2EntityCollectionTable"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateProduct2EntityCollectionTable.Up">
            <summary>
            Creates the merchProduct2ProductCollection table in the database
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateProduct2EntityCollectionTable.Down">
            <summary>
            The down.
            </summary>
            <exception cref="T:Umbraco.Core.Persistence.Migrations.DataLossException">
            Throws a data loss exception on a downgrade attempt
            </exception>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateEntityCollectionTable">
            <summary>
            The create product collection table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateEntityCollectionTable._schemaHelper">
            <summary>
            The schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateEntityCollectionTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateEntityCollectionTable"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateEntityCollectionTable.Up">
            <summary>
            Adds the merchProductCollection table to the database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneElevenZero.CreateEntityCollectionTable.Down">
            <summary>
            The down.
            </summary>
            <exception cref="T:Umbraco.Core.Persistence.Migrations.DataLossException">
            Throws a data loss exception if a downgrade is attempted
            </exception>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddIndexToProductVariantSku">
            <summary>
            Alters the merchInvoice table to add a currency code column.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddIndexToProductVariantSku.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddIndexToProductVariantSku"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddIndexToProductVariantSku.Up">
            <summary>
            Adds the unique index to the SKU
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddIndexToProductVariantSku.Down">
            <summary>
            Removes the index
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn">
            <summary>
            Alters the merchInvoice table to add a currency code column.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn._database">
            <summary>
            The Umbraco database.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn._sqlSyntax">
            <summary>
            The SQL syntax provider.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn._invoiceService">
            <summary>
            The <see cref="T:NKart.Core.Services.InvoiceService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn.Up">
            <summary>
            Upgrades the database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn.InvoiceCurrencyDto">
            <summary>
            A simple DTO for updating the currency codes in the invoice table.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn.InvoiceCurrencyDto.InvoiceKey">
            <summary>
            Gets or sets the invoice key.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneFourteenZero.AddInvoiceCurrencyCodeColumn.InvoiceCurrencyDto.CurrencyCode">
            <summary>
            Gets or sets the currency code.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.AddTaxMethodColumn">
            <summary>
            Adds the productTaxMethod field to the merchelloTaxMethod table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.AddTaxMethodColumn._databaseSchemaHelper">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.DatabaseSchemaHelper"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.AddTaxMethodColumn._sqlSyntaxProvider">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.AddTaxMethodColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.AddTaxMethodColumn"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.AddTaxMethodColumn.#ctor(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.AddTaxMethodColumn"/> class.
            </summary>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.AddTaxMethodColumn.Up">
            <summary>
            Adds the productTaxation field on an upgrade
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.AddTaxMethodColumn.Down">
            <summary>
            Removes the productTaxMethod field on a downgrade
            </summary>        
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.InsertNewMerchelloSettingsGlobalTaxationApplicationKey">
            <summary>
            Insert the new merchello settings GlobalTaxationApplication setting.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.InsertNewMerchelloSettingsGlobalTaxationApplicationKey._database">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.InsertNewMerchelloSettingsGlobalTaxationApplicationKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.InsertNewMerchelloSettingsGlobalTaxationApplicationKey"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.InsertNewMerchelloSettingsGlobalTaxationApplicationKey.#ctor(Umbraco.Core.Persistence.Database)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.InsertNewMerchelloSettingsGlobalTaxationApplicationKey"/> class.
            </summary>
            <param name="database">
            The database.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.InsertNewMerchelloSettingsGlobalTaxationApplicationKey.Up">
            <summary>
            Adds the settings key
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTenZero.InsertNewMerchelloSettingsGlobalTaxationApplicationKey.Down">
            <summary>
            Removes the key
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo.InsertNewMerchelloSettingsMigrationKey">
            <summary>
            The insert new type field data for Merchello version 1.8.2.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo.InsertNewMerchelloSettingsMigrationKey._database">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo.InsertNewMerchelloSettingsMigrationKey.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo.InsertNewMerchelloSettingsMigrationKey"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo.InsertNewMerchelloSettingsMigrationKey.#ctor(Umbraco.Core.Persistence.Database)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo.InsertNewMerchelloSettingsMigrationKey"/> class.
            </summary>
            <param name="database">
            The <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo.InsertNewMerchelloSettingsMigrationKey.Up">
            <summary>
            Upgrade migration
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneEightTwo.InsertNewMerchelloSettingsMigrationKey.Down">
            <summary>
            Downgrade migration
            </summary>
            <exception cref="T:Umbraco.Core.Persistence.Migrations.DataLossException">
            Throws a data loss exception
            </exception>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.CreateOneNineZeroTables">
            <summary>
            Adds new database tables .
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.CreateOneNineZeroTables.OrderedTables">
            <summary>
            Tables in the order of creation or reverse deletion.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.CreateOneNineZeroTables._schemaHelper">
            <summary>
            The schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.CreateOneNineZeroTables.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.CreateOneNineZeroTables"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.CreateOneNineZeroTables.Up">
            <summary>
            The up.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.CreateOneNineZeroTables.Down">
            <summary>
            Throws a data loss exception
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.InsertNewTypeFieldData">
            <summary>
            The insert new type field data.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.InsertNewTypeFieldData.Up">
            <summary>
            The up.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneNineZero.InsertNewTypeFieldData.Down">
            <summary>
            Throws a data loss exception
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneThirteenOne.CreateNoteTable">
            <summary>
            Responsible for creating the merchNote table on upgrading to 1.13.1.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneThirteenOne.CreateNoteTable._database">
            <summary>
            The _database.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneThirteenOne.CreateNoteTable._schemaHelper">
            <summary>
            The schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneThirteenOne.CreateNoteTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneThirteenOne.CreateNoteTable"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneThirteenOne.CreateNoteTable.Up">
            <summary>
            Performs the task of adding the table.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneThirteenOne.CreateNoteTable.Down">
            <summary>
            Downgrades the database.
            </summary>
            <exception cref="T:Umbraco.Core.Persistence.Migrations.DataLossException">
            Throws a data loss exception
            </exception>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateDetachedPublishedContentTypeTable">
            <summary>
            The create detached published content type table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateDetachedPublishedContentTypeTable._database">
            <summary>
            The _database.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateDetachedPublishedContentTypeTable._schemaHelper">
            <summary>
            The schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateDetachedPublishedContentTypeTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateDetachedPublishedContentTypeTable"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateDetachedPublishedContentTypeTable.Up">
            <summary>
            Adds the merchDetachedPublishedContentType table to the database
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateDetachedPublishedContentTypeTable.Down">
            <summary>
            The down.
            </summary>
            <exception cref="T:Umbraco.Core.Persistence.Migrations.DataLossException">'
            Throws a data loss exception on a downgrade attempt
            </exception>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateProductVariantDetachedContentTable">
            <summary>
            The create product variant 2 detached content type table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateProductVariantDetachedContentTable._schemaHelper">
            <summary>
            The schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateProductVariantDetachedContentTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateProductVariantDetachedContentTable"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateProductVariantDetachedContentTable.Up">
            <summary>
            Creates the ProductVariant2DetachedContentType table
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.CreateProductVariantDetachedContentTable.Down">
            <summary>
            The down.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.InsertNewMerchelloSettingDefaultExtendedContentCulture">
            <summary>
            Insert new merchello setting default extended content culture.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.InsertNewMerchelloSettingDefaultExtendedContentCulture._database">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.InsertNewMerchelloSettingDefaultExtendedContentCulture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.InsertNewMerchelloSettingDefaultExtendedContentCulture"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.InsertNewMerchelloSettingDefaultExtendedContentCulture.#ctor(Umbraco.Core.Persistence.Database)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.InsertNewMerchelloSettingDefaultExtendedContentCulture"/> class.
            </summary>
            <param name="database">
            The database.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.InsertNewMerchelloSettingDefaultExtendedContentCulture.Up">
            <summary>
            Adds the settings key
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionOneTwelveZero.InsertNewMerchelloSettingDefaultExtendedContentCulture.Down">
            <summary>
            Removes the key
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProduct2ProductOptionColumns">
            <summary>
            Adds columns to the merchProduct2ProductOption table.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProduct2ProductOptionColumns.Up">
            <summary>
            Updates the merchProduct2ProductOption table adding the columns.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProduct2ProductOptionColumns.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProductAttributeColumns">
            <summary>
            Adds columns to the merchProductAttribute table.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProductAttributeColumns.Up">
            <summary>
            Updates the merchProductAttribute table adding the columns.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProductAttributeColumns.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProductOptionColumns">
            <summary>
            Adds the "shared" field to the merchProductOption table for shared option refactoring.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProductOptionColumns.Up">
            <summary>
            Updates the merchProductOption table adding the shared and detached content type key fields.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProductOptionColumns.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProductOptionTypeField">
            <summary>
            Responsible for adding the ProductOption Entity type field key.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProductOptionTypeField.Up">
            <summary>
            Updates the merchTypeField table adding the ProductOption type field value.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.AddProductOptionTypeField.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.CreateProductOptionAttributeShareTable">
            <summary>
            Creates the new merchProductOptionAttributeShare table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.CreateProductOptionAttributeShareTable._schemaHelper">
            <summary>
            The _schema helper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.CreateProductOptionAttributeShareTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.CreateProductOptionAttributeShareTable"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.CreateProductOptionAttributeShareTable.Up">
            <summary>
            Adds the new table to the database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoTwoZero.CreateProductOptionAttributeShareTable.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteAuthorColumn">
            <summary>
            Adds an author column to the merchNote table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteAuthorColumn._database">
            <summary>
            The Umbraco database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteAuthorColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteAuthorColumn"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteAuthorColumn.Up">
            <summary>
            Adds the author field to the notes table.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteAuthorColumn.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteInternalOnlyColumn">
            <summary>
            Adds an internal only column to the notes table.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteInternalOnlyColumn._database">
            <summary>
            The Umbraco database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteInternalOnlyColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteInternalOnlyColumn"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteInternalOnlyColumn.Up">
            <summary>
            Upgrades the database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddNoteInternalOnlyColumn.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddRedirectPaymentMethodType">
            <summary>
            Adds a redirect payment method type.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddRedirectPaymentMethodType._database">
            <summary>
            The Umbraco database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddRedirectPaymentMethodType.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddRedirectPaymentMethodType"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddRedirectPaymentMethodType.#ctor(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddRedirectPaymentMethodType"/> class.
            </summary>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddRedirectPaymentMethodType.Up">
            <summary>
            Adds the PaymentMethodType field for redirect payments
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddRedirectPaymentMethodType.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddStoreSettingHasDomainRecord">
            <summary>
            Adds a new store setting that is toggled during migrations to ping with the current domain name.
            Used to assist Merchello project team (internally) to better understand Merchello usage and implementations anonymously.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddStoreSettingHasDomainRecord._database">
            <summary>
            The Umbraco database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddStoreSettingHasDomainRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddStoreSettingHasDomainRecord"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddStoreSettingHasDomainRecord.Up">
            <summary>
            Upgrades the database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.AddStoreSettingHasDomainRecord.Down">
            <summary>
            Downgrades the database
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.CopyOriginalCustomerNotesToFirstNote">
            <summary>
            Copies original customer notes to first note.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.CopyOriginalCustomerNotesToFirstNote._database">
            <summary>
            The Umbraco database.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.CopyOriginalCustomerNotesToFirstNote._sqlSyntax">
            <summary>
            The SQL syntax provider.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.CopyOriginalCustomerNotesToFirstNote._noteService">
            <summary>
            The _note service.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.CopyOriginalCustomerNotesToFirstNote.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.CopyOriginalCustomerNotesToFirstNote"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.CopyOriginalCustomerNotesToFirstNote.Up">
            <summary>
            Copies data from customer.note field into a new note in the collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.CopyOriginalCustomerNotesToFirstNote.Down">
            <summary>
            Downgrades the database.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.MigrationFixToBeRemovedBeforeRelease">
            <summary>
            Previous testing migrations have notes column in customer field removed (which it can't be since we have to alter the customerDto to remove the notes column ref).
            Removing this field will need to be done in the 2.1.0 release
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.MigrationFixToBeRemovedBeforeRelease._database">
            <summary>
            The Umbraco database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.MigrationFixToBeRemovedBeforeRelease.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.MigrationFixToBeRemovedBeforeRelease"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Upgrades.TargetVersionTwoZeroZero.MigrationFixToBeRemovedBeforeRelease.Up">
            <summary>
            The up.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Analytics.MigrationDomain">
            <summary>
            The migration domain.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Analytics.MigrationDomain.MigrationKey">
            <summary>
            Gets or sets the migration key.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Analytics.MigrationDomain.DomainName">
            <summary>
            Gets or sets the domain name.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Analytics.MigrationRecord">
            <summary>
            Anonymous analytic data used to give the Merchello team an idea of how many installs there are.
            We will use this information to help assess usage growth or decline. 
            </summary>
            <remarks>
            You can completely disable this tracking by adding the attribute enableInstallTracking="false" to the merchello element (root)
            in the merchello.config file
            '<merchello  enableInstallTracking="False" />' 
            </remarks>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Analytics.MigrationRecord.MigrationKey">
            <summary>
            Gets or sets the migration key.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Analytics.MigrationRecord.DbProvider">
            <summary>
            Gets or sets the DB provider.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Analytics.MigrationRecord.InstallDate">
            <summary>
            Gets or sets the install date.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Analytics.MigrationRecord.CurrentVersion">
            <summary>
            Gets or sets the current version.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Analytics.MigrationRecord.TargetVersion">
            <summary>
            Gets or sets the version.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Analytics.MigrationRecord.IsUpgrade">
            <summary>
            Gets or sets a value indicating whether is upgrade.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Analytics.MigrationRecord.DomainName">
            <summary>
            Gets or sets the domain name.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.CoreMigrationManager">
            <summary>
            The merchello upgrade helper.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.CoreMigrationManager._database">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.CoreMigrationManager._sqlSyntaxProvider">
            <summary>
            The SQL syntax provider.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.CoreMigrationManager._logger">
            <summary>
            The _logger.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.CoreMigrationManager.#ctor(Umbraco.Core.Persistence.Database,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.CoreMigrationManager"/> class.
            </summary>
            <param name="database">
            The database.
            </param>
            <param name="sqlSyntaxProvider">
            The SQL Syntax Provider.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.CoreMigrationManager.UpgradedEventHandler">
            <summary>
            The delegate for the upgraded event handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:NKart.Core.Events.MerchelloMigrationEventArgs"/>.
            </param>
        </member>
        <member name="E:NKart.Core.Persistence.Migrations.CoreMigrationManager.Upgraded">
            <summary>
            The upgraded event.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.CoreMigrationManager.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.CoreMigrationManager.EnsureMerchelloVersion">
            <summary>
            Checks the binary version against the web.config configuration status version.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.CoreMigrationManager.EnsureDatabase">
            <summary>
            Ensures the Merchello database has been installed.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.CoreMigrationManager.UpgradeMerchello(Umbraco.Core.Persistence.Database)">
            <summary>
            Executes the Migration runner.
            </summary>
            <param name="database">
            The database.
            </param>
            <returns>
            A value indicating whether or not the migration was successful.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.CoreMigrationManager.InitializeMigrations(System.Collections.Generic.List{Umbraco.Core.Persistence.Migrations.IMigration},Umbraco.Core.Persistence.Database,Umbraco.Core.Persistence.DatabaseProviders,System.Boolean)">
            <summary>
            Initializes the Merchell Migrations.
            </summary>
            <param name="migrations">
            The migrations.
            </param>
            <param name="database">
            The database.
            </param>
            <param name="databaseProvider">
            The database provider.
            </param>
            <param name="isUpgrade">
            The is upgrade.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Migrations.MerchelloMigrationContext"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.CoreMigrationManager.EnsureMigrationKey(NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult)">
            <summary>
            The ensure migration key.
            </summary>
            <param name="schemaResult">
            The schema result.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.CoreMigrationManager.InsertMigrationKey(System.String)">
            <summary>
            The insert migration key.
            </summary>
            <param name="migrationKey">
            The migration key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.CoreMigrationManager.OnUpgraded(NKart.Core.Persistence.Migrations.Analytics.MigrationRecord)">
            <summary>
            The on upgraded.
            </summary>
            <param name="record">
            The record.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.DataLossException">
            <summary>
            Used if a migration has executed but the whole process has failed and cannot be rolled back
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.IMerchelloMigration">
            <summary>
            Marker interface for Merchello migrations.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper">
            <summary>
            The merchello database schema helper.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper._db">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper._logger">
            <summary>
            The <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper._syntaxProvider">
            <summary>
            The _syntax provider.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper._umbSchemaHelper">
            <summary>
            The Umbraco <see cref="T:Umbraco.Core.Persistence.DatabaseSchemaHelper"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper.#ctor(Umbraco.Core.ApplicationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper"/> class.
            </summary>
            <param name="applicationContext">
            The application Context.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper.#ctor(Umbraco.Core.ApplicationContext,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper"/> class.
            </summary>
            <param name="applicationContext">
            The application context.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper.#ctor(Umbraco.Core.Persistence.Database,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper"/> class.
            </summary>
            <param name="db">
            The DB.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="syntaxProvider">
            The syntax provider.
            </param>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper.UmbSchemaHelper">
            <summary>
            Gets the Umbraco <see cref="T:Umbraco.Core.Persistence.DatabaseSchemaHelper"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper.CreateDatabaseSchema">
            <summary>
            The create database schema.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MerchelloDatabaseSchemaHelper.UninstallDatabaseSchema">
            <summary>
            The uninstall database schema.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.MerchelloMigrationBase">
            <summary>
            The merchello migration base.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MerchelloMigrationBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.MerchelloMigrationBase"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MerchelloMigrationBase.#ctor(Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.MerchelloMigrationBase"/> class.
            </summary>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.MerchelloMigrationContext">
            <summary>
            The <see cref="T:NKart.Core.Persistence.Migrations.MerchelloMigrationContext"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MerchelloMigrationContext.#ctor(Umbraco.Core.Persistence.DatabaseProviders,Umbraco.Core.Persistence.Database,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.MerchelloMigrationContext"/> class.
            </summary>
            <param name="databaseProvider">
            The database provider.
            </param>
            <param name="database">
            The database.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.MerchelloMigrationContext.Expressions">
            <summary>
            Gets or sets the expressions.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.MerchelloMigrationContext.CurrentDatabaseProvider">
            <summary>
            Gets the current database provider.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.MerchelloMigrationContext.Database">
            <summary>
            Gets the database.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.MerchelloMigrationContext.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.MigrationResolver">
            <summary>
            The migration resolver.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.MigrationResolver._logger">
            <summary>
            The Logger.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MigrationResolver.#ctor(Umbraco.Core.Logging.ILogger,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.MigrationResolver"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="instanceTypes">
            The instanceTypes.
            </param>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.MigrationResolver.InstanceTypes">
            <summary>
            Gets the instance types.
            </summary>
            <remarks>
            Used for testing
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.MigrationResolver.OrderedUpgradeMigrations(System.Version,System.Version)">
            <summary>
            The ordered upgrade migrations.
            </summary>
            <param name="currentVersion">
            The current version.
            </param>
            <param name="targetVersion">
            The target version.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult">
            <summary>
            Class to override Umbraco DatabaseSchemaResult with Merchello specifics
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult._database">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult.#ctor(Umbraco.Core.Persistence.Database)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult"/> class.
            </summary>
            <param name="database">
            The database.
            </param>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult.MerchelloErrors">
            <summary>
            Gets or sets the merchello errors.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult.DbIndexDefinitions">
            <summary>
            Gets or sets the database index definitions.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult.TypeFields">
            <summary>
            Gets or sets the type fields.
            </summary>
            <remarks>
            These can be helpful when determining the Merchello Version
            </remarks>
        </member>
        <member name="P:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult.StoreSettings">
            <summary>
            Gets or sets the store settings.
            </summary>
            <remarks>
            These can be helpful when determining the Merchello Version
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult.DetermineInstalledVersion">
            <summary>
            Determines the version of the currently installed database.
            </summary>
            <returns>
            A <see cref="T:System.Version"/> with Major and Minor values for 
            non-empty database, otherwise "0.0.0" for empty databases.
            </returns>
            <remarks>
            TODO these checks could be moved into a task chain for easier maintenance
            </remarks>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation">
            <summary>
            Represents the initial data creation by running Insert for the base data.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation._database">
            <summary>
            The database.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation._logger">
            <summary>
            The <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation.#ctor(Umbraco.Core.Persistence.Database,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation"/> class.
            </summary>
            <param name="database">
            The database.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation.InitializeBaseData(System.String)">
            <summary>
            Initialize the base data creation by inserting the data foundation for umbraco
            specific to a table
            </summary>
            <param name="tableName">Name of the table to create base data for</param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation.CreateDbTypeFieldData">
            <summary>
            The create database type field data.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation.CreateInvoiceStatusData">
            <summary>
            Adds the invoice statuses.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation.CreateOrderStatusData">
            <summary>
            Adds the order statuses
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation.CreateShipmentStatusData">
            <summary>
            Adds the shipment statuses.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation.CreateWarehouseData">
            <summary>
            Creates the warehouse data.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation.CreateGatewayProviderSettingsData">
            <summary>
            The create gateway provider settings data.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.BaseDataCreation.CreateStoreSettingData">
            <summary>
            Adds the default store settings.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation">
            <summary>
            Represents the initial database schema creation by running CreateTable for all DTOs against the database.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.OrderedTables">
            <summary>
            The ordered tables.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation._database">
            <summary>
            The database.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation._umbSchemaHelper">
            <summary>
            The Umbraco's <see cref="T:Umbraco.Core.Persistence.DatabaseSchemaHelper"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation._logger">
            <summary>
            The <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation._sqlSyntax">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.#ctor(Umbraco.Core.Persistence.Database,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.DatabaseSchemaHelper,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation"/> class.
            </summary>
            <param name="database">
            The database.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="databaseSchemaHelper">
            The database Schema Helper.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.UninstallDatabaseSchema">
            <summary>
            Drops all Merchello tables in the database
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.InitializeDatabaseSchema">
            <summary>
            Initialize the database by creating the umbraco database schema
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.ValidateSchema">
            <summary>
            Validates the schema of the current database
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.LoadMerchelloData(NKart.Core.Persistence.Migrations.Initial.MerchelloDatabaseSchemaResult)">
            <summary>
            The load merchello data.
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.DatabaseEventHandler">
            <summary>
            The save event handler
            </summary>
        </member>
        <member name="E:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.BeforeCreation">
            <summary>
            Occurs when [before save].
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.FireBeforeCreation(NKart.Core.Events.DatabaseCreationEventArgs)">
            <summary>
            Raises the <see cref="E:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.BeforeCreation"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.AfterCreation">
            <summary>
            Occurs when [after save].
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.FireAfterCreation(NKart.Core.Events.DatabaseCreationEventArgs)">
            <summary>
            Raises the <see cref="E:NKart.Core.Persistence.Migrations.Initial.DatabaseSchemaCreation.AfterCreation"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IProductBackOfficeRepository">
            <summary>
            Represents a back office repository.
            </summary>
            <remarks>
            Port forward to V3
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductBackOfficeRepository.GetRecentlyUpdatedProducts(System.Int64,System.Int64)">
            <summary>
            Gets recently updated products.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <returns>
            The <see cref="T:NKart.Core.PagedCollection"/>.
            </returns>
            <remarks>
            Return value breaks the pattern in this repository for easier port forward to Merchello Version 3.0
            where all repositories return <see cref="T:NKart.Core.PagedCollection"/> rather than the ORM <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </remarks>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IPortForwardProductRepository">
            <summary>
            Represents a price and collection queries for products.
            </summary>
            <remarks>
            This is simply a marker interface to mark V2 additions that need to be refactored and ported forward to V3
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPortForwardProductRepository.GetKeysThatExistInAllCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets the entity keys for distinct entities in multiple collections
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPortForwardProductRepository.GetKeysThatExistInAllCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a paged list of distinct keys for entities in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            A filter term
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPortForwardProductRepository.GetKeysNotInAnyCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPortForwardProductRepository.GetKeysNotInAnyCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The filter term
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPortForwardProductRepository.GetKeysThatExistInAnyCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPortForwardProductRepository.GetKeysThatExistInAnyCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            The search term.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPortForwardProductRepository.GetAllManufacturers">
            <summary>
            Gets a list of all manufacturers.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> list of distinct manufacturers.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPortForwardProductRepository.GetByAdvancedSearch(System.Guid,System.String[],System.String,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Special case advanced search.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="includeFields">
            The include fields.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="manufacturer">
            The manufacturer.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="direction">
            The direction.
            </param>
            <returns>
            The <see cref="T:NKart.Core.PagedCollection"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ProductRepository">
            <inheritdoc/>
            <inheritdoc/>
            <summary>
            The product repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetRecentlyUpdatedProducts(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ProductRepository.ValidSearchFields">
            <summary>
            A list of valid search fields.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysThatExistInAllCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysThatExistInAllCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysNotInAnyCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysNotInAnyCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysThatExistInAnyCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysThatExistInAnyCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetAllManufacturers">
            <summary>
            Gets a list of currently listed Manufacturers.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> (manufacturer names).
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetByAdvancedSearch(System.Guid,System.String[],System.String,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ProductRepository._productVariantRepository">
            <summary>
            The product variant repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ProductRepository._productOptionRepository">
            <summary>
            The product option repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,NKart.Core.Persistence.Repositories.IProductVariantRepository,NKart.Core.Persistence.Repositories.IProductOptionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ProductRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
            <param name="productVariantRepository">
            The product variant repository.
            </param>
            <param name="productOptionRepository">
            The product option Repository.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NKart.Core.Persistence.Repositories.ProductRepository.GetPage(System.Int64,System.Int64,Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IProduct},System.String,NKart.Core.Persistence.Querying.SortDirection)" -->
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetPagedKeys(System.Int64,System.Int64,Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IProduct},System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Searches the
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Searches the
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetByDetachedContentType(System.Guid)">
            <summary>
            The get by detached content type.
            </summary>
            <param name="detachedContentTypeKey">
            The detached content type key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeyForSlug(System.String)">
            <summary>
            The get key for slug.
            </summary>
            <param name="slug">
            The slug.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.SkuExists(System.String)">
            <summary>
            True/false indicating whether or not a SKU is already exists in the database
            </summary>
            <param name="sku">
            The SKU to be tested
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> indicating whether or not the SKU exists.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysWithOption(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionKey">
            The option key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysWithOption(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionName">
            The option name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysWithOption(System.String,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionName">
            The option name.
            </param>
            <param name="choiceName">
            The choice name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysWithOption(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionNames">
            The option names.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysWithOption(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option an option with specific choices
            </summary>
            <param name="optionName">
            The option name.
            </param>
            <param name="choiceNames">
            The choice names.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysInPriceRange(System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys in price range.
            </summary>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysInPriceRange(System.Decimal,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys in price range.
            </summary>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="taxModifier">
            The tax modifier.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysByManufacturer(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by manufacturer.
            </summary>
            <param name="manufacturer">
            The manufacturer.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysByManufacturer(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by manufacturer.
            </summary>
            <param name="manufacturer">
            The manufacturer.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysByBarcode(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by barcode.
            </summary>
            <param name="barcode">
            The barcode.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysByBarcode(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by barcode.
            </summary>
            <param name="barcodes">
            The barcodes.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysInStock(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean,System.Boolean)">
            <summary>
            The get products keys in stock.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeAllowOutOfStockPurchase">
            The include allow out of stock purchase.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetProductsKeysOnSale(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys on sale.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.ExistsInCollection(System.Guid,System.Guid)">
            <summary>
            Returns a value indicating whether or not the product exists in a collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.ExistsInCollection(System.Guid,System.Guid[])">
            <summary>
            Returns a value indicating whether or not the entity exists in at least one of the collections.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.AddToCollection(System.Guid,System.Guid)">
            <summary>
            Adds a product to a static product collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.AddToCollections(System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            Bulk inserts products to a collection
            </summary>
            <param name="entityAndCollectionKeys"></param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetAllMerchProduct2EntityCollections">
            <summary>
            Creates a dictionary we can look up to check existing MerchProduct2EntityCollection
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.RemoveFromCollections(System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            Batch removes from collections
            </summary>
            <param name="entityKeycollectionKey">
            Key=ProductKey
            Value=collectionKey
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.RemoveFromCollection(System.Guid,System.Guid)">
            <summary>
            The remove product from collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetKeysFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get product keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get product keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetKeysThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get product keys from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get product keys from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeUnavailable">
            Include products that are marked as not available
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetKeysFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetKeysNotInCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysNotInCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetKeysNotInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets the page of product keys that do not exist in any of the collections with keys passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysNotInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets the page of product keys that do not exist in any of the collections with keys passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetKeysNotInCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysNotInCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetKeysThatExistInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysThatExistInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetKeysThatExistInAnyCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetKeysThatExistInAnyCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get products from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetEntitiesThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get products from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetEntitiesThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.NKart#Core#Persistence#Repositories#IStaticEntityCollectionRepository{NKart#Core#Models#IProduct}#GetEntitiesThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetEntitiesThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetPagedKeys(System.Int64,System.Int64,Umbraco.Core.Persistence.Sql,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get the paged keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sql">
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetPagedKeys(System.Int64,System.Int64,Umbraco.Core.Persistence.Sql,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Get the paged keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sql">
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.PerformGet(System.Guid)">
            <summary>
            The perform get.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all products.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetBaseQuery(System.Boolean)">
            <summary>
            The get base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetBaseWhereClause">
            <summary>
            Gets the base SQL where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetDeleteClauses">
            <summary>
            Gets the delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.PersistNewItem(NKart.Core.Models.IProduct)">
            <summary>
            Saves a new product.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.PersistUpdatedItem(NKart.Core.Models.IProduct)">
            <summary>
            Updates an existing product.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.PersistDeletedItem(NKart.Core.Models.IProduct)">
            <summary>
            Deletes a product.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IProduct})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProduct"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.GetDtoPage(System.Int64,System.Int64,Umbraco.Core.Persistence.Sql,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get dto page.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sql">
            The SQL string.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductRepository.BuildProductSearchSql(System.String)">
            <summary>
            Builds the product search SQL.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IBulkOperationRepository`1">
            <summary>
            The BulkOperationRepository interface.
            </summary>
            <typeparam name="TEntity">
            The type of entity for bulk operations
            </typeparam>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IBulkOperationRepository`1.PersistNewItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk save new entities.
            </summary>
            <param name="entities">
            The entities.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IBulkOperationRepository`1.PersistUpdatedItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Bulk save updated entities.
            </summary>
            <param name="entities">
            The entities.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IProductOptionRepository">
            <summary>
            Defines a product option repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.SaveForProduct(NKart.Core.Models.IProduct)">
            <summary>
            Saves the product options for a given product.
            </summary>
            <param name="product">
            The product.
            </param>
            <returns>
            A collection of product keys of products that need to be refreshed in the current cache and examine.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.CreateAttributeAssociationForProductVariant(NKart.Core.Models.IProductVariant)">
            <summary>
            Creates the attribute association between product attribute and product variant.
            </summary>
            <param name="variant">
            The variant.
            </param>
            <returns>
            A collection of product keys of products that need to be refreshed in the current cache and examine.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.GetProductOptions(System.Guid[],System.Boolean)">
            <summary>
            Queries for product options by a collection of keys.
            </summary>
            <param name="optionKeys">
            The option Keys.
            </param>
            <param name="sharedOnly">
            The shared Only.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.GetProductAttributeByKey(System.Guid)">
            <summary>
            Gets a product attribute by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.GetProductAttributes(System.Guid[])">
            <summary>
            Gets <see cref="T:NKart.Core.Models.IProductAttribute"/> by a an array of keys.
            </summary>
            <param name="attributeKeys">
            The attribute keys.
            </param>
            <returns>
            The collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.GetProductOptionCollection(System.Guid)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.ProductOptionCollection"/> for a given product key.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductOptionCollection"/>.
            </returns>
            <remarks>
            The method manages the sort order of the options with respect to the product
            This query is never cached and is intended to generate objects that will be cached in 
            individual product collections
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.GetProductAttributeCollectionForVariant(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ProductAttributeCollection"/> for a product variant.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductAttributeCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.GetPage(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <param name="term">
            A search term to filter by
            </param>
            <param name="page">
            The page requested.
            </param>
            <param name="itemsPerPage">
            The number of items per page.
            </param>
            <param name="sortBy">
            The sort by field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="sharedOnly">
            Indicates whether or not to only include shared option.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.GetProductOptionUseCount(NKart.Core.Models.IProductOption)">
            <summary>
            Gets use count information for an option and its choices.
            </summary>
            <param name="option">
            The option key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Counting.ProductOptionUseCount"/>.
            </returns>
            <remarks>
            Used for determining shared option usage
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.DeleteAllProductOptions(NKart.Core.Models.IProduct)">
            <summary>
            Deletes all products options.
            </summary>
            <param name="product">
            The product.
            </param>
            <remarks>
            Used when deleting a product
            </remarks>
            <returns>
            A collection of product keys of products that need to be refreshed in the current cache and examine.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.DeleteAllProductVariantAttributes(NKart.Core.Models.IProductVariant)">
            <summary>
            Deletes all product attributes from a product variant.
            </summary>
            <param name="variant">
            The variant.
            </param>
            <remarks>
            Used when deleting a product variant
            </remarks>
            <returns>
            A collection of product keys of products that need to be refreshed in the current cache and examine.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.UpdateAttribute(NKart.Core.Models.IProductAttribute)">
            <summary>
            Updates an attribute.
            </summary>
            <param name="attribute">
            The attribute.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.GetSharedProductOptionCount(System.Guid)">
            <summary>
            Gets the count of the number of product associations for an option
            </summary>
            <param name="optionKey">
            The option key.
            </param>
            <returns>
            The count.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductOptionRepository.GetSharedProductAttributeCount(System.Guid)">
            <summary>
            Gets the count of the product variant associations for a product attribute.
            </summary>
            <param name="attributeKey">
            The attribute key.
            </param>
            <returns>
            The count.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.MerchelloBulkOperationRepository`2">
            <summary>
            A repository for bulk SQL operations.
            </summary>
            <typeparam name="TEntity">
            The Type of entity
            </typeparam>
            <typeparam name="TDto">
            The type of Dto object
            </typeparam>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.MerchelloBulkOperationRepository`2._factory">
            <summary>
            The factory for creating the DTOs.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloBulkOperationRepository`2.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,System.Func{NKart.Core.Persistence.Factories.IEntityFactory{`0,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.MerchelloBulkOperationRepository`2"/> class.
            </summary>
            <param name="work">
            The database unit of work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
            <param name="factory">
            The factory.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloBulkOperationRepository`2.BulkInsertRecordsWithKey``1(System.Collections.Generic.IEnumerable{``0},Umbraco.Core.Persistence.Transaction,System.Boolean)">
            <summary>
            Performs the bulk insertion in the context of a current transaction with an optional parameter to complete the transaction
            when finished
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloBulkOperationRepository`2.ExecuteBatchUpdate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Executes a batch update.
            </summary>
            <param name="entities">
            The entities.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloBulkOperationRepository`2.ApplyAddingOrUpdating(NKart.Core.Persistence.TransactionType,`0)">
            <summary>
            Calls AddingEntity or Updating Entity.
            </summary>
            <param name="transactionType">
            The transaction type.
            </param>
            <param name="entity">
            The entity.
            </param>
            <remarks>
            This needs to be done in the typed repository as some entities override the method defined in EntityBase
            </remarks>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.NoteRepository">
            <summary>
            Represents the note repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.NoteRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Searches the notes
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets the collection of all <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.INote})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INote"/> by query
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The base where clause.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.GetDeleteClauses">
            <summary>
            Gets a collection of delete clauses
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.PersistNewItem(NKart.Core.Models.INote)">
            <summary>
            Persist new note.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NoteRepository.PersistUpdatedItem(NKart.Core.Models.INote)">
            <summary>
            Updates a note
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.AuditLogRepository">
            <summary>
            Represents the audit log repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.AuditLogRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Searches the audit log
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets the collection of all <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.Interfaces.IAuditLog})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> by query
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The base where clause.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.GetDeleteClauses">
            <summary>
            Gets a collection of delete clauses
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.PersistNewItem(NKart.Core.Models.Interfaces.IAuditLog)">
            <summary>
            The persist new audit log.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AuditLogRepository.PersistUpdatedItem(NKart.Core.Models.Interfaces.IAuditLog)">
            <summary>
            Updates an audit log
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository">
            <summary>
            Represents a DetachedContentTypeRepository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> by it's unique key
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository.PerformGetAll(System.Guid[])">
            <summary>
            Performs get all <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.DetachedContent.IDetachedContentType})">
            <summary>
            Gets <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository.GetBaseQuery(System.Boolean)">
            <summary>
            The get base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses to be executed.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository.PersistNewItem(NKart.Core.Models.DetachedContent.IDetachedContentType)">
            <summary>
            Inserts a new <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository.PersistUpdatedItem(NKart.Core.Models.DetachedContent.IDetachedContentType)">
            <summary>
            Updates an existing <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.DigitalMediaRepository">
            <summary>
            The digital media repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DigitalMediaRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.DigitalMediaRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger"></param>
            <param name="sqlSyntax"></param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DigitalMediaRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DigitalMediaRepository.PerformGetAll(System.Guid[])">
            <summary>
            Returns a collection of all digital media records.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DigitalMediaRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.Interfaces.IDigitalMedia})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DigitalMediaRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DigitalMediaRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DigitalMediaRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses to be executed on a delete operation.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DigitalMediaRepository.PersistNewItem(NKart.Core.Models.Interfaces.IDigitalMedia)">
            <summary>
            Saves a new <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.DigitalMediaRepository.PersistUpdatedItem(NKart.Core.Models.Interfaces.IDigitalMedia)">
            <summary>
            Updates a <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.EntityCollectionRepository">
            <summary>
            Represents an EntityCollectionRepository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.EntityCollectionRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetEntityCollectionsByProductKey(System.Guid,System.Boolean)">
            <summary>
            The get entity collections by product key.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="isFilter">
            A value indicating whether or not to this should return collections that represent filters.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetEntityCollectionsByInvoiceKey(System.Guid)">
            <summary>
            The get entity collections by invoice key.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetEntityCollectionsByCustomerKey(System.Guid)">
            <summary>
            The get entity collections by customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetPage(System.Int64,System.Int64,Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.Interfaces.IEntityCollection},System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get page.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetEntityFilterGroupsByProviderKeys(System.Guid[])">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by a collection of keys.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>
            TODO this is pretty brittle since it assumes the collection will be intended to be used as the special filter group.
            However, it merely builds a filter group using whatever collection and it's children - so Service should definitely
            have this as an internal method until we can refactor
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetEntityFilterGroupsContainingProduct(System.Guid[],System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by a collection of keys that are associated
            with a product
            </summary>
            <param name="keys">
            The keys.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetEntityFilterGroupsNotContainingProduct(System.Guid[],System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by a collection of keys that are not associated
            with a product
            </summary>
            <param name="keys">
            The keys.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetEntityFilterGroup(System.Guid)">
            <summary>
            Gets <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/>.
            </returns>
            <remarks>
            TODO this is pretty brittle since it assumes the collection will be intended to be used as the special filter group.
            However, it merely builds a filter group using whatever collection and it's children - so Service should definitely
            have this as an internal method until we can refactor
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.PerformGet(System.Guid)">
            <summary>
            The perform get.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.PerformGetAll(System.Guid[])">
            <summary>
            The perform get all.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.Interfaces.IEntityCollection})">
            <summary>
            The perform get by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.GetDeleteClauses">
            <summary>
            The get delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.PersistDeletedItem(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The persist deleted item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.PersistNewItem(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The persist new item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.EntityCollectionRepository.PersistUpdatedItem(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The persist updated item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IAssertsMaxDocumentNumber">
            <summary>
            Order and Invoice repositories must have unique order and invoice numbers.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IAssertsMaxDocumentNumber.GetMaxDocumentNumber">
            <summary>
            The get max document number.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.INoteRepository">
            <summary>
            Marker interface for the AuditLogRepository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IAuditLogRepository">
            <summary>
            Marker interface for the AuditLogRepository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IDetachedContentTypeRepository">
            <summary>
            Marker interface for the DetachedContentTypeRepository.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IDigitalMediaRepository">
            <summary>
            Marker interface for the DigitalMediaRepository.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IEntityCollectionRepository">
            <summary>
            Defines an EntityCollectionRepository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IEntityCollectionRepository.GetEntityCollectionsByProductKey(System.Guid,System.Boolean)">
            <summary>
            The get entity collections by product key.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="isFilter">
            A value indicating whether or not to this should return collections that represent filters.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
            <remarks>
            Used by the StaticProductCollectionProvider
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IEntityCollectionRepository.GetEntityCollectionsByInvoiceKey(System.Guid)">
            <summary>
            The get entity collections by invoice key.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IEntityCollectionRepository.GetEntityCollectionsByCustomerKey(System.Guid)">
            <summary>
            The get entity collections by customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IEntityCollectionRepository.GetPage(System.Int64,System.Int64,Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.Interfaces.IEntityCollection},System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IEntityCollectionRepository.GetEntityFilterGroupsByProviderKeys(System.Guid[])">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by a collection of keys.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>
            TODO this is pretty brittle since it assumes the collection will be intended to be used as the special filter group.
            However, it merely builds a filter group using whatever collection and it's children - so Service should definitely
            have this as an internal method until we can refactor
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IEntityCollectionRepository.GetEntityFilterGroupsContainingProduct(System.Guid[],System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by a collection of keys that are associated
            with a product
            </summary>
            <param name="keys">
            The keys.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IEntityCollectionRepository.GetEntityFilterGroupsNotContainingProduct(System.Guid[],System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by a collection of keys that are not associated
            with a product
            </summary>
            <param name="keys">
            The keys.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IEntityCollectionRepository.GetEntityFilterGroup(System.Guid)">
            <summary>
             Gets <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/>.
            </returns>
            <remarks>
            TODO this is pretty brittle since it assumes the collection will be intended to be used as the special filter group.
            However, it merely builds a filter group using whatever collection and it's children - so Service should definitely
            have this as an internal method until we can refactor
            </remarks>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IOfferRedeemedRepository">
            <summary>
            Marker interface for OfferRedeemedRepositories.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IOfferSettingsRepository">
            <summary>
            Marker interface for the OfferSettingsRepository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IOfferSettingsRepository.Search(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Performs a paged search by search term.
            </summary>
            <param name="term">
            The term to filter by.
            </param>
            <param name="page">
            The current page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IPagedRepository`2">
            <summary>
            The PagedEntityKeyFetchRepository interface.
            </summary>
            <typeparam name="TEntity">
            The type of entity
            </typeparam>
            <typeparam name="TDto">
            The type of the Dto
            </typeparam>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPagedRepository`2.GetPage(System.Int64,System.Int64,Umbraco.Core.Persistence.Querying.IQuery{`0},System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="!:TEntity"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPagedRepository`2.GetPagedKeys(System.Int64,System.Int64,Umbraco.Core.Persistence.Querying.IQuery{`0},System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The page of data.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IPagedRepository`2.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The search.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IShipmentStatusRepository">
            <summary>
            Marker interface for the ShipmentStatusRepository.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1">
            <summary>
            Defines a repository the has static collections.
            </summary>
            <typeparam name="T">
            The type of entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.ExistsInCollection(System.Guid,System.Guid)">
            <summary>
            Returns a value indicating whether or not the entity exists in a collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.ExistsInCollection(System.Guid,System.Guid[])">
            <summary>
            Returns a value indicating whether or not the entity exists in at least one of the collections.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.AddToCollection(System.Guid,System.Guid)">
            <summary>
            Adds a entity to a static invoice collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.RemoveFromCollection(System.Guid,System.Guid)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="entityKey">
            The invoice key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets entity from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets entity from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetEntitiesThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets distinct entity from multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetEntitiesThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a distinct entity from multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get entity keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get entity keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            A filter term
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysNotInCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysNotInCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The filter term
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets the entity keys for distinct entities in multiple collections
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a paged list of distinct keys for entities in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            A filter term
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysNotInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysNotInAnyCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The filter term
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysThatExistInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStaticEntityCollectionRepository`1.GetKeysThatExistInAnyCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IWarehouseCatalogRepository">
            <summary>
            Marker interface for the WarehouseCatalogRepository interface.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IWarehouseCatalogRepository.GetWarehouseCatalogsByWarehouseKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by a warehouse key.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.OfferRedeemedRepository">
            <summary>
            The offer redeemed repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.OfferRedeemedRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Searches for a set of keys that match the term submitted.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.PerformGet(System.Guid)">
            <summary>
            Performs the get by key operation.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.PerformGetAll(System.Guid[])">
            <summary>
            Performs the get all operation.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.Interfaces.IOfferRedeemed})">
            <summary>
            Performs the get by query operation.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.GetDeleteClauses">
            <summary>
            The get delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.PersistNewItem(NKart.Core.Models.Interfaces.IOfferRedeemed)">
            <summary>
            The persist new item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.PersistUpdatedItem(NKart.Core.Models.Interfaces.IOfferRedeemed)">
            <summary>
            The persist updated item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferRedeemedRepository.BuildOfferSearchSql(System.String)">
            <summary>
            Builds an offer search query.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.OfferSettingsRepository">
            <summary>
            Represents an offer settings repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.OfferSettingsRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Searches for a set of keys that match the term submitted.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.Search(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Searches the offer settings by a term.
            </summary>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.PerformGet(System.Guid)">
            <summary>
            Performs the get by key operation.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.PerformGetAll(System.Guid[])">
            <summary>
            Performs the get all operation.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.Interfaces.IOfferSettings})">
            <summary>
            The perform get by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Constructs a base SQL query
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.GetDeleteClauses">
            <summary>
            The get delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.PersistNewItem(NKart.Core.Models.Interfaces.IOfferSettings)">
            <summary>
            Adds a new offer settings entity to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.PersistUpdatedItem(NKart.Core.Models.Interfaces.IOfferSettings)">
            <summary>
            Updates an offer settings entity in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OfferSettingsRepository.BuildOfferSearchSql(System.String)">
            <summary>
            Builds an offer search query.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2">
            <summary>
            Defines a repository that provides paged ID queries
            </summary>
            <typeparam name="TEntity">
            The type of entity
            </typeparam>
            <typeparam name="TDto">
            The type of the DTO class
            </typeparam>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2"/> class. 
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2.GetPage(System.Int64,System.Int64,Umbraco.Core.Persistence.Querying.IQuery{`0},System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="!:TEntity"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2.GetPagedKeys(System.Int64,System.Int64,Umbraco.Core.Persistence.Querying.IQuery{`0},System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get paged keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The page of data.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The search.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2.GetPagedDtoCacheKey(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Gets the cache key for Request caching paged collections.
            </summary>
            <param name="methodName">
            The method name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="args">
            The args.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2.GetPagedKeys(System.Int64,System.Int64,Umbraco.Core.Persistence.Sql,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Get the paged keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sql">
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2.GetDtoPage(System.Int64,System.Int64,Umbraco.Core.Persistence.Sql,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a paged <see cref="!:TDto"/> for the query.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sql">
            The SQL.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PagedRepositoryBase`2.MapPageDtoToPageEntity(Umbraco.Core.Persistence.Page{`1})">
            <summary>
            The map page dto to page entity.
            </summary>
            <param name="dtoPage">
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ProductOptionRepository">
            <summary>
            A repository responsible for persisting <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <remarks>
            We have to be careful with the runtime cache here since various usages of the product option will be used by different products.
            We will need to make sure when we filter the choices, the object is previously cloned into a new option.
            </remarks>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ProductOptionRepository._validSortFields">
            <summary>
            Valid sort fields.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ProductOptionRepository._detachedContentTypeRepository">
            <summary>
            The detached content type repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ProductOptionRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,NKart.Core.Persistence.Repositories.IDetachedContentTypeRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ProductOptionRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
            <param name="detachedContentTypeRepository">
            The detached content type repository.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.SaveForProduct(NKart.Core.Models.IProduct)">
            <summary>
            Saves options associated with a product.
            </summary>
            <param name="product">
            The product with options to be saved.
            </param>
            <remarks>
            Note:  'shared' product options associated with a product may not have the entire collection of ProductAttributes (choices)
            so the actual work is done on the shared option which is then filtered again and replaced in the product 
            </remarks>
            <returns>
            A collection of product keys of products that need to be refreshed in the current cache and examine.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.CreateAttributeAssociationForProductVariant(NKart.Core.Models.IProductVariant)">
            <summary>
            Creates the attribute association between product attribute and product variant.
            </summary>
            <param name="variant">
            The variant.
            </param>
            <returns>
            A collection of product keys of products that need to be refreshed in the current cache and examine.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductOptions(System.Guid[],System.Boolean)">
            <summary>
            Queries for product options by a collection of keys.
            </summary>
            <param name="optionKeys">
            The option Keys.
            </param>
            <param name="sharedOnly">
            The shared Only.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductAttributeByKey(System.Guid)">
            <summary>
            Gets a product attribute by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductAttributes(System.Guid[])">
            <summary>
            Gets <see cref="T:NKart.Core.Models.IProductAttribute"/> by a an array of keys.
            </summary>
            <param name="attributeKeys">
            The attribute keys.
            </param>
            <returns>
            The collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductOptionUseCount(NKart.Core.Models.IProductOption)">
            <summary>
            Gets use count information for an option and its choices.
            </summary>
            <param name="option">
            The option.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Counting.ProductOptionUseCount"/>.
            </returns>
            <remarks>
            Used for determining shared option usage
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.DeleteAllProductOptions(NKart.Core.Models.IProduct)">
            <summary>
            Deletes all products options.
            </summary>
            <param name="product">
            The product.
            </param>
            <remarks>
            Used when deleting a product
            </remarks>
            <returns>
            A collection of product keys of products that need to be refreshed in the current cache and examine.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.DeleteAllProductVariantAttributes(NKart.Core.Models.IProductVariant)">
            <summary>
            Deletes all product attributes from a product variant.
            </summary>
            <param name="variant">
            The variant.
            </param>
            <remarks>
            Used when deleting a product variant
            </remarks>
            <returns>
            A collection of product keys of products that need to be refreshed in the current cache and examine.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.UpdateAttribute(NKart.Core.Models.IProductAttribute)">
            <summary>
            Updates an attribute.
            </summary>
            <param name="attribute">
            The attribute.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetSharedProductOptionCount(System.Guid)">
            <summary>
            Gets the shareCount for a <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <param name="optionKey">
            The option key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetSharedProductAttributeCount(System.Guid)">
            <summary>
            Gets the product attribute use count.
            </summary>
            <param name="attributeKey">
            The attribute key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductOptionCollection(System.Guid)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.ProductOptionCollection"/> for a given product key.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductOptionCollection"/>.
            </returns>
            <remarks>
            The method manages the sort order of the options with respect to the product
            This query is never cached and is intended to generate objects that will be cached in 
            individual product collections
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductAttributeCollectionForVariant(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ProductAttributeCollection"/> for a product variant.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductAttributeCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductAttributeCollection(System.Guid)">
            <summary>
            Gets the product attribute collection.
            </summary>
            <param name="optionKey">
            The option key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductAttributeCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetPage(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <param name="term">
            A search term to filter by
            </param>
            <param name="page">
            The page requested.
            </param>
            <param name="itemsPerPage">
            The number of items per page.
            </param>
            <param name="sortBy">
            The sort by field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="sharedOnly">
            Indicates whether or not to only include shared option.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.SaveForProduct(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductOption},System.Guid)">
            <summary>
            Saves a collection of product options for a given product.
            </summary>
            <param name="options">
            The options.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The saved collection <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IProductOption"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.PerformGetAll(System.Guid[])">
            <summary>
            Performs a get all.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IProductOption})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductOption"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetBaseWhereClause">
            <summary>
            Gets the default SQL Where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetDeleteClauses">
            <summary>
            Gets the delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.PersistNewItem(NKart.Core.Models.IProductOption)">
            <summary>
            Saves a new <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <remarks>
            This should never be a partial variation of an option 
            (e.g. NEVER save a non shared option that has been queried with a reduced collection of choices) 
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.PersistUpdatedItem(NKart.Core.Models.IProductOption)">
            <summary>
            Updates an existing <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <remarks>
            This should never be a partial variation of an option 
            (e.g. NEVER save a non shared option that has been queried with a reduced collection of choices) 
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.ValidateSortField(System.String)">
            <summary>
            Validates the sortBy field.
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            A validated field.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.EnsureAttributeSku(NKart.Core.Models.IProductOption,NKart.Core.Models.IProductAttribute,System.Int32)">
            <summary>
            Ensures duplicate SKUs do not exist.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="att">
            The attribute.
            </param>
            <param name="index">
            The index.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductAttributeCollection(NKart.Core.Models.IProductOption,System.Guid)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.ProductAttributeCollection"/> for a specific product.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductAttributeCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductAttributeCollection(Umbraco.Core.Persistence.Sql)">
            <summary>
            Gets the the <see cref="T:NKart.Core.Models.ProductAttributeCollection"/> by SQL.
            </summary>
            <param name="sql">
            The SQL.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductAttributeCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetProductKeysForCacheRefresh(System.Guid[])">
            <summary>
            Gets a collection of .
            </summary>
            <param name="sharedOptionKeys">
            The shared option keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.DeleteProductAttribute(NKart.Core.Models.IProductAttribute)">
            <summary>
            Deletes a product attribute.
            </summary>
            <param name="productAttribute">
            The product attribute.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.SafeAddOrUpdateProductWithProductOption(NKart.Core.Models.IProductOption,System.Boolean,System.Guid)">
            <summary>
            Adds or updates a product option, respecting shared option rules.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="exists">
            The exists.
            </param>
            <param name="productKey">
            The product key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.SafeRemoveSharedOptionsFromProduct(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductOption},System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductOption},System.Guid)">
            <summary>
            Safely removes old shared options from a product.
            </summary>
            <param name="savers">
            The savers.
            </param>
            <param name="existing">
            The existing.
            </param>
            <param name="productKey">
            The product key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.DeleteSharedProductOptionFromProduct(NKart.Core.Models.IProductOption,System.Guid)">
            <summary>
            Removes attribute association from IProduct for a shared option.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <remarks>
            This affectively deletes the shared option from the product
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.SaveProductAttributes(NKart.Core.Models.IProductOption)">
            <summary>
            Saves the attribute collection.
            </summary>
            <param name="option">
            The product option.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.SaveProductAttribute(NKart.Core.Models.IProductOption,NKart.Core.Models.IProductAttribute)">
            <summary>
            Saves a product attribute.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="att">
            The product attribute.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.EnsureProductOptionsSortOrder(NKart.Core.Models.ProductOptionCollection)">
            <summary>
            Ensures the sort order of product options.
            </summary>
            <param name="options">
            The options.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetByProductKey(System.Guid)">
            <summary>
            Gets a collection of options for a specific <see cref="T:NKart.Core.Models.IProduct"/>.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetSearchSql(System.String,System.Boolean)">
            <summary>
            Builds the product search SQL.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="sharedOnly">
            The shared Only.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetRemoveAllProductOptionsFromProductSql(NKart.Core.Models.IProduct)">
            <summary>
            Gets the SQL statements to execute when deleting options from a product.
            </summary>
            <param name="product">
            The product.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetRemoveAttributeFromSharedProductOptionSql(NKart.Core.Models.IProductAttribute,System.Guid)">
            <summary>
            Gets the SQL required to remove an option choice from an assigned shared option.
            </summary>
            <param name="attribute">
            The attribute.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetRemoveAllProductVariantProductAttributeSql(NKart.Core.Models.IProduct)">
            <summary>
            Gets the SQL statements to execute when deleting an option which has choices that define variants.
            </summary>
            <param name="product">
            The product.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetRemoveShareProductOptionFromProductSql(NKart.Core.Models.IProductOption,System.Guid)">
            <summary>
            Gets a list of SQL clauses to be executed when removing shared options from a product.
            </summary>
            <param name="option">
            The option.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetOptionUseCountSql(System.Guid)">
            <summary>
            Gets the option use count SQL.
            </summary>
            <param name="optionKey">
            The option key.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductOptionRepository.GetAttributeUseCountSql(System.Guid)">
            <summary>
            Gets the SQL to determine attribute use count for a specific option.
            </summary>
            <param name="optionKey">
            The option key.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ShipmentStatusRepository">
            <summary>
            Represents the ShipmentStatusRepository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentStatusRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ShipmentStatusRepository"/> class.
            </summary>
            <param name="work">
            The <see cref="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork"/>.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentStatusRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipmentStatus"/> by it's key
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipmentStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentStatusRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IShipmentStatus"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IShipmentStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentStatusRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IShipmentStatus})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IShipmentStatus"/> by query
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IShipmentStatus"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentStatusRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentStatusRepository.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentStatusRepository.GetDeleteClauses">
            <summary>
            Gets a collection of delete clauses.
            </summary>
            <returns>
            The collection of delete clauses.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentStatusRepository.PersistNewItem(NKart.Core.Models.IShipmentStatus)">
            <summary>
            Persists a new shipment status.
            </summary>
            <param name="entity">
            The shipment status.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentStatusRepository.PersistUpdatedItem(NKart.Core.Models.IShipmentStatus)">
            <summary>
            Persists an updated shipment status.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository">
            <summary>
            Represents a warehouse catalog repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.GetWarehouseCatalogsByWarehouseKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by a warehouse key.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.PerformGetAll(System.Guid[])">
            <summary>
            The perform get all.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IWarehouseCatalog})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.GetDeleteClauses">
            <summary>
            Gets a collection delete clauses.
            </summary>
            <returns>
            The collection of delete clauses.
            </returns>
            <remarks>
            This is a complex delete so the ProductVariant (Inventory) of the operation is handled
            in the service so that the caching and Lucene indexes do not get messed up.
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.PersistNewItem(NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Persist a new warehouse catalog.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.PersistUpdatedItem(NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Persists an updated warehouse catalog.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseCatalogRepository.PersistDeletedItem(NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Deletes a persisted warehouse catalog
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IInvoiceLineItemRepository">
            <summary>
            Marker interface for the InvoiceLineItem repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IInvoiceStatusRepository">
            <summary>
            Marker interface for the Invoice Status Repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IItemCacheLineItemRepository">
            <summary>
            Marker interface for the ItemCacheLineItemRepository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ILineItemRepositoryBase`1">
            <summary>
            Defines the LineItemRepositoryBase class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.INotificationMessageRepository">
            <summary>
            Marker interface for the NotificationMessageRepository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.INotificationMethodRepository">
            <summary>
            Marker interface for the NotificationMethodRespository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IOrderLineItemRepository">
            <summary>
            Marker interface with the Order Line Item Repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IOrderStatusRepository">
            <summary>
            Marker interface for the Order Status Repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository">
            <summary>
            The invoice line item repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository"/> class.
            </summary>
            <param name="work">
            The <see cref="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork"/>.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IInvoiceLineItem"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IInvoiceLineItem"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IInvoiceLineItem"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IInvoiceLineItem})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IInvoiceLineItem"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository.GetBaseQuery(System.Boolean)">
            <summary>
            The base SQL query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository.PersistNewItem(NKart.Core.Models.IInvoiceLineItem)">
            <summary>
            Saves a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceLineItemRepository.PersistUpdatedItem(NKart.Core.Models.IInvoiceLineItem)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.InvoiceStatusRepository">
            <summary>
            The invoice status repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceStatusRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.InvoiceStatusRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceStatusRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IInvoice"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IInvoiceStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceStatusRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IInvoiceStatus"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IInvoiceStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceStatusRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IInvoiceStatus})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IInvoiceStatus"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IInvoiceStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceStatusRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceStatusRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceStatusRepository.GetDeleteClauses">
            <summary>
            Gets the delete clauses.
            </summary>
            <returns>
            The collection of delete clauses.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceStatusRepository.PersistNewItem(NKart.Core.Models.IInvoiceStatus)">
            <summary>
            Persists a new invoice.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceStatusRepository.PersistUpdatedItem(NKart.Core.Models.IInvoiceStatus)">
            <summary>
            Persists an updated invoice.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository">
            <summary>
            Represents a ItemCacheLineItemRepository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.Delete(NKart.Core.Models.IItemCacheLineItem)">
            <summary>
            Overrides the delete.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IItemCacheLineItem"/> by it's keey.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCacheLineItem"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IItemCacheLineItem"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IItemCacheLineItem})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IItemCacheLineItem"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL clause.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.GetDeleteClauses">
            <summary>
            Gets a list of the delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.PersistNewItem(NKart.Core.Models.IItemCacheLineItem)">
            <summary>
            Adds a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheLineItemRepository.PersistUpdatedItem(NKart.Core.Models.IItemCacheLineItem)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.LineItemRepositoryBase`1">
            <summary>
            A line item repository base class
            </summary>
            <typeparam name="T">The type T of the <see cref="T:NKart.Core.Models.ILineItem"/></typeparam>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.LineItemRepositoryBase`1.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.LineItemRepositoryBase`1"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.LineItemRepositoryBase`1.GetByContainerKey(System.Guid)">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.ILineItem"/> for a container
            </summary>
            <param name="containerKey">The key of the container.  ex. Invoice.Key, ItemCache.Key</param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.ILineItem"/> as Type T
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.LineItemRepositoryBase`1.SaveLineItem(NKart.Core.Models.LineItemCollection,System.Guid)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.ILineItem"/> associated with a container
            </summary>
            <param name="items">The collection of <see cref="T:NKart.Core.Models.ILineItem"/></param>
            <param name="containerKey">The "Container" or parent collection key</param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.LineItemRepositoryBase`1.SaveLineItem(`0)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.ILineItem"/>
            </summary>
            <param name="item">The <see cref="T:NKart.Core.Models.ILineItem"/> to be saved</param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.NotificationMessageRepository">
            <summary>
            Represents the NotificationMessageRepository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMessageRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.NotificationMessageRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMessageRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.INotificationMessage})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMessageRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMessageRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMessageRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMessageRepository.PersistNewItem(NKart.Core.Models.INotificationMessage)">
            <summary>
            Adds a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMessageRepository.PersistUpdatedItem(NKart.Core.Models.INotificationMessage)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.NotificationMethodRepository">
            <summary>
            Represents the NotificationMethodRepository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMethodRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.NotificationMethodRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMethodRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.INotificationMethod"/> by query.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INotificationMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMethodRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.INotificationMethod"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMethodRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.INotificationMethod})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMethod"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMethodRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMethodRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMethodRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMethodRepository.PersistNewItem(NKart.Core.Models.INotificationMethod)">
            <summary>
            Adds a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.NotificationMethodRepository.PersistUpdatedItem(NKart.Core.Models.INotificationMethod)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.OrderLineItemRepository">
            <summary>
            The order line item repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderLineItemRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.OrderLineItemRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderLineItemRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IOrderLineItem"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IOrderLineItem"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderLineItemRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IOrderLineItem"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderLineItemRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IOrderLineItem})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IOrderLineItem"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderLineItemRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderLineItemRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderLineItemRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderLineItemRepository.PersistNewItem(NKart.Core.Models.IOrderLineItem)">
            <summary>
            Adds a new item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderLineItemRepository.PersistUpdatedItem(NKart.Core.Models.IOrderLineItem)">
            <summary>
            Saves an updated item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.OrderStatusRepository">
            <summary>
            The order status repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderStatusRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.OrderStatusRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderStatusRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IOrderStatus"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IOrderStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderStatusRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IOrderStatus"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderStatusRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IOrderStatus})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IOrderStatus"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderStatusRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderStatusRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderStatusRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderStatusRepository.PersistNewItem(NKart.Core.Models.IOrderStatus)">
            <summary>
            Saves a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderStatusRepository.PersistUpdatedItem(NKart.Core.Models.IOrderStatus)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.AppliedPaymentRepository">
            <summary>
            The applied payment repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.AppliedPaymentRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.PerformGet(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IAppliedPayment"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IAppliedPayment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IAppliedPayment"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IAppliedPayment})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/> by a query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.GetBaseQuery(System.Boolean)">
            <summary>
            The base SQL query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.GetBaseWhereClause">
            <summary>
            The base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.GetDeleteClauses">
            <summary>
            The list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.PersistNewItem(NKart.Core.Models.IAppliedPayment)">
            <summary>
            Adds a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.PersistUpdatedItem(NKart.Core.Models.IAppliedPayment)">
            <summary>
            Updates an item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AppliedPaymentRepository.PersistDeletedItem(NKart.Core.Models.IAppliedPayment)">
            <summary>
            Deletes an item from the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IAppliedPaymentRepository">
            <summary>
            Marker interface for the AppliedPaymentRepository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IOrderRepository">
            <summary>
            Maker interface for the OrderRepository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IPaymentMethodRepository">
            <summary>
            Marker interface for the PaymentMethodRepository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.OrderRepository">
            <summary>
            Represents the OrderRepository
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.OrderRepository._orderLineItemRepository">
            <summary>
            The order line item repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,NKart.Core.Persistence.Repositories.ILineItemRepositoryBase{NKart.Core.Models.IOrderLineItem},Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.OrderRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="orderLineItemRepository">
            The order line item repository.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IOrder"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IOrder"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IOrder"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IOrder})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IOrder"/>.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.PersistNewItem(NKart.Core.Models.IOrder)">
            <summary>
            Saves a new item to the databse.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.PersistUpdatedItem(NKart.Core.Models.IOrder)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.OrderRepository.GetMaxDocumentNumber">
            <summary>
            The get max document number.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.PaymentMethodRepository">
            <summary>
            Represents the PaymentMethodRepository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.PaymentMethodRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="cache">
            The cache.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPaymentMethod"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IPaymentMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IPaymentMethod"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IPaymentMethod})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.PersistNewItem(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Saves a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.PersistUpdatedItem(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Saves an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentMethodRepository.PersistDeletedItem(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Deletes an existing item from the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.TaxMethodRepository">
            <summary>
            The tax method repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.TaxMethodRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.TaxMethodRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.TaxMethodRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.TaxMethodRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets the collection of all <see cref="T:NKart.Core.Models.ITaxMethod"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.TaxMethodRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.ITaxMethod})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.TaxMethodRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.TaxMethodRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.TaxMethodRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.TaxMethodRepository.PersistNewItem(NKart.Core.Models.ITaxMethod)">
            <summary>
            Saves a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.TaxMethodRepository.PersistUpdatedItem(NKart.Core.Models.ITaxMethod)">
            <summary>
            Saves an existing item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.CustomerAddressRepository">
            <summary>
            The customer address repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.CustomerAddressRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.GetByCustomerKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.GetCountByCustomerKey(System.Guid)">
            <summary>
            Gets the count of addresses by customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.PerformGet(System.Guid)">
            <summary>
            The perform get.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.PerformGetAll(System.Guid[])">
            <summary>
            The perform get all.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The a collection of all customer addresses
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.GetBaseQuery(System.Boolean)">
            <summary>
            The get base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.GetDeleteClauses">
            <summary>
            The get delete clauses.
            </summary>
            <returns>
            The collection of delete clauses.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.PersistNewItem(NKart.Core.Models.ICustomerAddress)">
            <summary>
            The persist new item.
            </summary>
            <param name="entity">
            The entity to be created
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.PersistUpdatedItem(NKart.Core.Models.ICustomerAddress)">
            <summary>
            The persist updated item.
            </summary>
            <param name="entity">
            The entity to be updated
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.PersistDeletedItem(NKart.Core.Models.ICustomerAddress)">
            <summary>
            The persist deleted item.
            </summary>
            <param name="entity">
            The entity to be deleted
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerAddressRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.ICustomerAddress})">
            <summary>
            The perform get by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.CustomerRepository">
            <summary>
            The customer repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.CustomerRepository._customerAddressRepository">
            <summary>
            The _customer address repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.CustomerRepository._noteRepository">
            <summary>
            The note repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,NKart.Core.Persistence.Repositories.ICustomerAddressRepository,NKart.Core.Persistence.Repositories.INoteRepository,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.CustomerRepository"/> class.
            </summary>
            <param name="work">
            The database unit of work
            </param>
            <param name="customerAddressRepository">
            The customer Address Repository.
            </param>
            <param name="noteRepository">
            The note Repository.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Searches customers
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.ExistsInCollection(System.Guid,System.Guid)">
            <summary>
            Returns a value indicating whether or not the entity exists in a collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.ExistsInCollection(System.Guid,System.Guid[])">
            <summary>
            Returns a value indicating whether or not the entity exists in at least one of the collections.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.AddToCollection(System.Guid,System.Guid)">
            <summary>
            Adds a entity to a static invoice collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.RemoveFromCollection(System.Guid,System.Guid)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="entityKey">
            The invoice key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetKeysFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get entity keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetKeysThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get entity keys from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetKeysFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetKeysThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys from collection.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetKeysNotInCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetKeysNotInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetKeysNotInCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetKeysNotInAnyCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets entity from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetEntitiesThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets entity from collection.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetEntitiesThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.PerformGet(System.Guid)">
            <summary>
            Performs the Get by key operation.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.PerformGetAll(System.Guid[])">
            <summary>
            The perform get all operation.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The collection of all <see cref="T:NKart.Core.Models.ICustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetBaseQuery(System.Boolean)">
            <summary>
            The get base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetDeleteClauses">
            <summary>
            The get delete clauses.
            </summary>
            <returns>
            The collection of delete clauses
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.PersistNewItem(NKart.Core.Models.ICustomer)">
            <summary>
            The persist new item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.PersistUpdatedItem(NKart.Core.Models.ICustomer)">
            <summary>
            The persist updated item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.PersistDeletedItem(NKart.Core.Models.ICustomer)">
            <summary>
            The persist deleted item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.ICustomer})">
            <summary>
            The perform get by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.ICustomer"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.BuildCustomerSearchSql(System.String)">
            <summary>
            Builds customer search SQL.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.SaveNotes(NKart.Core.Models.ICustomer)">
            <summary>
            Saves the notes.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.CustomerRepository.GetNotes(System.Guid)">
            <summary>
            Gets the notes collection for an invoice.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.GatewayProviderRepository">
            <summary>
            The gateway provider repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.GatewayProviderRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.GetGatewayProvidersByShipCountryKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by ship country key.
            </summary>
            <param name="shipCountryKey">
            The ship country key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.PerformGet(System.Guid)">
            <summary>
            Gets <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.GatewayProviderSettings"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IGatewayProviderSettings})">
            <summary>
            Gets <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by a query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.GetDeleteClauses">
            <summary>
            Gets the list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.PersistNewItem(NKart.Core.Models.IGatewayProviderSettings)">
            <summary>
            Saves a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.GatewayProviderRepository.PersistUpdatedItem(NKart.Core.Models.IGatewayProviderSettings)">
            <summary>
            Updates an item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ITaxMethodRepository">
            <summary>
            Marker interface for the TaxMethodRepository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ICustomerAddressRepository">
            <summary>
            Marker interface for the address repository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ICustomerAddressRepository.GetByCustomerKey(System.Guid)">
            <summary>
            Gets a collection of addresses by customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ICustomerAddressRepository.GetCountByCustomerKey(System.Guid)">
            <summary>
            Gets the count of addresses by customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ICustomerRepository">
            <summary>
            Marker Interface for the customer repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IGatewayProviderRepository">
            <summary>
            Defines a GatewayProviderRepository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IGatewayProviderRepository.GetGatewayProvidersByShipCountryKey(System.Guid)">
            <summary>
            Returns a list of GatewayProviders associated with a ship country
            </summary>
            <param name="shipCountryKey"></param>
            <returns></returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IInvoiceRepository">
            <summary>
            Marker interface for the invoice repository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetDistinctCurrencyCodes">
            <summary>
            Gets distinct currency codes used in invoices.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.SumInvoiceTotals(System.DateTime,System.DateTime,System.String,System.Boolean)">
            <summary>
            Gets the totals of invoices in a date range for a specific currency code.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="excludeCancelledAndFraud"></param>
            <returns>
            The sum of the invoice totals.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.SumInvoiceTotals(System.DateTime,System.DateTime,System.String,System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoiceStatus})">
            <summary>
            Gets the totals of invoices in a date range for a specific currency code.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="invoiceStatuses">
            The invoice statuses.
            </param>
            <returns>
            The sum of the invoice totals.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.SumLineItemTotalsBySku(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Gets the total of line items for a give SKU invoiced in a specific currency across the date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <returns>
            The total of line items for a give SKU invoiced in a specific currency across the date range.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoicesMatchingInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term and the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoiceKeysMatchingInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoicesMatchingTermNotInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term but not the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoiceKeysMatchingTermNotInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoicesMatchingOrderStatus(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term and the order status key.
            </summary>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoiceKeysMatchingOrderStatus(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status key.
            </summary>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoiceKeysMatchingOrderStatuses(System.Collections.Generic.List{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status keys.
            </summary>
            <param name="orderStatusKeys">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoicesMatchingOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term and the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoiceKeysMatchingOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoiceKeysMatchingTermNotOrderStatus(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term but not the order status key.
            </summary>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoicesMatchingTermNotOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term but not the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IInvoiceRepository.GetInvoiceKeysMatchingTermNotOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IItemCacheRepository">
            <summary>
            Marker interface for the customer registry repository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IItemCacheRepository.GetCustomerItemCachePage(System.Guid,System.DateTime,System.DateTime,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
            <param name="itemCacheTfKey">
            The item cache type.
            </param>
            <param name="startDate">
            The start Date.
            </param>
            <param name="endDate">
            The end Date.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The sort by field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IItemCacheRepository.Count(System.Guid,NKart.Core.CustomerType,System.DateTime,System.DateTime)">
            <summary>
            Gets the count of of item caches for a customer type for a given date range.
            </summary>
            <param name="itemCacheTfKey">
            The item cache type field key.
            </param>
            <param name="customerType">
            The customer type.
            </param>
            <param name="startDate">
            The start Date.
            </param>
            <param name="endDate">
            The end Date.
            </param>
            <returns>
            The count of item caches.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IPaymentRepository">
            <summary>
            Marker interface for the payment repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IProductRepository">
            <summary>
            Marker interface for the address repository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetByDetachedContentType(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProduct"/> that has detached content of type.
            </summary>
            <param name="detachedContentTypeKey">
            The detached content type key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeyForSlug(System.String)">
            <summary>
            The get key for slug.
            </summary>
            <param name="slug">
            The slug.
            </param>
            <returns>
            The <see cref="T:System.Guid"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.SkuExists(System.String)">
            <summary>
            Gets or sets a value Indicating whether or not a SKU is already exists in the database
            </summary>
            <param name="sku">The SKU to be tested</param>
            <returns>A value indicating whether or not a SKU is already exists in the database</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysWithOption(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionKey">
            The option key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysWithOption(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionName">
            The option name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysWithOption(System.String,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionName">
            The option name.
            </param>
            <param name="choiceName">
            The choice name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysWithOption(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionName">
            The option name.
            </param>
            <param name="choiceNames">
            The choice names.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysWithOption(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionNames">
            The option names.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysInPriceRange(System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys in price range.
            </summary>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysInPriceRange(System.Decimal,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys in price range.
            </summary>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="taxModifier">
            The tax modifier.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysByManufacturer(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by manufacturer.
            </summary>
            <param name="manufacturer">
            The manufacturer.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysByManufacturer(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by manufacturer.
            </summary>
            <param name="manufacturer">
            The manufacturer.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysByBarcode(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by barcode.
            </summary>
            <param name="barcode">
            The barcode.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysByBarcode(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by barcode.
            </summary>
            <param name="barcodes">
            The barcodes.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysInStock(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean,System.Boolean)">
            <summary>
            The get products keys in stock.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeAllowOutOfStockPurchase">
            The include allow out of stock purchase.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetProductsKeysOnSale(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys on sale.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets entity from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets entity from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetEntitiesThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets distinct entity from multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetEntitiesThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a distinct entity from multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get entity keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get entity keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            A filter term
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysNotInCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysNotInCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The filter term
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets the entity keys for distinct entities in multiple collections
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a paged list of distinct keys for entities in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            A filter term
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysNotInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysNotInAnyCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The filter term
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysThatExistInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductRepository.GetKeysThatExistInAnyCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IProductVariantRepository">
            <summary>
            Defines the product variant repository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.GetProductVariantWithAttributes(NKart.Core.Models.IProduct,System.Collections.Generic.List{NKart.Core.Models.IProductVariant},System.Guid[])">
            <summary>
            Returns <see cref="T:NKart.Core.Models.IProductVariant"/> given the product and the collection of attribute ids that defines the<see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="variants">
            List of variants to check against
            </param>
            <param name="attributeKeys">
            The attribute Keys.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.ProductVariantWithAttributesExists(NKart.Core.Models.IProduct,System.Collections.Generic.List{NKart.Core.Models.IProductVariant},NKart.Core.Models.ProductAttributeCollection)">
            <summary>
            Compares the <see cref="T:NKart.Core.Models.ProductAttributeCollection"/> with other <see cref="T:NKart.Core.Models.IProductVariant"/>s of the <see cref="T:NKart.Core.Models.IProduct"/> pass
            to determine if the a variant already exists with the attributes passed
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct"/> to reference</param>
            <param name="variants">
            List of variants to check against
            </param>
            <param name="attributes"><see cref="T:NKart.Core.Models.ProductAttributeCollection"/> to compare</param>
            <returns>True/false indicating whether or not a <see cref="T:NKart.Core.Models.IProductVariant"/> already exists with the <see cref="T:NKart.Core.Models.ProductAttributeCollection"/> passed</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.GetByProductKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductVariant"/> object for a given Product Key
            </summary>
            <param name="productKey">GUID product key of the <see cref="T:NKart.Core.Models.IProductVariant"/> collection to retrieve</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.GetProductVariantCollection(System.Guid)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.ProductVariantCollection"/> for a given product.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductVariantCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.GetDetachedContentCollection(System.Guid)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.DetachedContent.DetachedContentCollection`1"/> for the collection.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.DetachedContentCollection`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.GetCategoryInventoryCollection(System.Guid)">
            <summary>
            Gets the category inventory collection.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.CatalogInventoryCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.GetByWarehouseKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductVariant"/> objects associated with a given warehouse 
            </summary>
            <param name="warehouseKey">The 'unique' id of the warehouse</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.SkuExists(System.String)">
            <summary>
            True/false indicating whether or not a SKU is already exists in the database
            </summary>
            <param name="sku">
            The SKU to be tested
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> indicating whether on not the SKU exists
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.SaveCatalogInventory(NKart.Core.Models.IProductVariant)">
            <summary>
            Saves the catalog inventory.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
            <remarks>
            This merely asserts that an association between the warehouse and the variant has been made
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.SaveDetachedContents(NKart.Core.Models.IProductVariant)">
            <summary>
            Safely saves the detached content selection.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.PerformGet(NKart.Core.Models.Rdbms.ProductDto)">
            <summary>
            Performs a get, exactly the same as base PerformGet
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IProductVariantRepository.PerformGet(NKart.Core.Models.Rdbms.ProductDto,NKart.Core.Models.ProductAttributeCollection,NKart.Core.Models.CatalogInventoryCollection,NKart.Core.Models.DetachedContent.DetachedContentCollection{NKart.Core.Models.DetachedContent.IProductVariantDetachedContent})">
            <summary>
            Performs a Get but improved performance by passing in collections
            </summary>
            <param name="dto"></param>
            <param name="productAttributeCollection"></param>
            <param name="catalogInventoryCollection"></param>
            <param name="productVariantDetachedContents"></param>
            <returns></returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IShipCountryRepository">
            <summary>
            Marker interface for teh ship country repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IShipmentRepository">
            <summary>
            Marker interface for the shipiment repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IShipMethodRepository">
            <summary>
            Marker interface for the ship method repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IShipRateTierRepository">
            <summary>
            Marker interface for the ship rate tier repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IStoreSettingRepository">
            <summary>
            Defines the StoreSettingRepository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStoreSettingRepository.GetNextInvoiceNumber(System.Guid,System.Func{System.Int32},System.Int32)">
            <summary>
            Gets the next invoice number
            </summary>
            <param name="storeSettingKey">Constant GUID Key of the NextInvoiceNumber store setting</param>
            <param name="validate">Function to execute to validate the next number</param>
            <param name="invoicesCount">The number of invoices needing invoice numbers.  Useful when saving multiple new invoices.</param>
            <returns>The next invoice number</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStoreSettingRepository.GetNextOrderNumber(System.Guid,System.Func{System.Int32},System.Int32)">
            <summary>
            Gets the next order number
            </summary>
            <param name="storeSettingKey">Constant GUID Key of the NextOrderNumber store setting</param>
            <param name="validate">Function to execute to validate the next number</param>
            <param name="ordersCount">The number of orders needing invoice orders.  Useful when saving multiple new orders.</param>
            <returns>The next order number</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStoreSettingRepository.GetNextShipmentNumber(System.Guid,System.Func{System.Int32},System.Int32)">
            <summary>
            Gets the next shipment number
            </summary>
            <param name="storeSettingKey">Constant GUID Key of the NextOrderNumber store setting</param>
            <param name="validate">Function to execute to validate the next number</param>
            <param name="shipmentsCount">The number of orders needing invoice orders.  Useful when saving multiple new orders.</param>
            <returns>The next order number</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.IStoreSettingRepository.GetTypeFields">
            <summary>
            Gets the complete collection of registered type fields
            </summary>
            <returns>The collection of <see cref="T:NKart.Core.Models.TypeFields.TypeField"/></returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IWarehouseRepository">
            <summary>
            Marker interface for the address repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.InvoiceRepository">
            <summary>
            Represents the Invoice Repository
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.InvoiceRepository._invoiceLineItemRepository">
            <summary>
            The invoice line item repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.InvoiceRepository._orderRepository">
            <summary>
            The order repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.InvoiceRepository._noteRepository">
            <summary>
            The note repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,NKart.Core.Persistence.Repositories.IInvoiceLineItemRepository,NKart.Core.Persistence.Repositories.IOrderRepository,NKart.Core.Persistence.Repositories.INoteRepository,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.InvoiceRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="invoiceLineItemRepository">
            The invoice line item repository.
            </param>
            <param name="orderRepository">
            The order repository.
            </param>
            <param name="noteRepository">
            The note Repository.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.SearchKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Performs the default search by term
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.SearchKeys(System.String,System.DateTime,System.DateTime,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Performs a search by term and a date rang
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetMaxDocumentNumber">
            <summary>
            The get max document number.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.ExistsInCollection(System.Guid,System.Guid)">
            <summary>
            Returns a value indicating whether or not the invoice exists in a collection.
            </summary>
            <param name="entityKey">
            The invoice key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.ExistsInCollection(System.Guid,System.Guid[])">
            <summary>
            Returns a value indicating whether or not the entity exists in at least one of the collections.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.AddToCollection(System.Guid,System.Guid)">
            <summary>
            Adds a invoice to a static invoice collection.
            </summary>
            <param name="entityKey">
            The invoice key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.RemoveFromCollection(System.Guid,System.Guid)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="entityKey">
            The invoice key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetKeysFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get invoice keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetKeysThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of distinct entity keys from entities contained in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetKeysFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetKeysThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of distinct entity keys from entities contained in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetKeysNotInCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetKeysNotInAnyCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetKeysNotInCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetKeysNotInAnyCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetEntitiesThatExistInAllCollections(System.Guid[],System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetEntitiesThatExistInAllCollections(System.Guid[],System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetDistinctCurrencyCodes">
            <summary>
            Gets distinct currency codes used in invoices.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.SumInvoiceTotals(System.DateTime,System.DateTime,System.String,System.Boolean)">
            <summary>
             Gets the totals of invoices in a date range for a specific currency code.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="excludeCancelledAndFraud"></param>
            <returns>
            The sum of the invoice totals.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.SumInvoiceTotals(System.DateTime,System.DateTime,System.String,System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoiceStatus})">
            <summary>
             Gets the totals of invoices in a date range for a specific currency code.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="invoiceStatuses">
            The invoice statuses.
            </param>
            <returns>
            The sum of the invoice totals.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.SumLineItemTotalsBySku(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Gets the total of line items for a give SKU invoiced in a specific currency across the date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <returns>
            The total of line items for a give SKU invoiced in a specific currency across the date range.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoicesMatchingInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term and the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoiceKeysMatchingInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoicesMatchingTermNotInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term but not the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoiceKeysMatchingTermNotInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoicesMatchingOrderStatus(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term and the order status key.
            </summary>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoiceKeysMatchingOrderStatus(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status key.
            </summary>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoiceKeysMatchingOrderStatuses(System.Collections.Generic.List{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status keys.
            </summary>
            <param name="orderStatusKeys">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoicesMatchingOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term and the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoiceKeysMatchingOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoicesMatchingTermNotOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term but not the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoiceKeysMatchingTermNotOrderStatus(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the order status key.
            </summary>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetInvoiceKeysMatchingTermNotOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.PerformGet(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IInvoice"/>.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IInvoice"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IInvoice})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IInvoice"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetBaseQuery(System.Boolean)">
            <summary>
            The get base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetDeleteClauses">
            <summary>
            The get delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.PersistNewItem(NKart.Core.Models.IInvoice)">
            <summary>
            The persist new item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.PersistUpdatedItem(NKart.Core.Models.IInvoice)">
            <summary>
            The persist updated item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.SaveNotes(NKart.Core.Models.IInvoice)">
            <summary>
            Saves the notes.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.BuildInvoiceSearchSql(System.String)">
            <summary>
            Builds an invoice search query.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetLineItemCollection(System.Guid)">
            <summary>
            The get line item collection.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.LineItemCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetOrderCollection(System.Guid)">
            <summary>
            The get order collection.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.OrderCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.InvoiceRepository.GetNotes(System.Guid)">
            <summary>
            Gets the notes collection for an invoice.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ItemCacheRepository">
            <summary>
            The item cache repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ItemCacheRepository._itemCacheLineItemRepository">
            <summary>
            The <see cref="T:NKart.Core.Persistence.Repositories.IItemCacheLineItemRepository"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,NKart.Core.Persistence.Repositories.IItemCacheLineItemRepository,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ItemCacheRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="itemCacheLineItemRepository">
            The item cache line item repository.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.GetCustomerItemCachePage(System.Guid,System.DateTime,System.DateTime,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
            <param name="itemCacheTfKey">
            The item cache type.
            </param>
            <param name="startDate">
            The start Date.
            </param>
            <param name="endDate">
            The end Date.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The sort by field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.Count(System.Guid,NKart.Core.CustomerType,System.DateTime,System.DateTime)">
            <summary>
            Gets the count of of item caches for a customer type for a given date range.
            </summary>
            <param name="itemCacheTfKey">
            The item cache type field key.
            </param>
            <param name="customerType">
            The customer type.
            </param>
            <param name="startDate">
            The start Date.
            </param>
            <param name="endDate">
            The end Date.
            </param>
            <returns>
            The count of item caches.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IItemCache"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IItemCache"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets base SQL query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.PersistNewItem(NKart.Core.Models.IItemCache)">
            <summary>
            Adds a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.PersistUpdatedItem(NKart.Core.Models.IItemCache)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.PersistDeletedItem(NKart.Core.Models.IItemCache)">
            <summary>
            Deletes an existing item from the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IItemCache})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IItemCache"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.GetPageKeys(System.Guid,System.DateTime,System.DateTime,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
            <param name="itemCacheTfKey">
            The item cache type.
            </param>
            <param name="startDate">
            The start Date.
            </param>
            <param name="endDate">
            The end Date.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The sort by field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ItemCacheRepository.GetLineItemCollection(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.LineItemCollection"/> by an item cache key.
            </summary>
            <param name="itemCacheKey">
            The item cache key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.LineItemCollection"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.PaymentRepository">
            <summary>
            The payment repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.PaymentRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPayment"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IPayment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IPayment"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.GetBaseQuery(System.Boolean)">
            <summary>
            The get base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.GetDeleteClauses">
            <summary>
            Gets a list delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.PersistNewItem(NKart.Core.Models.IPayment)">
            <summary>
            Saves a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.PersistUpdatedItem(NKart.Core.Models.IPayment)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.PersistDeletedItem(NKart.Core.Models.IPayment)">
            <summary>
            Deletes item from the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.PaymentRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IPayment})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ProductVariantRepository">
            <summary>
            The product variant repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ProductVariantRepository.ChunkSize">
            <summary>
            Chunk size for SQL statements
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ProductVariantRepository._productOptionRepository">
            <summary>
            The <see cref="T:NKart.Core.Persistence.Repositories.IProductOptionRepository"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,NKart.Core.Persistence.Repositories.IProductOptionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ProductVariantRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
            <param name="productOptionRepository">
            The <see cref="T:NKart.Core.Persistence.Repositories.IProductOptionRepository"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetByWarehouseKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductVariant"/> objects associated with a given warehouse 
            </summary>
            <param name="warehouseKey">The 'unique' key of the warehouse</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetProductVariantWithAttributes(NKart.Core.Models.IProduct,System.Collections.Generic.List{NKart.Core.Models.IProductVariant},System.Guid[])">
            <summary>
            Returns <see cref="T:NKart.Core.Models.IProductVariant"/> given the product and the collection of attribute ids that defines the<see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="variants">
            Variants to check against
            </param>
            <param name="attributeKeys">
            The attribute Keys.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.ProductVariantWithAttributesExists(NKart.Core.Models.IProduct,System.Collections.Generic.List{NKart.Core.Models.IProductVariant},NKart.Core.Models.ProductAttributeCollection)">
            <summary>
            Compares the <see cref="T:NKart.Core.Models.ProductAttributeCollection"/> with other <see cref="T:NKart.Core.Models.IProductVariant"/>s of the <see cref="T:NKart.Core.Models.IProduct"/> pass
            to determine if the a variant already exists with the attributes passed
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct"/> to reference</param>
            <param name="variants">
            Variants to check against
            </param>
            <param name="attributes"><see cref="T:NKart.Core.Models.ProductAttributeCollection"/> to compare</param>
            <returns>True/false indicating whether or not a <see cref="T:NKart.Core.Models.IProductVariant"/> already exists with the <see cref="T:NKart.Core.Models.ProductAttributeCollection"/> passed</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetByProductKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductVariant"/> object for a given Product Key
            </summary>
            <param name="productKey">GUID product key of the <see cref="T:NKart.Core.Models.IProductVariant"/> collection to retrieve</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetProductVariantCollection(System.Guid)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.ProductVariantCollection"/> for a given product.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ProductVariantCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SkuExists(System.String)">
            <summary>
            True/false indicating whether or not a SKU is already exists in the database
            </summary>
            <param name="sku">The SKU to be tested</param>
            <returns>
            A value indicating whether or not a SKU is already exists in the database
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PersistNewItems(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductVariant})">
            <summary>
            The persist new items.
            </summary>
            <param name="entities">
            The entities.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PersistUpdatedItems(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductVariant})">
            <summary>
            The persist updated items.
            </summary>
            <param name="entities">
            The entities.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetDetachedContentCollection(System.Guid)">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.DetachedContent.DetachedContentCollection`1"/> for the collection.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.DetachedContentCollection`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetCategoryInventoryCollection(System.Guid)">
            <summary>
            Gets the category inventory collection.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.CatalogInventoryCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SaveCatalogInventory(NKart.Core.Models.IProductVariant)">
            <summary>
            Saves the catalog inventory.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
            <remarks>
            This merely asserts that an association between the warehouse and the variant has been made
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SaveCatalogInventory(NKart.Core.Models.IProductVariant[])">
            <summary>
            The save catalog inventory.
            </summary>
            <param name="productVariants">
            The product variants.
            </param>
            <remarks>
            This merely asserts that an association between the warehouse and the variant has been made
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SqlCeUpdateCatalogInventory(NKart.Core.Models.ICatalogInventory)">
            <summary>
            Updates SQLCE database where bulk update is not available.
            </summary>
            <param name="inv">
            The inventory.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SqlCeDeleteCatalogInventory(System.Guid,System.Guid)">
            <summary>
            Deletes catalog inventory where bulk operations are not available.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <param name="catalogKey">
            The catalog key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SaveDetachedContents(NKart.Core.Models.IProductVariant)">
            <summary>
            Safely saves the detached content selection.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SaveDetachedContents(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductVariant})">
            <summary>
            Bulk save detached contents.
            </summary>
            <param name="productVariants">
            The product variants.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.DeleteDetachedContent(NKart.Core.Models.DetachedContent.IProductVariantDetachedContent)">
            <summary>
            The delete detached content.
            </summary>
            <param name="detachedContent">
            The detached content.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SaveDetachedContent(NKart.Core.Models.DetachedContent.IProductVariantDetachedContent,System.String)">
            <summary>
            The save detached content.
            </summary>
            <param name="detachedContent">
            The detached content.
            </param>
            <param name="slug">
            The generated slug
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetProductVariantDetachedContents(System.Guid)">
            <summary>
            Gets detached content associated with the product variant.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetProductVariantDetachedContents(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets detached content associated with the product variant.
            </summary>
            <param name="productVariantKeys">
            The product variant keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetProductVariantDetachedContents(System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Guid}})">
            <summary>
            Gets detached content associated with the product variant.
            </summary>
            <param name="productVariantKeys">
            The product variant keys in list batches
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PerformGet(System.Guid)">
            <summary>
            Gets the product variant.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PerformGet(NKart.Core.Models.Rdbms.ProductDto)">
            <summary>
            Gets the product variant
            </summary>
            <param name="dto">
            ProductDto
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
            <remarks>
            This is a combination of the overridden PerformGet(Guid) and the 
            MerchelloRespositoryBase Get(Guid key). Not sure where else to put this method ^LM
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PerformGet(NKart.Core.Models.Rdbms.ProductDto,NKart.Core.Models.ProductAttributeCollection,NKart.Core.Models.CatalogInventoryCollection,NKart.Core.Models.DetachedContent.DetachedContentCollection{NKart.Core.Models.DetachedContent.IProductVariantDetachedContent})">
            <summary>
            Gets the product variant
            </summary>
            <param name="dto">
            Product Dto
            </param>
            <param name="productAttributeCollection">
            Populated productAttributeCollection
            </param>
            <param name="catalogInventoryCollection">
            Populated catalogInventoryCollection
            </param>
            <param name="detachedContentCollection">
            Populated detachedContentCollection
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
            <remarks>
            This is a combination of the overridden PerformGet(Guid) and the 
            MerchelloRespositoryBase Get(Guid key). Not sure where else to put this method ^LM
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PerformGetAll(System.Guid[])">
            <summary>
            The perform get all.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IProductVariant})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductVariant"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>
            This is a 'hefty' method, could be split out into seperate methods
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetVariantsBulk(System.Collections.Generic.List{NKart.Core.Models.Rdbms.ProductDto})">
            <summary>
            Currently the most efficient way to get a list of IProductVariant
            TODO - Must be a better / more efficient way to do this
            </summary>
            <param name="variantDtos"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetvariantsDetachedContentDictionary(System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Guid}})">
            <summary>
            Gets the variant DetachedContentCollection in a dictionary
            </summary>
            <param name="variantKeyLists"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetCatalogInventoryCollectionDictionary(System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Guid}})">
            <summary>
            Gets the CatalogInventoryCollection with the id as the key
            </summary>
            <param name="variantKeyLists"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetProductAttributeCollectionDictionary(System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Guid}})">
            <summary>
            Gets a dictionary of the ProductAttributeCollection key'd by guid
            </summary>
            <param name="variantKeyLists"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL clause.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetBaseWhereClause">
            <summary>
            Gets the base SQL where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PersistNewItem(NKart.Core.Models.IProductVariant)">
            <summary>
            The persist new item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PersistUpdatedItem(NKart.Core.Models.IProductVariant)">
            <summary>
            The persist updated item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.PersistDeletedItem(NKart.Core.Models.IProductVariant)">
            <summary>
            The persist deleted item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.GetDeleteClauses">
            <summary>
            Gets the delete clauses that need to be executed when a variant is to be deleted
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.MandateProductVariantRules(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductVariant})">
            <summary>
            The mandate product variant rules.
            </summary>
            <param name="entities">
            The entities.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.MandateProductVariantRules(NKart.Core.Models.IProductVariant)">
            <summary>
            The mandate product variant rules.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.AddCatalogInventory(NKart.Core.Models.IProductVariant,NKart.Core.Models.ICatalogInventory)">
            <summary>
            Associates a <see cref="T:NKart.Core.Models.IProductVariant"/> with a catalog inventory.
            </summary>
            <param name="productVariant">
            The product variant.
            </param>
            <param name="inv">
            The <see cref="T:NKart.Core.Models.ICatalogInventory"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.UpdateCatalogInventory(NKart.Core.Models.ICatalogInventory)">
            <summary>
            Updates catalog inventory.
            </summary>
            <param name="inv">
            The <see cref="T:NKart.Core.Models.ICatalogInventory"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.DeleteCatalogInventory(System.Guid,System.Guid)">
            <summary>
            Deletes catalog inventory.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <param name="catalogKey">
            The catalog key.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SkuExists(System.String,System.Guid)">
            <summary>
            True/false indicating whether or not a SKU exists on a record other than the record with the id passed
            </summary>
            <param name="sku">The SKU to be tested</param>
            <param name="productVariantKey">The key of the <see cref="T:NKart.Core.Models.IProductVariant"/> to be excluded</param>
            <returns>A value indicating whether or not a SKU exists on a record other than the record with the id passed</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.SkuExists(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductVariant})">
            <summary>
            True/false indicating whether or not a SKU exists on a record other than the record with the id passed
            </summary>
            <param name="entities">The collection of the <see cref="T:NKart.Core.Models.IProductVariant"/> to be excluded</param>
            <returns>A value indicating whether or not a SKU exists on a record other than the record with the id passed</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ProductVariantRepository.EnsureSlug(NKart.Core.Models.DetachedContent.IProductVariantDetachedContent,System.String,System.Int32)">
            <summary>
            Ensures the slug is valid.
            </summary>
            <param name="detachedContent">
            The detached content.
            </param>
            <param name="slug">
            The slug.
            </param>
            <returns>
            A slug incremented with a count if necessary.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ShipCountryRepository">
            <summary>
            The ship country repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ShipCountryRepository._storeSettingService">
            <summary>
            The store setting service.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,NKart.Core.Services.IStoreSettingService,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ShipCountryRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.Exists(System.Guid,System.String)">
            <summary>
            Determines if a catalog exists for a ship country.
            </summary>
            <param name="catalogKey">
            The catalog key.
            </param>
            <param name="countryCode">
            The country code.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipCountry"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipCountry"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IShipCountry"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IShipCountry})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IShipCountry"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.GetDeleteClauses">
            <summary>
            Gets the delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.PersistNewItem(NKart.Core.Models.IShipCountry)">
            <summary>
            Saves a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipCountryRepository.PersistUpdatedItem(NKart.Core.Models.IShipCountry)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ShipmentRepository">
            <summary>
            The shipment repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.ShipmentRepository._orderLineItemRepository">
            <summary>
            The order line item repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,NKart.Core.Persistence.Repositories.IOrderLineItemRepository,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ShipmentRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="orderLineItemRepository">
            The order Line Item Repository.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.GetMaxDocumentNumber">
            <summary>
            The get max document number.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.PerformGet(System.Guid)">
            <summary>
            Gets a shipment by it's key
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of all shipments with the option to pass an array of shipment keys
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Constructs the base shipment query
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.GetDeleteClauses">
            <summary>
            The get delete clauses.
            </summary>
            <returns>
            The collection of delete clauses.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.PersistNewItem(NKart.Core.Models.IShipment)">
            <summary>
            Persists a new shipment record.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.PersistUpdatedItem(NKart.Core.Models.IShipment)">
            <summary>
            Persists an updated shipment record.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.PersistDeletedItem(NKart.Core.Models.IShipment)">
            <summary>
            Deletes a shipment record.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IShipment})">
            <summary>
            Gets a collection of shipments by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The collection of shipments.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipmentRepository.GetLineItems(System.Guid)">
            <summary>
            Gets a collection of line items for a shipment.
            </summary>
            <param name="shipmentKey">
            The shipment key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.LineItemCollection"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ShipMethodRepository">
            <summary>
            The ship method repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipMethodRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ShipMethodRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipMethodRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipMethod"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipMethodRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IShipMethod"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipMethodRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IShipMethod})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IShipMethod"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipMethodRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL clause.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipMethodRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipMethodRepository.GetDeleteClauses">
            <summary>
            Gets the list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipMethodRepository.PersistNewItem(NKart.Core.Models.IShipMethod)">
            <summary>
            Saves a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipMethodRepository.PersistUpdatedItem(NKart.Core.Models.IShipMethod)">
            <summary>
            Saves an existing item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.ShipRateTierRepository">
            <summary>
            Represents the ShipRateTierRepository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipRateTierRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.ShipRateTierRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipRateTierRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipRateTier"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipRateTier"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipRateTierRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IShipRateTier"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipRateTierRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IShipRateTier})">
            <summary>
            Get a collection of <see cref="T:NKart.Core.Models.IShipRateTier"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipRateTierRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipRateTierRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipRateTierRepository.GetDeleteClauses">
            <summary>
            Gets a list of delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipRateTierRepository.PersistNewItem(NKart.Core.Models.IShipRateTier)">
            <summary>
            Saves a new item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.ShipRateTierRepository.PersistUpdatedItem(NKart.Core.Models.IShipRateTier)">
            <summary>
            Updates an existing item.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.StoreSettingRepository">
            <summary>
            Represents the Store Settings Repository
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.StoreSettingRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.GetNextInvoiceNumber(System.Guid,System.Func{System.Int32},System.Int32)">
            <summary>
            Gets the next invoice number
            </summary>
            <param name="storeSettingKey">Constant GUID Key of the NextInvoiceNumber store setting</param>
            <param name="validate">Function to execute to validate the next number</param>
            <param name="invoicesCount">The number of invoices needing invoice numbers.  Useful when saving multiple new invoices.</param>
            <returns>The next invoice number</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.GetNextOrderNumber(System.Guid,System.Func{System.Int32},System.Int32)">
            <summary>
            Gets the next order number
            </summary>
            <param name="storeSettingKey">Constant GUID Key of the NextOrderNumber store setting</param>
            <param name="validate">Function to execute to validate the next number</param>
            <param name="ordersCount">The number of orders needing invoice orders.  Useful when saving multiple new orders.</param>
            <returns>The next order number</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.GetNextShipmentNumber(System.Guid,System.Func{System.Int32},System.Int32)">
            <summary>
            Gets the next shipment number
            </summary>
            <param name="storeSettingKey">Constant GUID Key of the NextShipmentNumber store setting</param>
            <param name="validate">Function to execute to validate the next number</param>
            <param name="shipmentsCount">The number of shipments needing invoice orders.  Useful when saving multiple new shipments.</param>
            <returns>The next shipment number</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.GetTypeFields">
            <summary>
            The get type fields.
            </summary>
            <returns>
            The collection of all type fields.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IStoreSetting"/> by it's key
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IStoreSetting"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IStoreSetting"/>
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IStoreSetting})">
            <summary>
            A collection of <see cref="T:NKart.Core.Models.IStoreSetting"/> by query
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL query
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.GetDeleteClauses">
            <summary>
            Gets the collection of delete clauses.
            </summary>
            <returns>
            The collection of delete clauses.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.PersistNewItem(NKart.Core.Models.IStoreSetting)">
            <summary>
            Persists a new <see cref="T:NKart.Core.Models.IStoreSetting"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.StoreSettingRepository.PersistUpdatedItem(NKart.Core.Models.IStoreSetting)">
            <summary>
            Persist an updated <see cref="T:NKart.Core.Models.IStoreSetting"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.WarehouseRepository">
            <summary>
            The warehouse repository.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.WarehouseRepository._warehouseCatalogRepository">
            <summary>
            The _warehouse catalog repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,NKart.Core.Persistence.Repositories.IWarehouseCatalogRepository,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.WarehouseRepository"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="warehouseCatalogRepository">
            The warehouse Catalog Repository.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.PerformGet(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IWarehouse"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouse"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.PerformGetAll(System.Guid[])">
            <summary>
            Gets the collection of all <see cref="T:NKart.Core.Models.IWarehouse"/>.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.GetBaseQuery(System.Boolean)">
            <summary>
            Gets the base SQL clause.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.GetBaseWhereClause">
            <summary>
            Gets the base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.GetDeleteClauses">
            <summary>
            Gets a list delete clauses.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.PersistNewItem(NKart.Core.Models.IWarehouse)">
            <summary>
            Saves a new item to the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.PersistUpdatedItem(NKart.Core.Models.IWarehouse)">
            <summary>
            Updates an existing item in the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.PersistDeletedItem(NKart.Core.Models.IWarehouse)">
            <summary>
            Deletes an existing item from the database.
            </summary>
            <param name="entity">
            The entity.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.WarehouseRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IWarehouse})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IWarehouse"/> by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository">
            <summary>
            The anonymous customer repository.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository"/> class.
            </summary>
            <param name="work">
            The database unit of work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.PerformGet(System.Guid)">
            <summary>
            The perform get.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.PerformGetAll(System.Guid[])">
            <summary>
            The perform get all.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The collection of all anonymous customers.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.GetBaseQuery(System.Boolean)">
            <summary>
            The get base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The <see cref="T:System.String"/> representing the base SQL where clause.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.GetDeleteClauses">
            <summary>
            The get delete clauses.
            </summary>
            <returns>
            The collection of SQL delete clauses.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.PersistNewItem(NKart.Core.Models.IAnonymousCustomer)">
            <summary>
            The persist new item.
            </summary>
            <param name="entity">
            The entity to be created.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.PersistUpdatedItem(NKart.Core.Models.IAnonymousCustomer)">
            <summary>
            The persist updated item.
            </summary>
            <param name="entity">
            The entity to be updated.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.PersistDeletedItem(NKart.Core.Models.IAnonymousCustomer)">
            <summary>
            The persist deleted item.
            </summary>
            <param name="entity">
            The entity to be deleted.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.AnonymousCustomerRepository.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IAnonymousCustomer})">
            <summary>
            The perform get by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> returned by the query.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.IAnonymousCustomerRepository">
            <summary>
            Marker interface for the address repository
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1">
            <summary>
            Represent an abstract Repository for PetaPoco based repositories
            </summary>
            <typeparam name="TEntity">The type of entity</typeparam>    
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1._sqlSyntax">
            <summary>
            The sql syntax.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1"/> class.
            </summary>
            <param name="work">
            The work.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL Syntax.
            </param>
        </member>
        <member name="P:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.SqlSyntax">
            <summary>
            Gets the SQL syntax.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.UnitOfWork">
            <summary>
            Gets the database Unit of Work added to the repository
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.Database">
            <summary>
            Gets the database.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.GetBaseQuery(System.Boolean)">
            <summary>
            The get base query.
            </summary>
            <param name="isCount">
            The is count.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Sql"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.GetBaseWhereClause">
            <summary>
            The get base where clause.
            </summary>
            <returns>
            The base "where" string.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.GetDeleteClauses">
            <summary>
            The get delete clauses.
            </summary>
            <returns>
            The collection of delete clauses
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.PersistNewItem(`0)">
            <summary>
            The persist new item.
            </summary>
            <param name="entity">
            The entity to be deleted
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.PersistUpdatedItem(`0)">
            <summary>
            The persist updated item.
            </summary>
            <param name="entity">
            The entity to be updated
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.PerformExists(System.Guid)">
            <summary>
            The perform exists.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.PerformCount(Umbraco.Core.Persistence.Querying.IQuery{`0})">
            <summary>
            The perform count.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> count.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloPetaPocoRepositoryBase`1.PersistDeletedItem(`0)">
            <summary>
            The persist deleted item.
            </summary>
            <param name="entity">
            The entity to be deleted.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1">
            <summary>
            Represent an abstract Repository, which is the base of the Repository implementations
            </summary>
            <typeparam name="TEntity">Type of <see cref="T:NKart.Core.Models.EntityBase.IEntity"/> entity for which the repository is used</typeparam>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1._work">
            <summary>
            The unit of work.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.#ctor(NKart.Core.Persistence.UnitOfWork.IUnitOfWork,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1"/> class.
            </summary>
            <param name="work">
            The unit of work.
            </param>
            <param name="logger">
            The <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </param>
        </member>
        <member name="P:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.UnitKey">
            <summary>
            Gets the unit of work key. Used for testing purposes
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.UnitOfWork">
            <summary>
            Gets the Unit of Work added to the repository
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PersistNewItem(NKart.Core.Models.EntityBase.IEntity)">
            <summary>
            Unit of work method that tells the repository to persist the new entity
            </summary>
            <param name="entity">The entity to be created</param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PersistUpdatedItem(NKart.Core.Models.EntityBase.IEntity)">
            <summary>
            Unit of work method that tells the repository to persist the updated entity
            </summary>
            <param name="entity">The entity to be updated</param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PersistDeletedItem(NKart.Core.Models.EntityBase.IEntity)">
            <summary>
            Unit of work method that tells the repository to persist the deletion of the entity
            </summary>
            <param name="entity">The entity to be deleted</param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.AddOrUpdate(`0)">
            <summary>
            Adds or Updates an entity of type TEntity
            </summary>
            <remarks>This method is backed by an <see cref="T:Umbraco.Core.Cache.ICacheProvider"/> cache</remarks>
            <param name="entity">The entity to be added or updated</param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.Delete(`0)">
            <summary>
            Deletes the passed in entity
            </summary>
            <param name="entity">The entity to be deleted</param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.Get(System.Guid)">
            <summary>
            Gets an entity by the passed in Id
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The entity retrieved
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.GetAll(System.Guid[])">
            <summary>
            Gets all entities of type TEntity or a list according to the passed in Ids
            </summary>
            <param name="keys">The keys of the entities to be returned</param>
            <returns>A collection of entities</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.GetByQuery(Umbraco.Core.Persistence.Querying.IQuery{`0})">
            <summary>
            Gets a list of entities by the passed in query
            </summary>
            <param name="query">The <see cref="T:Umbraco.Core.Persistence.Querying.IQuery`1"/></param>
            <returns>A collection of entities</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.Exists(System.Guid)">
            <summary>
            Returns a boolean indicating whether an entity with the passed Key exists
            </summary>
            <param name="key">The key of the entity</param>
            <returns>A value indicating whether or not the entity exists</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.Count(Umbraco.Core.Persistence.Querying.IQuery{`0})">
            <summary>
            Returns an integer with the count of entities found with the passed in query
            </summary>
            <param name="query">The <see cref="T:Umbraco.Core.Persistence.Querying.IQuery`1"/></param>
            <returns>The count of entities</returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.GetCacheKey(System.Guid)">
            <summary>
            Gets the cache key for the entity.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The cache key <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PerformGet(System.Guid)">
            <summary>
            The perform get.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="!:TEntity"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PerformGetAll(System.Guid[])">
            <summary>
            The abstract perform get all.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The collection of all entities or with keys matching those in the parameter collection.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PerformGetByQuery(Umbraco.Core.Persistence.Querying.IQuery{`0})">
            <summary>
            The perform get by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The collection of entities matching the query
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PerformExists(System.Guid)">
            <summary>
            The perform exists.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            A value indicating whether or not an entity with the key exists.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PerformCount(Umbraco.Core.Persistence.Querying.IQuery{`0})">
            <summary>
            Perform count query
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> count
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PersistNewItem(`0)">
            <summary>
            The persist new item.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PersistUpdatedItem(`0)">
            <summary>
            The persist updated item.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.PersistDeletedItem(`0)">
            <summary>
            The persist deleted item.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Repositories.MerchelloRepositoryBase`1.DisposeResources">
            <summary>
            Dispose disposable properties
            </summary>
            <remarks>
            Ensure the unit of work is disposed
            </remarks>
        </member>
        <member name="T:NKart.Core.Persistence.DatabaseExtensions">
            <summary>
            Extension methods for <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.DatabaseExtensions.GetDbTableColumnSize(Umbraco.Core.Persistence.Database,System.String,System.String)">
            <summary>
            Gets the size of a column (database field) for a given table.
            </summary>
            <param name="database">
            The <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </param>
            <param name="tableName">
            The table name.
            </param>
            <param name="columnName">
            The column name.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.EntityUseCountFactory">
            <summary>
            Factory responsible for building the <see cref="T:NKart.Core.Models.Counting.EntityUseCount"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.EntityUseCountFactory.Build(NKart.Core.Models.Rdbms.EntityUseCountDto)">
            <summary>
            Builds the <see cref="T:NKart.Core.Models.Counting.EntityUseCount"/>.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Counting.EntityUseCount"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.NoteFactory">
            <summary>
            The audit log factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.NoteFactory.BuildEntity(NKart.Core.Models.Rdbms.NoteDto)">
            <summary>
            Builds a <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.NoteFactory.BuildDto(NKart.Core.Models.INote)">
            <summary>
            Builds an <see cref="T:NKart.Core.Models.Rdbms.NoteDto"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.NoteDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.AuditLogFactory">
            <summary>
            The audit log factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.AuditLogFactory.BuildEntity(NKart.Core.Models.Rdbms.AuditLogDto)">
            <summary>
            Builds a <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.AuditLogFactory.BuildDto(NKart.Core.Models.Interfaces.IAuditLog)">
            <summary>
            Builds an <see cref="T:NKart.Core.Models.Rdbms.AuditLogDto"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.AuditLogDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.DetachedContentTypeFactory">
            <summary>
            The detached content type factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.DetachedContentTypeFactory.BuildEntity(NKart.Core.Models.Rdbms.DetachedContentTypeDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.DetachedContentTypeFactory.BuildDto(NKart.Core.Models.DetachedContent.IDetachedContentType)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.DetachedContentTypeDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.DigitalMediaFactory">
            <summary>
            The digital media factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.DigitalMediaFactory.BuildEntity(NKart.Core.Models.Rdbms.DigitalMediaDto)">
            <summary>
            Responsible for building <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.DigitalMediaFactory.BuildDto(NKart.Core.Models.Interfaces.IDigitalMedia)">
            <summary>
            Responsible for building <see cref="T:NKart.Core.Models.Rdbms.DigitalMediaDto"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.DigitalMediaDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.EntityCollectionFactory">
            <summary>
            The entity collection factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.EntityCollectionFactory.BuildEntity(NKart.Core.Models.Rdbms.EntityCollectionDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.EntityCollectionFactory.BuildDto(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.EntityCollectionDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.OfferRedeemedFactory">
            <summary>
            Responsible for creating <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> and <see cref="T:NKart.Core.Models.Rdbms.OfferRedeemedDto"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.OfferRedeemedFactory.BuildEntity(NKart.Core.Models.Rdbms.OfferRedeemedDto)">
            <summary>
            Builds a <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> give a <see cref="T:NKart.Core.Models.Rdbms.OfferRedeemedDto"/>.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.OfferRedeemedFactory.BuildDto(NKart.Core.Models.Interfaces.IOfferRedeemed)">
            <summary>
            Builds an <see cref="T:NKart.Core.Models.Rdbms.OfferRedeemedDto"/> from an <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> entity
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.OfferRedeemedDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.OfferSettingsFactory">
            <summary>
            A factory responsible for building offer settings and it's respective DTO object.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.OfferSettingsFactory.BuildEntity(NKart.Core.Models.Rdbms.OfferSettingsDto)">
            <summary>
            Builds a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> given an <see cref="T:NKart.Core.Models.Rdbms.OfferSettingsDto"/>
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.OfferSettingsFactory.BuildDto(NKart.Core.Models.Interfaces.IOfferSettings)">
            <summary>
            Responsible for building the <see cref="T:NKart.Core.Models.Rdbms.OfferSettingsDto"/>
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.OfferSettingsDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.ProductVariantDetachedContentFactory">
            <summary>
            A factory responsible for building product variant detached content models
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.ProductVariantDetachedContentFactory._detachedContentTypeFactory">
            <summary>
            The detached content type factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductVariantDetachedContentFactory.BuildEntity(NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto)">
            <summary>
            Builds <see cref="T:NKart.Core.Models.DetachedContent.IProductVariantDetachedContent"/>.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IProductVariantDetachedContent"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductVariantDetachedContentFactory.BuildDto(NKart.Core.Models.DetachedContent.IProductVariantDetachedContent)">
            <summary>
            Builds the <see cref="T:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.ProductVariantDetachedContentDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.ShipmentStatusFactory">
            <summary>
            The shipment status factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ShipmentStatusFactory.BuildEntity(NKart.Core.Models.Rdbms.ShipmentStatusDto)">
            <summary>
            Builds a shipment status entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipmentStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ShipmentStatusFactory.BuildDto(NKart.Core.Models.IShipmentStatus)">
            <summary>
            Builds a shipment status dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.ShipmentStatusDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.InvoiceLineItemFactory">
            <summary>
            Represents teh InvoiceLineItemFactory
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.ItemCacheLineItemFactory">
            <summary>
            Represents the ItemCacheLineItemFactory
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.NotificationMessageFactory">
            <summary>
            Defines the notification factory
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.NotificationMethodFactory">
            <summary>
            Represents the NotificationMethodFactory
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.OrderLineItemFactory">
            <summary>
            Represents the OrderLineItemFactory
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.OrderFactory">
            <summary>
            The order factory.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.OrderFactory._lineItemCollection">
            <summary>
            The line item collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.OrderFactory.#ctor(NKart.Core.Models.LineItemCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Factories.OrderFactory"/> class.
            </summary>
            <param name="lineItemCollection">
            The line item collection.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.OrderFactory.BuildEntity(NKart.Core.Models.Rdbms.OrderDto)">
            <summary>
            Builds an order entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IOrder"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.OrderFactory.BuildDto(NKart.Core.Models.IOrder)">
            <summary>
            Builds an order dto
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.OrderDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.CustomerAddressFactory">
            <summary>
            The customer address factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.CustomerAddressFactory.BuildEntity(NKart.Core.Models.Rdbms.CustomerAddressDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.CustomerAddressFactory.BuildDto(NKart.Core.Models.ICustomerAddress)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.CustomerAddressDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.CustomerFactory">
            <summary>
            The customer factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.CustomerFactory.BuildEntity(NKart.Core.Models.Rdbms.CustomerDto)">
            <summary>
            Builds the entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.CustomerFactory.BuildEntity(NKart.Core.Models.Rdbms.CustomerDto,System.Collections.Generic.IEnumerable{NKart.Core.Models.ICustomerAddress},System.Collections.Generic.IEnumerable{NKart.Core.Models.INote})">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <param name="addresses">
            The addresses.
            </param>
            <param name="notes">
            The notes.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.CustomerFactory.BuildDto(NKart.Core.Models.ICustomer)">
            <summary>
            Build the dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.CustomerDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.GatewayProviderSettingsFactory">
            <summary>
            The gateway provider settings factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.GatewayProviderSettingsFactory.BuildEntity(NKart.Core.Models.Rdbms.GatewayProviderSettingsDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.GatewayProviderSettingsFactory.BuildDto(NKart.Core.Models.IGatewayProviderSettings)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.GatewayProviderSettingsDto"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.GatewayProviderSettingsFactory.BuildEntity(System.Type,NKart.Core.GatewayProviderType)">
            <summary>
            Builds an entity based on a resolved type
            </summary>
            <param name="t">The resolved Type t</param>
            <param name="gatewayProviderType">The gateway provider type</param>
            <returns>The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/></returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.CatalogInventoryFactory">
            <summary>
            The catalog inventory factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.CatalogInventoryFactory.BuildEntity(NKart.Core.Models.Rdbms.CatalogInventoryDto)">
            <summary>
            Builds a <see cref="T:NKart.Core.Models.ICatalogInventory"/> from a dto.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICatalogInventory"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.CatalogInventoryFactory.BuildDto(NKart.Core.Models.ICatalogInventory)">
            <summary>
            Builds a dto from the <see cref="T:NKart.Core.Models.ICatalogInventory"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.CatalogInventoryDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.InvoiceFactory">
            <summary>
            The invoice factory.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.InvoiceFactory._lineItemCollection">
            <summary>
            The line item collection.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.InvoiceFactory._orderCollection">
            <summary>
            The order collection.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.InvoiceFactory._notes">
            <summary>
            The note collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.InvoiceFactory.#ctor(NKart.Core.Models.LineItemCollection,NKart.Core.Models.OrderCollection,System.Collections.Generic.IEnumerable{NKart.Core.Models.INote})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Factories.InvoiceFactory"/> class.
            </summary>
            <param name="lineItemCollection">
            The line item collection.
            </param>
            <param name="orderCollection">
            The order collection.
            </param>
            <param name="notes">
            The notes Collection.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.InvoiceFactory.BuildEntity(NKart.Core.Models.Rdbms.InvoiceDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.InvoiceFactory.BuildDto(NKart.Core.Models.IInvoice)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.InvoiceDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.LineItemFactory">
            <summary>
            The line item factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.LineItemFactory.BuildDto(NKart.Core.Models.IItemCacheLineItem)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.ItemCacheItemDto"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.LineItemFactory.BuildDto(NKart.Core.Models.IInvoiceLineItem)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.InvoiceItemDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.ProductAttributeFactory">
            <summary>
                Responsible for building <see cref="T:NKart.Core.Models.IProductAttribute" /> and <see cref="T:NKart.Core.Models.Rdbms.ProductAttributeDto" />.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductAttributeFactory.BuildEntity(NKart.Core.Models.Rdbms.ProductAttributeDto)">
            <summary>
                Builds the <see cref="T:NKart.Core.Models.IProductAttribute" />.
            </summary>
            <param name="dto">
                The dto.
            </param>
            <returns>
                The <see cref="T:NKart.Core.Models.IProductAttribute" />.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductAttributeFactory.BuildDto(NKart.Core.Models.IProductAttribute)">
            <summary>
                Builds the <see cref="T:NKart.Core.Models.Rdbms.ProductAttributeDto" />.
            </summary>
            <param name="entity">
                The entity.
            </param>
            <returns>
                The <see cref="T:NKart.Core.Models.Rdbms.ProductAttributeDto" />.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.ProductFactory">
            <summary>
            The product factory.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.ProductFactory._productVariantFactory">
            <summary>
            The product variant factory.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.ProductFactory._getProductOptionCollection">
            <summary>
            The product option collection.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.ProductFactory._getProductVariantCollection">
            <summary>
            The product variant collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Factories.ProductFactory"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductFactory.#ctor(NKart.Core.Models.ProductAttributeCollection,NKart.Core.Models.CatalogInventoryCollection,System.Func{System.Guid,NKart.Core.Models.ProductOptionCollection},System.Func{System.Guid,NKart.Core.Models.ProductVariantCollection},NKart.Core.Models.DetachedContent.DetachedContentCollection{NKart.Core.Models.DetachedContent.IProductVariantDetachedContent})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Factories.ProductFactory"/> class.
            </summary>
            <param name="getProductAttributes">
            The product attributes.
            </param>
            <param name="getCatalogInventories">
            The catalog inventories.
            </param>
            <param name="getProductOptions">
            The product options.
            </param>
            <param name="getProductVariantCollection">
            The product variant collection.
            </param>
            <param name="getDetachedContentCollection">
            Gets the detached content collection
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductFactory.BuildEntity(NKart.Core.Models.Rdbms.ProductDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductFactory.BuildDto(NKart.Core.Models.IProduct)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.ProductDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.ProductOptionFactory">
            <summary>
            Responsible for building <see cref="T:NKart.Core.Models.IProductOption"/> and <see cref="T:NKart.Core.Models.Rdbms.ProductOptionDto"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductOptionFactory.BuildEntity(NKart.Core.Models.Rdbms.ProductOptionDto)">
            <summary>
            Builds the <see cref="T:NKart.Core.Models.IProductOption"/> entity.
            </summary>
            <param name="dto">
            The DTO.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductOptionFactory.BuildDto(NKart.Core.Models.IProductOption)">
            <summary>
            Builds the <see cref="T:NKart.Core.Models.Rdbms.ProductOptionDto"/>.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.ProductOptionDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.ProductVariantFactory">
            <summary>
            A class responsible for building ProductVariant entities and DTO objects.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.ProductVariantFactory._productAttributeCollection">
            <summary>
            The <see cref="T:NKart.Core.Models.ProductAttributeCollection"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.ProductVariantFactory._catalogInventories">
            <summary>
            The <see cref="T:NKart.Core.Models.CatalogInventoryCollection"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Factories.ProductVariantFactory._detachedContentCollection">
            <summary>
            The <see cref="T:NKart.Core.Models.DetachedContent.DetachedContentCollection`1"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductVariantFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Factories.ProductVariantFactory"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductVariantFactory.#ctor(NKart.Core.Models.ProductAttributeCollection,NKart.Core.Models.CatalogInventoryCollection,NKart.Core.Models.DetachedContent.DetachedContentCollection{NKart.Core.Models.DetachedContent.IProductVariantDetachedContent})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Factories.ProductVariantFactory"/> class.
            </summary>
            <param name="productAttributes">
            The product attributes.
            </param>
            <param name="catalogInventories">
            The catalog inventories.
            </param>
            <param name="detachedContentCollection">
            The <see cref="T:NKart.Core.Models.DetachedContent.DetachedContentCollection`1"/>
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ProductVariantFactory.BuildEntity(NKart.Core.Models.Rdbms.ProductVariantDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.ShipmentFactory">
            <summary>
            The shipment factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ShipmentFactory.BuildEntity(NKart.Core.Models.Rdbms.ShipmentDto)">
            <summary>
            Builds a shipment entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.ShipmentFactory.BuildDto(NKart.Core.Models.IShipment)">
            <summary>
            Builds a shipment dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.ShipmentDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.WarehouseCatalogFactory">
            <summary>
            The warehouse catalog factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.WarehouseCatalogFactory.BuildEntity(NKart.Core.Models.Rdbms.WarehouseCatalogDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.WarehouseCatalogFactory.BuildDto(NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.WarehouseCatalogDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.WarehouseFactory">
            <summary>
            The warehouse factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.WarehouseFactory.BuildEntity(NKart.Core.Models.Rdbms.WarehouseDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouse"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.WarehouseFactory.BuildEntity(NKart.Core.Models.Rdbms.WarehouseDto,System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog})">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <param name="warehouseCatalogs">
            The warehouse Catalogs.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouse"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.WarehouseFactory.BuildDto(NKart.Core.Models.IWarehouse)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.WarehouseDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Factories.AnonymousCustomerFactory">
            <summary>
            The anonymous customer factory.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.AnonymousCustomerFactory.BuildEntity(NKart.Core.Models.Rdbms.AnonymousCustomerDto)">
            <summary>
            The build entity.
            </summary>
            <param name="dto">
            The dto.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.Factories.AnonymousCustomerFactory.BuildDto(NKart.Core.Models.IAnonymousCustomer)">
            <summary>
            The build dto.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Rdbms.AnonymousCustomerDto"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.NoteMapper">
            <summary>
            The audit log mapper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.NoteMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.AuditLogMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.NoteMapper.BuildMap">
            <summary>
            The build map.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.AuditLogMapper">
            <summary>
            The audit log mapper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.AuditLogMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.AuditLogMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.AuditLogMapper.BuildMap">
            <summary>
            The build map.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.DetachedContentTypeMapper">
            <summary>
            The detached content type mapper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.DetachedContentTypeMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.DetachedContentTypeMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.DetachedContentTypeMapper.BuildMap">
            <summary>
            The build map.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.DigitalMediaMapper">
            <summary>
            The digital media mapper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.DigitalMediaMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.DigitalMediaMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.DigitalMediaMapper.BuildMap">
            <summary>
            Maps fields between DigitalMedia and DigitalMediaDto classes.  Used to allow strongly typed queries in repositories
            and services
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.EntityCollectionMapper">
            <summary>
            The entity collection mapper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.EntityCollectionMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.EntityCollectionMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.EntityCollectionMapper.BuildMap">
            <summary>
            The build map.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.OfferRedeemedMapper">
            <summary>
            The offer redeemed mapper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.OfferRedeemedMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.OfferRedeemedMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.OfferRedeemedMapper.BuildMap">
            <summary>
            Maps <see cref="T:NKart.Core.Models.OfferRedeemed"/> to <see cref="T:NKart.Core.Models.Rdbms.OfferRedeemedDto"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.OfferSettingsMapper">
            <summary>
            Responsible for mapping <see cref="T:NKart.Core.Models.OfferSettings"/> to <see cref="T:NKart.Core.Models.Rdbms.OfferSettingsDto"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.OfferSettingsMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.OfferSettingsMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.OfferSettingsMapper.BuildMap">
            <summary>
            Builds the mappings between <see cref="T:NKart.Core.Models.OfferSettings"/> to <see cref="T:NKart.Core.Models.Rdbms.OfferSettingsDto"/>.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.ShipmentStatusMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.InvoiceStatus"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.ShipmentStatusMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.ShipmentStatusMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.ShipmentStatusMapper.BuildMap">
            <summary>
            Builds the cache map
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.WarehouseCatalogMapper">
            <summary>
            The warehouse catalog mapper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.WarehouseCatalogMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.WarehouseCatalogMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.WarehouseCatalogMapper.BuildMap">
            <summary>
            Builds the field mapping cache between warehouse catalog and the warehouse catalog DTO.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.CatalogInventoryMapper">
            <summary>
            The catalog inventory mapper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.CatalogInventoryMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.CatalogInventoryMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.CatalogInventoryMapper.BuildMap">
            <summary>
            Maps <see cref="T:NKart.Core.Models.CatalogInventory"/> properties to <see cref="T:NKart.Core.Models.Rdbms.CatalogInventoryDto"/> fields.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.TaxMethodMapper">
            <summary>
            The tax method mapper.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.TaxMethodMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.TaxMethodMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.TaxMethodMapper.BuildMap">
            <summary>
            The build map.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.CustomerAddressMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.CustomerAddress"/> to DTO mapper used to translate the properties of the public API 
            implementation to that of the database's DTO as SQL: [tableName].[columnName].
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.CustomerAddressMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.CustomerAddressMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.CustomerAddressMapper.BuildMap">
            <summary>
            The build map.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.CustomerMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.AnonymousCustomer"/> to DTO mapper used to translate the properties of the public API
            implementation to that of the database's DTO as SQL: [tableName].[columnName].
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.CustomerMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.CustomerMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.CustomerMapper.BuildMap">
            <summary>
            Maps the entities
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.InvoiceLineItemMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.InvoiceLineItem"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.InvoiceStatusMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.InvoiceStatus"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.ItemCacheLineItemMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.ItemCacheLineItem"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.ItemCacheMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.ItemCache"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.MerchelloBaseMapper">
            <summary>
            The merchello base mapper.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Mappers.MerchelloBaseMapper.PropertyInfoCacheInstance">
            <summary>
            The property info cache.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Mappers.MerchelloBaseMapper.PropertyInfoCache">
            <summary>
            Gets the property info cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.MerchelloBaseMapper.BuildMap">
            <summary>
            Responsible for building the map between the class and the DTO.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.MerchelloMapper">
            <summary>
            Provides a mapping by type between domain objects and their respective mapper classes.
            </summary>
            <remarks>
            This class basically short circuits the methodology Umbraco uses in it's MapperResolver implementation
            and allows us to reduce the number of internal classes that we need to copy into the Merchello core.
            </remarks>
        </member>
        <member name="F:NKart.Core.Persistence.Mappers.MerchelloMapper.MapperCache">
            <summary>
            The cache of mappers.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Mappers.MerchelloMapper.Mapper">
            <summary>
            Lazy access to the Mapper.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.Mappers.MerchelloMapper.Current">
            <summary>
            Gets the singleton accessor
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.MerchelloMapper.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NKart.Core.Persistence.Mappers.MerchelloMapper"/> class from being created.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.MerchelloMapper.CacheMapper(System.Type,System.Type)">
            <summary>
            Adds a key value pair to the dictionary
            </summary>
            <param name="key"></param>
            <param name="mapper"></param>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.OrderLineItemMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.OrderLineItem"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.PaymentMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.Payment"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.ProductMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.Product"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.ProductVariantMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.ProductVariant"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.ShipmentMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.Shipment"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.ShipMethodMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.ShipMethod"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.WarehouseMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.Warehouse"/> to DTO mapper used to translate the properties of the public API 
            implementation to that of the database's DTO as SQL: [tableName].[columnName].
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.WarehouseMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.Mappers.WarehouseMapper"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Mappers.WarehouseMapper.BuildMap">
            <summary>
            Maps a warehouse to the warehouse DTO.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Mappers.AnonymousCustomerMapper">
            <summary>
            Represents a <see cref="T:NKart.Core.Models.AnonymousCustomer"/> to DTO mapper used to translate the properties of the public api 
            implementation to that of the database's DTO as sql: [tableName].[columnName].
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.PetaPocoExtensions">
            <summary>
            PetaPoco extensions.
            </summary>
            <remarks>
            This is to fix broken Umbraco extension
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.PetaPocoExtensions.GetMerchelloDatabaseProvider(Umbraco.Core.Persistence.Database)">
            <summary>
            The get merchello database provider.
            </summary>
            <param name="database">
            The database.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.DatabaseProviders"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.Querying.QueryExtensions">
            <summary>
            SD: This is a horrible hack but unless we break compatibility with anyone who's actually implemented IQuery{T} there's not much we can do.
            The IQuery{T} interface is useless without having a GetWhereClauses method and cannot be used for tests.
            We have to wait till v8 to make this change I suppose.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Querying.QueryExtensions.GetWhereClauses``1(Umbraco.Core.Persistence.Querying.IQuery{``0})">
            <summary>
            Returns all translated where clauses and their sql parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:NKart.Core.Persistence.Querying.SortDirection">
            <summary>
            The query display sort direction.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Querying.SortDirection.Ascending">
            <summary>
            Designates an ascending sort direction
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.Querying.SortDirection.Descending">
            <summary>
            Designates a descending sort direction
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Querying.Query`1">
            <summary>
            Represents the Query Builder for building LINQ translatable queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NKart.Core.Persistence.Querying.Query`1.Builder">
            <summary>
            Helper method to be used instead of manually creating an instance
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.Querying.Query`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:NKart.Core.Persistence.Querying.Query`1.WhereAny(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}})">
            <inheritdoc />
        </member>
        <member name="M:NKart.Core.Persistence.Querying.Query`1.GetWhereClauses">
            <summary>
            Returns all translated where clauses and their sql parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:NKart.Core.Persistence.Querying.BaseExpressionHelper">
            <summary>
            Logic that is shared with the expression helpers
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.Querying.SqlTranslator`1">
            <summary>
            Represents the Sql Translator for translating a IQuery object to Sql
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork">
            <summary>
            Defines a unit of work when working with a database object
            </summary>
            <remarks>
            This is required due to Umbraco's IUnitOfWork dependency on Umbraco.Core.Models.EntityBase.IEntity
            </remarks>
        </member>
        <member name="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider">
            <summary>
            Defines a Unit of Work Provider for working with an IDatabaseUnitOfWork
            </summary>
            <remarks>
            This is required due to Umbraco's IDatabaseUnitOfWork dependency on IUnitOfWork which references Umbraco
            specific entities.  Umbraco.Core.Models.EntityBase.IEntity
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider.GetUnitOfWork">
            <summary>
            Gets the database unit of work.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Persistence.UnitOfWork.IUnitOfWork">
            <summary>
            Defines a Unit Of Work
            </summary>
            <remarks>
            This is required due to Umbraco's IUnitOfWork dependency on Umbraco.Core.Models.EntityBase.IEntity
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.IUnitOfWork.RegisterAdded(NKart.Core.Models.EntityBase.IEntity,NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Queues an insert
            </summary>
            <param name="entity">
            The entity.
            </param>
            <param name="repository">
            The repository.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.IUnitOfWork.RegisterChanged(NKart.Core.Models.EntityBase.IEntity,NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Queues an update.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <param name="repository">
            The repository.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.IUnitOfWork.RegisterRemoved(NKart.Core.Models.EntityBase.IEntity,NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Queues a delete.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <param name="repository">
            The repository.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.IUnitOfWork.Commit">
            <summary>
            Commits a transaction.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.IUnitOfWork.CommitBulk``1">
            <summary>
            The commit a bulk transaction.
            </summary>
            <typeparam name="TEntity">
            The type of the entities
            </typeparam>
        </member>
        <member name="P:NKart.Core.Persistence.UnitOfWork.IUnitOfWork.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository">
            <summary>
            Defines the Unit Of Work-part of a repository
            </summary>
            <remarks>
            This is required due to Umbraco's IUnitOfWorkRepository dependency on Umbraco.Core.Models.EntityBase.IEntity
            </remarks>
        </member>
        <member name="T:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork">
            <summary>
            Represents the Unit of Work implementation for PetaPoco
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.InstanceId">
            <summary>
            Used for testing
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.#ctor(Umbraco.Core.Persistence.UmbracoDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork"/> class. 
            Creates a new unit of work instance
            </summary>
            <param name="database">
            The Umbraco database
            </param>
            <remarks>
            This should normally not be used directly and should be created with the UnitOfWorkProvider
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.RegisterAdded(NKart.Core.Models.EntityBase.IEntity,NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:NKart.Core.Models.EntityBase.IEntity" /> instance to be added through this <see cref="N:Umbraco.Core.Persistence.UnitOfWork" />
            </summary>
            <param name="entity">The <see cref="T:NKart.Core.Models.EntityBase.IEntity" /></param>
            <param name="repository">The <see cref="T:NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository" /> participating in the transaction</param>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.RegisterChanged(NKart.Core.Models.EntityBase.IEntity,NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:NKart.Core.Models.EntityBase.IEntity" /> instance to be changed through this <see cref="N:NKart.Core.Persistence.UnitOfWork" />
            </summary>
            <param name="entity">The <see cref="T:NKart.Core.Models.EntityBase.IEntity" /></param>
            <param name="repository">The <see cref="T:NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository" /> participating in the transaction</param>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.RegisterRemoved(NKart.Core.Models.EntityBase.IEntity,NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository)">
            <summary>
            Registers an <see cref="T:NKart.Core.Models.EntityBase.IEntity" /> instance to be removed through this <see cref="N:NKart.Core.Persistence.UnitOfWork" />
            </summary>
            <param name="entity">The <see cref="T:NKart.Core.Models.EntityBase.IEntity" /></param>
            <param name="repository">The <see cref="T:NKart.Core.Persistence.UnitOfWork.IUnitOfWorkRepository" /> participating in the transaction</param>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.CommitBulk``1">
            <summary>
            The Bulk Commit.
            </summary>
            <typeparam name="TEntity">
            The type of the entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Commit">
            <summary>
            Commits all batched changes within the scope of a PetaPoco transaction <see cref="T:Umbraco.Core.Persistence.Transaction"/>
            </summary>
            <remarks>
            Unlike a typical unit of work, this UOW will let you commit more than once since a new transaction is creaed per
            Commit() call instead of having one Transaction per UOW. 
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.CommitBulk``1(System.Action{Umbraco.Core.Persistence.UmbracoDatabase})">
            <summary>
            The commit bulk.
            </summary>
            <param name="transactionCompleting">
            The transaction completing.
            </param>
            <typeparam name="TEntity">
            The type of the entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Commit(System.Action{Umbraco.Core.Persistence.UmbracoDatabase})">
            <summary>
            Commits all batched changes within the scope of a PetaPoco transaction <see cref="T:Umbraco.Core.Persistence.Transaction"/>
            </summary>
            <param name="transactionCompleting">
            Allows you to set a callback which is executed before the transaction is committed, allow you to add additional SQL
            operations to the overall commit process after the queue has been processed.
            </param>
        </member>
        <member name="T:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation">
            <summary>
            Provides a snapshot of an entity and the repository reference it belongs to.
            </summary>
        </member>
        <member name="P:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="P:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>The repository.</value>
        </member>
        <member name="P:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.Operation.Type">
            <summary>
            Gets or sets the type of operation.
            </summary>
            <value>The type of operation.</value>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork.DisposeResources">
            <summary>
            Ensures disposable objects are disposed
            </summary>		
            <remarks>
            Ensures that the Transaction instance is disposed of
            </remarks>
        </member>
        <member name="T:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider">
            <summary>
            Represents a Unit of Work Provider for creating a <see cref="T:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWork"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Parameterless constructor uses defaults
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.#ctor(Umbraco.Core.Logging.ILogger,System.String,System.String)">
            <summary>
            Constructor accepting custom connectino string and provider name
            </summary>
            <param name="logger"></param>
            <param name="connectionString">Connection String to use with Database</param>
            <param name="providerName">Database Provider for the Connection String</param>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.#ctor(Umbraco.Core.Persistence.IDatabaseFactory)">
            <summary>
            Constructor accepting an IDatabaseFactory instance
            </summary>
            <param name="dbFactory"></param>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.GetUnitOfWork">
            <summary>
            Creates a Unit of work with a new UmbracoDatabase instance for the work item/transaction.
            </summary>
            <returns></returns>
            <remarks>
            Each PetaPoco UOW uses it's own Database object, not the shared Database object that comes from
            the ApplicationContext.Current.DatabaseContext.Database. This is because each transaction should use it's own Database
            and we Dispose of this Database object when the UOW is disposed.
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.UnitOfWork.PetaPocoUnitOfWorkProvider.CreateUnitOfWork(Umbraco.Core.Logging.ILogger)">
            <summary>
            Static helper method to return a new unit of work
            </summary>
            <returns></returns>
        </member>
        <member name="T:NKart.Core.Persistence.DatabaseModelDefinitions.DbIndexDefinition">
            <summary>
            Represents a database index definition retreived by querying the database
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.DefaultDatabaseFactory">
            <summary>
            The default implementation for the IDatabaseFactory
            </summary>
            <remarks>
            If we are running in an http context
            it will create one per context, otherwise it will be a global singleton object which is NOT thread safe
            since we need (at least) a new instance of the database object per thread.
            </remarks>
        </member>
        <member name="M:NKart.Core.Persistence.DefaultDatabaseFactory.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Default constructor initialized with the MerchelloConfiguration.Current.Section.DefaultConnectionStringName
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.DefaultDatabaseFactory.#ctor(System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Constructor accepting custom connection string
            </summary>
            <param name="connectionStringName">Name of the connection string in web.config</param>
            <param name="logger"></param>
        </member>
        <member name="M:NKart.Core.Persistence.DefaultDatabaseFactory.#ctor(System.String,System.String,Umbraco.Core.Logging.ILogger)">
            <summary>
            Constructor accepting custom connectino string and provider name
            </summary>
            <param name="connectionString">Connection String to use with Database</param>
            <param name="providerName">Database Provider for the Connection String</param>
            <param name="logger"></param>
        </member>
        <member name="T:NKart.Core.Persistence.TransactionType">
            <summary>
            Enum for the 3 types of transactions
            </summary>
        </member>
        <member name="T:NKart.Core.Persistence.RepositoryFactory">
            <summary>
            Used to instantiate each repository type
            </summary>    
        </member>
        <member name="F:NKart.Core.Persistence.RepositoryFactory._logger">
            <summary>
            The <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.RepositoryFactory._cacheHelper">
            <summary>
            The <see cref="T:Umbraco.Core.CacheHelper"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Persistence.RepositoryFactory._sqlSyntax">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.RepositoryFactory"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.RepositoryFactory"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.#ctor(System.Boolean,Umbraco.Core.Cache.IRuntimeCacheProvider,Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.RepositoryFactory"/> class.
            </summary>
            <param name="disableAllCache">
            The disable all cache.
            </param>
            <param name="nullCacheProvider">
            The null cache provider.
            </param>
            <param name="runtimeCacheProvider">
            The runtime cache provider.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.#ctor(Umbraco.Core.CacheHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.RepositoryFactory"/> class.
            </summary>
            <param name="cacheHelper">
            The <see cref="T:Umbraco.Core.CacheHelper"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.#ctor(System.Boolean,Umbraco.Core.Cache.IRuntimeCacheProvider,Umbraco.Core.Cache.IRuntimeCacheProvider,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.RepositoryFactory"/> class.
            </summary>
            <param name="disableAllCache">
            The disable all cache.
            </param>
            <param name="nullCacheProvider">
            The null cache provider.
            </param>
            <param name="runtimeCacheProvider">
            The runtime cache provider.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntaxProvider">
            The SQL syntax provider.
            </param>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.#ctor(Umbraco.Core.CacheHelper,Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Persistence.RepositoryFactory"/> class.
            </summary>
            <param name="cache">
            The cache.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntaxProvider">
            The sql syntax provider.
            </param>
        </member>
        <member name="P:NKart.Core.Persistence.RepositoryFactory.SqlSyntax">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateAppliedPaymentRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IAppliedPaymentRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IAppliedPaymentRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateAuditLogRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Creates an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IAuditLogRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IAuditLogRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateNoteRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Creates an instance of the <see cref="T:NKart.Core.Persistence.Repositories.INoteRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.INoteRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateCustomerRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.ICustomerRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.ICustomerRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateAnonymousCustomerRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IAnonymousCustomerRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IAnonymousCustomerRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateCustomerAddressRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.ICustomerAddressRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.ICustomerAddressRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateDigitalMediaRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            The create digital media repository.
            </summary>
            <param name="uow">
            The <see cref="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork"/>.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IDigitalMediaRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateDetachedContentTypeRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Creates a new instance of the <see cref="T:NKart.Core.Persistence.Repositories.DetachedContentTypeRepository"/>.
            </summary>
            <param name="uow">
            The <see cref="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork"/>.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IDetachedContentTypeRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateEntityCollectionRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            The create entity collection repository.
            </summary>
            <param name="uow">
            The database unit of work.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IEntityCollectionRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateItemCacheRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IItemCacheRepository"/>
            </summary>
            <param name="uow">The <see cref="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork"/></param>
            <returns>The <see cref="T:NKart.Core.Persistence.Repositories.IItemCacheRepository"/></returns>        
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateCacheLineItemRespository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Gets an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IItemCacheLineItemRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IItemCacheLineItemRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateInvoiceRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IInvoiceRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IInvoiceRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateInvoiceLineItemRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Gets an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IInvoiceLineItemRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IInvoiceLineItemRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateInvoiceStatusRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IInvoiceStatusRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IInvoiceStatusRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateGatewayProviderRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            The create gateway provider repository.
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IGatewayProviderRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateNotificationMessageRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns and instance of the <see cref="T:NKart.Core.Persistence.Repositories.INotificationMessageRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.INotificationMessageRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateNotificationMethodRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.INotificationMethodRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.INotificationMethodRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateOfferRedeemedRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            The create redeemed repository.
            </summary>
            <param name="uow">
            The database unit of work.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IOfferRedeemedRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateOfferSettingsRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            The create offer settings repository.
            </summary>
            <param name="uow">
            The database unit of work.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IOfferSettingsRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateOrderRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IOrderRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IOrderRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateOrderLineItemRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Gets an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IOrderLineItemRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IOrderLineItemRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateOrderStatusRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IOrderStatusRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IOrderStatusRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreatePaymentRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IPaymentRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IPaymentRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreatePaymentMethodRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IPaymentMethodRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IPaymentMethodRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateProductRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IProductRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IProductRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateProductOptionRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IProductOptionRepository"/>.
            </summary>
            <param name="uow">
            The database unit of work.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IProductOptionRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateProductVariantRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IProductVariantRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IProductVariantRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateShipCountryRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IShipCountryRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <param name="storeSettingService">
            The store Setting Service.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IShipCountryRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateShipMethodRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IShipMethodRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IShipMethodRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateShipRateTierRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IShipRateTierRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IShipRateTierRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateShipmentRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IShipmentRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IShipmentRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateShipmentStatusRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IShipmentStatusRepository"/>
            </summary>
            <param name="uow">
            The unit of work.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IShipmentStatusRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateStoreSettingRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IStoreSettingRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IStoreSettingRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateTaxMethodRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.ITaxMethodRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.ITaxMethodRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateWarehouseRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Returns an instance of the <see cref="T:NKart.Core.Persistence.Repositories.IWarehouseRepository"/>
            </summary>
            <param name="uow">
            The database unit of work
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IWarehouseRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Persistence.RepositoryFactory.CreateWarehouseCatalogRepository(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWork)">
            <summary>
            Creates an instance of the warehouse catalog repository.
            </summary>
            <param name="uow">
            The database unit of work.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Persistence.Repositories.IWarehouseCatalogRepository"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.Interfaces.IProductQueryService.GetKeysThatExistInAllCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets the entity keys for distinct entities in multiple collections
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.Interfaces.IProductQueryService.GetKeysThatExistInAllCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a paged list of distinct keys for entities in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            A filter term
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.Interfaces.IProductQueryService.GetKeysNotInAnyCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.Interfaces.IProductQueryService.GetKeysNotInAnyCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The filter term
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.Interfaces.IProductQueryService.GetKeysThatExistInAnyCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.Interfaces.IProductQueryService.GetKeysThatExistInAnyCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            The search term.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.Interfaces.IProductServicePortForward">
            <summary>
            Marker interface product service queries that need to be ported forward to V3 version.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.Interfaces.IProductServicePortForward.GetAllManufacturers">
            <summary>
            Gets a list of currently listed Manufacturers.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/> (manufacturer names).
            </returns>
        </member>
        <member name="M:NKart.Core.Services.Interfaces.IProductServicePortForward.GetRecentlyUpdatedProducts(System.Int64,System.Int64)">
            <summary>
            Gets recently updated products.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <returns>
            The <see cref="T:NKart.Core.PagedCollection"/>.
            </returns>
            <remarks>
            Return value breaks the pattern in this repository for easier port forward to Merchello Version 3.0
            where all repositories return <see cref="T:NKart.Core.PagedCollection"/> rather than the ORM <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </remarks>
        </member>
        <member name="T:NKart.Core.Services.ProductService">
            <summary>
            Product service queries for used in the product query.
            </summary>
            <summary>
            Represents the Product Service
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetAllManufacturers">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetRecentlyUpdatedProducts(System.Int64,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysThatExistInAllCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets the entity keys for distinct entities in multiple collections
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysThatExistInAllCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a paged list of distinct keys for entities in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            A filter term
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysNotInAnyCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysNotInAnyCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="term">
            The filter term
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysThatExistInAnyCollections(System.Guid[],System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysThatExistInAnyCollections(System.Guid[],System.String,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a collection of keys that exist in any one of the collections passed.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="term">
            The search term.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="orderExpression">
            The order expression.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetByAdvancedSearch(System.Guid,System.String[],System.String,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="F:NKart.Core.Services.ProductService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ProductService.ValidSortFields">
            <summary>
            The valid sort fields.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ProductService._productVariantService">
            <summary>
            The product variant service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ProductService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ProductService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IProductVariantService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="productVariantService">
            The product variant service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IProductVariantService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="productVariantService">
            The product variant service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IProductVariantService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="productVariantService">
            The product variant service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.ProductService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductService.Deleting">
            <summary>
            Occurs before Delete
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ProductService.CreateProduct(System.String,System.String,System.Decimal,System.Boolean)">
            <summary>
            Creates a Product without saving it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.CreateProductWithKey(System.String,System.String,System.Decimal,System.Boolean)">
            <summary>
            Creates and saves a <see cref="T:NKart.Core.Models.IProduct"/> to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.Save(NKart.Core.Models.IProduct,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IProduct"/> object
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProductVariant"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProduct},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IProduct"/> objects.
            </summary>
            <param name="productList">Collection of <see cref="T:NKart.Core.Models.ProductVariant"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.Delete(NKart.Core.Models.IProduct,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IProduct"/> object
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProduct},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.IProduct"/> objects
            </summary>
            <param name="productList">Collection of <see cref="T:NKart.Core.Models.IProduct"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetBySku(System.String)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IProduct"/> by it's unique SKU.
            </summary>
            <param name="sku">
            The product SKU.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetByKey(System.Guid)">
            <summary>
            Gets a Product by its unique id - primary key
            </summary>
            <param name="key">GUID key for the Product</param>
            <returns><see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IProduct"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a list of Product give a list of unique keys
            </summary>
            <param name="keys">
            List of unique keys
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductVariantByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IProductVariant"/> by it's key.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductVariantBySku(System.String)">
            <summary>
            Get's a <see cref="T:NKart.Core.Models.IProductVariant"/> by it's unique SKU.
            </summary>
            <param name="sku">
            The SKU.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductVariantsByProductKey(System.Guid)">
            <summary>
            The get product variants by product key.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.ProductsCount">
            <summary>
            Returns the count of all products
            </summary>
            <returns>
            The total product count.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.SkuExists(System.String)">
            <summary>
            True/false indicating whether or not a SKU is already exists in the database
            </summary>
            <param name="sku">
            The SKU to be tested
            </param>
            <returns>
            A value indicating whether or not  a SKU exists
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.RemoveDetachedContent(NKart.Core.Models.IProduct,System.Guid,System.Boolean)">
            <summary>
            Removes detached content from the product.
            </summary>
            <param name="product">
            The product variants.
            </param>
            <param name="detachedContentTypeKey">
            The detached content type key
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.RemoveDetachedContent(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProduct},System.Guid,System.Boolean)">
            <summary>
            Removes detached content from the collection of products
            </summary>
            <param name="products">
            The product variants.
            </param>
            <param name="detachedContentTypeKey">
            The detached content type key
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetByDetachedContentType(System.Guid)">
            <summary>
            Gets a collect of products by detached content type.
            </summary>
            <param name="detachedContentTypeKey">
            The detached content type key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.AddToCollection(NKart.Core.Models.IProduct,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The add product to collection.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.AddToCollection(NKart.Core.Models.IProduct,System.Guid)">
            <summary>
            The add product to collection.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.AddToCollection(System.Guid,System.Guid)">
            <summary>
            The add product to collection.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.AddToCollections(System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            Bulks adds products to collections
            </summary>
            <param name="entityAndCollectionKeys"></param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.ExistsInCollection(System.Guid,System.Guid)">
            <summary>
            The exists in collection.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.ExistsInCollection(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns true if the entity exists in the at least one of the static collections.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.RemoveFromCollection(NKart.Core.Models.IProduct,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The remove product from collection.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.RemoveFromCollections(System.Collections.Generic.Dictionary{System.Guid,System.Guid})">
            <summary>
            Batche removes from a collection
            </summary>
            <param name="entityKeycollectionKey"></param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.RemoveFromCollection(NKart.Core.Models.IProduct,System.Guid)">
            <summary>
            The remove product from collection.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.RemoveFromCollection(System.Guid,System.Guid)">
            <summary>
            The remove product from collection.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.NKart#Core#Services#IStaticCollectionService{NKart#Core#Models#IProduct}#GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets products from a collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets products from a collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.NKart#Core#Services#IStaticCollectionService{NKart#Core#Models#IProduct}#GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets disctint products from multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets disctint products from multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.NKart#Core#Services#IStaticCollectionService{NKart#Core#Models#IProduct}#GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets products from a collection filtered by a search term.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets products from a collection filtered by a search term.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.NKart#Core#Services#IStaticCollectionService{NKart#Core#Models#IProduct}#GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets distinct products from multiple collections filtered by a search term.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets distinct products from multiple collections filtered by a search term.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetAll">
            <summary>
            Gets all the products
            </summary>
            <returns>
            A collection of all <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get product keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get product keys from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys from collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysNotInCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysNotInAnyCollections(System.Collections.Generic.IEnumerable{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysNotInCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeysNotInAnyCollections(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysWithOption(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionKey">
            The option key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysWithOption(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionName">
            The option name.
            </param>
            <param name="choiceNames">
            The choice names.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysWithOption(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionName">
            The option name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysWithOption(System.String,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionName">
            The option name.
            </param>
            <param name="choiceName">
            The choice name.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysWithOption(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys with option.
            </summary>
            <param name="optionNames">
            The option names.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysInPriceRange(System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys in price range.
            </summary>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysInPriceRange(System.Decimal,System.Decimal,System.Decimal,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys in price range.
            </summary>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="taxModifier">
            The tax modifier.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsByBarcode(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products by barcode.
            </summary>
            <param name="barcode">
            The barcode.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsByBarcode(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products by barcodes.
            </summary>
            <param name="barcodes">
            The barcodes.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysByManufacturer(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by manufacturer.
            </summary>
            <param name="manufacturer">
            The manufacturer.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysByManufacturer(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys by manufacturer.
            </summary>
            <param name="manufacturer">
            The manufacturer.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysInStock(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean,System.Boolean)">
            <summary>
            The get products keys in stock.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="includeAllowOutOfStockPurchase">
            The include allow out of stock purchase.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetProductsKeysOnSale(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get products keys on sale.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.Count(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IProduct})">
            <summary>
            The count.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.Count(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IProductVariant})">
            <summary>
            The count.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetPagedKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of product keys
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetPagedKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a page of product keys
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetPagedKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            The get paged keys.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.GetKeyForSlug(System.String)">
            <summary>
            Gets the product key associated with a slug.
            </summary>
            <param name="slug">
            The slug.
            </param>
            <returns>
            The product key.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.ValidateSortByField(System.String)">
            <summary>
            The validate sort by field.
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductService.EnsureVariants(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProduct})">
            <summary>
            Ensures that variants are created for each option and option choice combination
            </summary>
            <param name="products">
            The collection of products.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.EnsureVariants(NKart.Core.Models.IProduct)">
            <summary>
            Ensures that variants are created for each option and option choice combination
            </summary>
            <param name="product">
            The product.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.EnsureProductVariantsHaveAttributes(NKart.Core.Models.IProduct)">
            <summary>
            Ensures that all <see cref="T:NKart.Core.Models.IProductVariant"/> except the "master" variant for the <see cref="T:NKart.Core.Models.IProduct"/> have attributes
            </summary>
            <param name="product"><see cref="T:NKart.Core.Models.IProduct"/> to verify</param>
        </member>
        <member name="M:NKart.Core.Services.ProductService.RemoveDetachedContentFromProduct(NKart.Core.Models.IProduct,System.Guid)">
            <summary>
            The remove detached content from product.
            </summary>
            <param name="product">
            The product.
            </param>
            <param name="detachedContentTypeKey">
            The detached content type key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.AnonymousCustomerService">
            <summary>
            Represents an anonymous customer service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.AnonymousCustomerService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AnonymousCustomerService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AnonymousCustomerService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AnonymousCustomerService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.#ctor(Umbraco.Core.Logging.ILogger,NKart.Core.Persistence.RepositoryFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AnonymousCustomerService"/> class.
            </summary>
            <param name="logger">
            The logger
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AnonymousCustomerService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AnonymousCustomerService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.AnonymousCustomerService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AnonymousCustomerService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AnonymousCustomerService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AnonymousCustomerService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AnonymousCustomerService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.AnonymousCustomerService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.CreateAnonymousCustomerWithKey">
            <summary>
            The create anonymous customer with key.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.Save(NKart.Core.Models.IAnonymousCustomer,System.Boolean)">
            <summary>
            Saves the <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>
            </summary>
            <param name="anonymous">
            The anonymous customer
            </param>
            <param name="raiseEvents">
            TOptional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.Delete(NKart.Core.Models.IAnonymousCustomer)">
            <summary>
            Deletes the <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>
            </summary>
            <param name="anonymous">
            The anonymous customer
            </param>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAnonymousCustomer})">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>
            </summary>
            <param name="anonymouses">
            The anonymous customers to be deleted
            </param>
        </member>
        <member name="M:NKart.Core.Services.AnonymousCustomerService.GetAnonymousCustomersCreatedBefore(System.DateTime)">
            <summary>
            The get anonymous customers created before a certain date.
            </summary>
            <param name="createdDate">
            The created Date.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> older than a certain number of days.
            </returns>
            <remarks>
            For maintenance routines
            </remarks>
        </member>
        <member name="T:NKart.Core.Services.AppliedPaymentService">
            <summary>
            Represents the AppliedPaymentService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.AppliedPaymentService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AppliedPaymentService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AppliedPaymentService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AppliedPaymentService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The sql syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.#ctor(Umbraco.Core.Logging.ILogger,NKart.Core.Persistence.RepositoryFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AppliedPaymentService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AppliedPaymentService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AppliedPaymentService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.AppliedPaymentService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AppliedPaymentService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AppliedPaymentService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AppliedPaymentService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AppliedPaymentService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.AppliedPaymentService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.CreateAppliedPaymentWithKey(System.Guid,System.Guid,NKart.Core.AppliedPaymentType,System.String,System.Decimal,System.Boolean)">
            <summary>
            Creates and saves an AppliedPayment
            </summary>
            <param name="paymentKey">The payment key</param>
            <param name="invoiceKey">The invoice 'key'</param>
            <param name="appliedPaymentType">The applied payment type</param>
            <param name="description">The description of the payment application</param>
            <param name="amount">The amount of the payment to be applied</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>An <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.Save(NKart.Core.Models.IAppliedPayment,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAppliedPayment},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayments">The collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.Delete(NKart.Core.Models.IAppliedPayment,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAppliedPayment},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayments">The collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.GetByKey(System.Guid)">
            <summary>
            Returns a <see cref="T:NKart.Core.Models.IAppliedPayment"/> by it's unique 'key'
            </summary>
            <param name="key">The unique 'key' of the <see cref="T:NKart.Core.Models.IAppliedPayment"/></param>
            <returns>An <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.GetAppliedPaymentsByPaymentKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the payment key
            </summary>
            <param name="paymentKey">The payment key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.GetAppliedPaymentsByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the invoice key
            </summary>
            <param name="invoiceKey">The invoice key</param>
            <returns>A collection <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.AppliedPaymentService.CreateAppliedPaymentWithKey(System.Guid,System.Guid,System.Guid,System.String,System.Decimal,System.Boolean)">
            <summary>
            The create applied payment with key.
            </summary>
            <param name="paymentKey">
            The payment key.
            </param>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <param name="appliedPaymentTfKey">
            The applied payment tf key.
            </param>
            <param name="description">
            The description.
            </param>
            <param name="amount">
            The amount.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IAppliedPayment"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IProductOptionService">
            <summary>
            Defines the product option service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.CreateProductOption(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IProductOption"/> without saving it to the database.
            </summary>
            <param name="name">
            The option name.
            </param>
            <param name="shared">
            A value indicating whether or not this is a shared option (usable by multiple products).
            </param>
            <param name="required">
            The required.
            </param>
            <param name="raiseEvents">
             Optional boolean indicating whether or not to raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.CreateProductOptionWithKey(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IProductOption"/> and saves it to the database.
            </summary>
            <param name="name">
            The option name.
            </param>
            <param name="shared">
            A value indicating whether or not this is a shared option (usable by multiple products).
            </param>
            <param name="required">
            The required.
            </param>
            <param name="raiseEvents">
             Optional boolean indicating whether or not to raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.GetProductAttributeByKey(System.Guid)">
            <summary>
            Gets a product attribute by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.GetProductAttributes(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets <see cref="T:NKart.Core.Models.IProductAttribute"/> by a an array of keys.
            </summary>
            <param name="keys">
            The collection attribute keys.
            </param>
            <returns>
            The collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.Save(NKart.Core.Models.IProductOption,System.Boolean)">
            <summary>
            Saves a single product option.
            </summary>
            <param name="option">
            The option to be saved
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductOption},System.Boolean)">
            <summary>
            Saves a collection of product options
            </summary>
            <param name="options">
            The collection of product options to be saved
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.Delete(NKart.Core.Models.IProductOption,System.Boolean)">
            <summary>
            Deletes a product option
            </summary>
            <param name="option">
            The option to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
            <remarks>
            This performs a check to ensure the option is valid to be deleted
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IProductOption"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductOption"/> by a list of keys.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.GetProductOptionUseCount(NKart.Core.Models.IProductOption)">
            <summary>
            Gets the usage information about the product option, including the attribute usage.
            </summary>
            <param name="option">
            The option.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Counting.IProductOptionUseCount"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.GetProductOptionShareCount(NKart.Core.Models.IProductOption)">
            <summary>
            The get product option share count.
            </summary>
            <param name="option">
            The option.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="sharedOnly">
            The shared Only.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductOptionService.GetPage(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <param name="term">
            A search term to filter by
            </param>
            <param name="page">
            The page requested.
            </param>
            <param name="itemsPerPage">
            The number of items per page.
            </param>
            <param name="sortBy">
            The sort by field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="sharedOnly">
            Indicates whether or not to only include shared option.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IUaaSItemProviderService">
            <summary>
            Defines a Merchello service used by Umbraco as a Service Item Providers.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IUaaSItemProviderService.Exists(System.Guid)">
            <summary>
            The exists.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.NoteService">
            <summary>
            Represents the NoteService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.NoteService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.NoteService.ValidSortFields">
            <summary>
            The valid sort fields.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.NoteService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NoteService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.NoteService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NoteService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NoteService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NoteService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NoteService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NoteService"/> class.
            </summary>
            <param name="provider">
            The <see cref="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider"/>
            </param>
            <param name="repositoryFactory">
            The <see cref="T:NKart.Core.Persistence.RepositoryFactory"/>
            </param>
            <param name="logger">
            The Umbraco logger
            </param>
        </member>
        <member name="M:NKart.Core.Services.NoteService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NoteService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.NoteService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NoteService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NoteService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NoteService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NoteService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.NoteService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.NoteService.GetByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.INote"/> by it's key
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>  
        </member>
        <member name="M:NKart.Core.Services.NoteService.CreateNote(System.Guid,NKart.Core.EntityType,System.String,System.Boolean)">
            <summary>
            Creates a note without saving it to the database.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityType">
            The entity type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.NoteService.CreateNote(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a note without saving it to the database.
            </summary>
            <param name="entityKey">
            The entity Key.
            </param>
            <param name="entityTfKey">
            The entity Type field Key.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.NoteService.CreateNoteWithKey(System.Guid,NKart.Core.EntityType,System.String,System.Boolean)">
            <summary>
            Creates a note and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityType">
            The entity type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.NoteService.CreateNoteWithKey(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a note and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.NoteService.Save(NKart.Core.Models.INote,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="note">
            The <see cref="T:NKart.Core.Models.INote"/> to save
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.NoteService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.INote},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="notes">
            The collection of <see cref="T:NKart.Core.Models.INote"/>s to be saved
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.NoteService.Delete(NKart.Core.Models.INote,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="note">
            The <see cref="T:NKart.Core.Models.INote"/> to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.NoteService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.INote},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="notes">
            The collection of <see cref="T:NKart.Core.Models.INote"/>s to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.NoteService.GetNotesByEntityKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INote"/> for a particular entity
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>        
        </member>
        <member name="M:NKart.Core.Services.NoteService.GetNotesByEntityTfKey(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INote"/> for an entity type
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.NoteService.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.Page`1"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.NoteService.Count(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.INote})">
            <summary>
            Gets the count of items that would be returned by the query
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.NoteService.GetPagedKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.NoteService.ValidateSortByField(System.String)">
            <summary>
            Validates the sort by field
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.AuditLogService">
            <summary>
            Represents the AuditLogService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.AuditLogService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.AuditLogService.ValidSortFields">
            <summary>
            The valid sort fields.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AuditLogService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AuditLogService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AuditLogService"/> class.
            </summary>
            <param name="provider">
            The <see cref="T:NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider"/>
            </param>
            <param name="repositoryFactory">
            The <see cref="T:NKart.Core.Persistence.RepositoryFactory"/>
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.AuditLogService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.AuditLogService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AuditLogService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AuditLogService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AuditLogService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.AuditLogService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.AuditLogService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.GetByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> by it's key
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>  
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.CreateAuditLogWithKey(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="isError">
            Designates whether or not this is an error log record
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.CreateAuditLogWithKey(System.String,NKart.Core.Models.ExtendedDataCollection,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="isError">
            Designates whether or not this is an error log record
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.CreateAuditLogWithKey(System.Nullable{System.Guid},NKart.Core.EntityType,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityType">
            The entity type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="isError">
            The is error.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.CreateAuditLogWithKey(System.Nullable{System.Guid},NKart.Core.EntityType,System.String,NKart.Core.Models.ExtendedDataCollection,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityType">
            The entity type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="extendedData">
            The extended Data.
            </param>
            <param name="isError">
            The is error.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.CreateAuditLogWithKey(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,NKart.Core.Models.ExtendedDataCollection,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="isError">
            Designates whether or not this is an error log record
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.Save(NKart.Core.Models.Interfaces.IAuditLog,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="auditLog">
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> to save
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IAuditLog},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="auditLogs">
            The collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>s to be saved
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.Delete(NKart.Core.Models.Interfaces.IAuditLog,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="auditLog">
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IAuditLog},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="auditLogs">
            The collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>s to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.DeleteErrorAuditLogs(System.Boolean)">
            <summary>
            Deletes all error logs
            </summary>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.GetAuditLogsByEntityKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> for a particular entity
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>        
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.GetAuditLogsByEntityTfKey(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> for an entity type
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.GetErrorAuditLogs(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> where IsError == true
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.Page`1"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.CreateAuditLogWithKey(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="isError">
            Designates whether or not this is an error log record
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.Count(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.Interfaces.IAuditLog})">
            <summary>
            Gets the count of items that would be returned by the query
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.GetPagedKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get paged keys.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.AuditLogService.ValidateSortByField(System.String)">
            <summary>
            Validates the sort by field
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.CustomerAddressService">
            <summary>
            The customer address service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.CustomerAddressService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerAddressService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerAddressService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerAddressService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerAddressService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerAddressService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerAddressService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.CustomerAddressService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.CustomerAddressService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.CustomerAddressService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.CustomerAddressService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.Save(NKart.Core.Models.ICustomerAddress,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="address">
            The address.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.ICustomerAddress},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="addresses">
            The addresses.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <remarks>
            TODO - come up with a validation strategy on batch saves that protects default address settings
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.Delete(NKart.Core.Models.ICustomerAddress,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="address">
            The address.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ICustomerAddress"/> by it's key
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.GetDefaultCustomerAddress(System.Guid,NKart.Core.AddressType)">
            <summary>
            Gets the default customer address of a certain type
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.GetByCustomerKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> by the customer key
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
            <remarks>
            RSS This method becomes a bit superfluous now that we are exposing the customer address collection on ICustomer 
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.GetByCustomerKey(System.Guid,NKart.Core.AddressType)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> by the customer key filtered by an <see cref="T:NKart.Core.AddressType"/>
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.GetAll">
            <summary>
            The get all.
            </summary>
            <returns>
            The collection of all customer addresses.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.Count(System.Guid)">
            <summary>
            Gets the count of addresses for a customer.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.GetCustomerAddressCount(System.Guid)">
            <summary>
            Gets the count of all <see cref="T:NKart.Core.Models.CustomerAddress"/> for a given customer
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The count
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.GetCustomerAddressCount(System.Guid,NKart.Core.AddressType)">
            <summary>
            Gets the count of all <see cref="T:NKart.Core.Models.CustomerAddress"/> for a given customer by <see cref="T:NKart.Core.AddressType"/>
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address Type.
            </param>
            <returns>
            The count
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.ICustomerAddress},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="addresses">
            The addresses.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <remarks>
            TODO - come up with a validation strategy on batch saves that protects default address settings
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.CustomerAddressService.ClearDefaultCustomerAddress(System.Guid,NKart.Core.AddressType)">
            <summary>
            The clear default customer address.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address type.
            </param>
        </member>
        <member name="T:NKart.Core.Services.DetachedContentTypeService">
            <summary>
            Represents a detached content type service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.DetachedContentTypeService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DetachedContentTypeService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DetachedContentTypeService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DetachedContentTypeService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DetachedContentTypeService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DetachedContentTypeService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.DetachedContentTypeService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.DetachedContentTypeService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.DetachedContentTypeService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.DetachedContentTypeService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.DetachedContentTypeService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.DetachedContentTypeService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.CreateDetachedContentType(NKart.Core.EntityType,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> without saving it to the database.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="contentTypeKey">
            The content type key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.CreateDetachedContentType(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> without saving it to the database.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="contentTypeKey">
            The content type key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.CreateDetachedContentTypeWithKey(NKart.Core.EntityType,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> and saves to the database.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="contentTypeKey">
            The content type key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.CreateDetachedContentTypeWithKey(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> and saves to the database.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="contentTypeKey">
            The content type key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.Save(NKart.Core.Models.DetachedContent.IDetachedContentType,System.Boolean)">
            <summary>
            Saves a single instance of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="detachedContentType">
            The detached content type.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.DetachedContent.IDetachedContentType},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="detachedContentTypes">
            The collection to be saved.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.Delete(NKart.Core.Models.DetachedContent.IDetachedContentType,System.Boolean)">
            <summary>
            Deletes a single instance of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="detachedContentType">
            The detached content type.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.GetDetachedContentTypesByEntityTfKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> by the entity type key.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.GetDetachedContentTypesByContentTypeKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> by the Umbraco content type key.
            </summary>
            <param name="contentTypeKey">
            The Umbraco content type key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.GetAll">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>s.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DetachedContentTypeService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.DetachedContent.IDetachedContentType},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="detachedContentTypes">
            The collection to be deleted.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="T:NKart.Core.Services.DigitalMediaService">
            <summary>
            Represents a <see cref="T:NKart.Core.Services.IDigitalMediaService"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.DigitalMediaService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DigitalMediaService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DigitalMediaService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DigitalMediaService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DigitalMediaService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.DigitalMediaService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.DigitalMediaService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.DigitalMediaService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.DigitalMediaService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.DigitalMediaService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.DigitalMediaService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.DigitalMediaService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.CreateDigitalMediaForProductVariant(System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> and saves it to the database.
            </summary>
            <param name="productVariantKey">
            Tkey for the item to work
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.Save(NKart.Core.Models.Interfaces.IDigitalMedia,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>
            </summary>
            <param name="digitalMedia">
            The digital media.
            </param>
            <param name="raiseEvents">
             Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IDigitalMedia},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </summary>
            <param name="digitalMedias">
            The digital medias.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.Delete(NKart.Core.Models.Interfaces.IDigitalMedia,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> from the database.
            </summary>
            <param name="digitalMedia">
            The digital media.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IDigitalMedia},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> from the database.
            </summary>
            <param name="digitalMedias">
            The digital medias.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> given a collection of keys
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.DigitalMediaService.GetAll">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>
            Used for testing
            </remarks>
        </member>
        <member name="T:NKart.Core.Services.EntityCollectionService">
            <summary>
            Represents an entity collection service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.EntityCollectionService.ValidSortFields">
            <summary>
            The valid sort fields.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.EntityCollectionService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.EntityCollectionService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.EntityCollectionService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.EntityCollectionService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.EntityCollectionService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.EntityCollectionService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.EntityCollectionService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.EntityCollectionService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.EntityCollectionService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.EntityCollectionService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.EntityCollectionService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.EntityCollectionService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.CreateEntityCollection(NKart.Core.EntityType,System.Guid,System.String,System.Boolean)">
            <summary>
            The create entity collection.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.CreateEntityCollectionWithKey(NKart.Core.EntityType,System.Guid,System.String,System.Boolean)">
            <summary>
            The create entity collection with key.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.Save(NKart.Core.Models.Interfaces.IEntityCollection,System.Boolean)">
            <summary>
            Saves a single entity collection.
            </summary>
            <param name="entityCollection">
            The entity collection.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IEntityCollection},System.Boolean)">
            <summary>
            Saves a collection of entity collections.
            </summary>
            <param name="entityCollections">
            The entity collections.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.Delete(NKart.Core.Models.Interfaces.IEntityCollection,System.Boolean)">
            <summary>
            Deletes a single entity collection.
            </summary>
            <param name="entityCollection">
            The entity collection.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetByKey(System.Guid)">
            <summary>
            The get by key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetByEntityTfKey(System.Guid)">
            <summary>
            The get by entity type field key.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetByProviderKey(System.Guid)">
            <summary>
            The get by provider key.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetEntityFilterGroupByKey(System.Guid)">
            <summary>
            Gets <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetAll(System.Guid[])">
            <summary>
            The get all.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetChildren(System.Guid)">
            <summary>
            The get children.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.ExistsInCollection(System.Nullable{System.Guid},System.Guid)">
            <summary>
            The exists in collection.
            </summary>
            <param name="parentKey">
            The parent key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetRootLevelEntityCollections">
            <summary>
            The get root level entity collections.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetRootLevelEntityCollections(NKart.Core.EntityType)">
            <summary>
            The get root level entity collections.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetRootLevelEntityCollections(NKart.Core.EntityType,System.Guid)">
            <summary>
            The get root level entity collections.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="providerKey">
            The provider key.
            </param>
            <returns>
            The <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetRootLevelEntityCollections(System.Guid)">
            <summary>
            The get root level entity collections.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetRootLevelEntityCollections(System.Guid,System.Guid)">
            <summary>
            The get root level entity collections.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="providerKey">
            The provider Key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.ChildEntityCollectionCount(System.Guid)">
            <summary>
            The child entity collection count.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.HasChildEntityCollections(System.Guid)">
            <summary>
            The has child entity collections.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.CollectionCountManagedByProvider(System.Guid)">
            <summary>
            Gets the count of collections managed by a provider
            </summary>
            <param name="providerKey">The provider key</param>
            <returns>
            The count of collections managed by a provider
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.Exists(System.Guid)">
            <summary>
            Determines if a collection exists.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IEntityCollection},System.Boolean)">
            <summary>
            Deletes a collection of entity collections.
            </summary>
            <param name="entityCollections">
            The entity collections.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.CreateEntityCollection(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            The create entity collection.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.CreateEntityCollectionWithKey(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            The create entity collection with key.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetEntityCollectionsByProductKey(System.Guid,System.Boolean)">
            <summary>
            The get entity collections by product key.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <param name="isFilter">
            A value indicating whether the query should be for filter collections or standard "static" collections
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetEntityCollectionsByInvoiceKey(System.Guid)">
            <summary>
            The get entity collections by invoice key.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetEntityCollectionsByCustomerKey(System.Guid)">
            <summary>
            The get entity collections by customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetEntityFilterGroupsByProviderKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by a collection of keys.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetEntityFilterGroupsContainingProduct(System.Collections.Generic.IEnumerable{System.Guid},System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by a collection of keys that are not associated
            with a product
            </summary>
            <param name="keys">
            The keys.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.GetEntityFilterGroupsNotContainingProduct(System.Collections.Generic.IEnumerable{System.Guid},System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/> by a collection of keys that are not associated
            with a product
            </summary>
            <param name="keys">
            The keys.
            </param>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.ValidateSortByField(System.String)">
            <summary>
            The validate sort by field.
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.DeleteAllChildCollections(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The delete all child collections.
            </summary>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Services.EntityCollectionService.UpdateSiblingSortOrders(NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Updates sibling sort orders for deletions.
            </summary>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="T:NKart.Core.Services.IAnonymousCustomerService">
            <summary>
            The AnonymousCustomerService interface.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IAnonymousCustomerService.CreateAnonymousCustomerWithKey">
            <summary>
            Crates an <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> and saves it to the database
            </summary>
            <returns><see cref="T:NKart.Core.Models.IAnonymousCustomer"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IAnonymousCustomerService.Save(NKart.Core.Models.IAnonymousCustomer,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>
            </summary>
            <param name="anonymous">
            The <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> to save
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IAnonymousCustomerService.Delete(NKart.Core.Models.IAnonymousCustomer)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>
            </summary>
            <param name="anonymous">The <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> to delete</param>
        </member>
        <member name="M:NKart.Core.Services.IAnonymousCustomerService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAnonymousCustomer})">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> objects
            </summary>
            <param name="anonymouses">Collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> to delete</param>
        </member>
        <member name="M:NKart.Core.Services.IAnonymousCustomerService.GetAnonymousCustomersCreatedBefore(System.DateTime)">
            <summary>
            The get anonymous customers created before a certain date.
            </summary>
            <param name="createdDate">
            The created Date.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> older than a certain number of days.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IAppliedPaymentService">
            <summary>
            Defines the AppliedPaymentService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IAppliedPaymentService.CreateAppliedPaymentWithKey(System.Guid,System.Guid,NKart.Core.AppliedPaymentType,System.String,System.Decimal,System.Boolean)">
            <summary>
            Creates and saves an AppliedPayment
            </summary>
            <param name="paymentKey">The PaymentGatewayProvider key</param>
            <param name="invoiceKey">The invoice 'key'</param>
            <param name="appliedPaymentType">The applied payment type</param>
            <param name="description">The description of the payment application</param>
            <param name="amount">The amount of the payment to be applied</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>An <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IAppliedPaymentService.Save(NKart.Core.Models.IAppliedPayment,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IAppliedPaymentService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAppliedPayment},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayments">The collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IAppliedPaymentService.Delete(NKart.Core.Models.IAppliedPayment,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IAppliedPaymentService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAppliedPayment},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayments">The collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IAppliedPaymentService.GetByKey(System.Guid)">
            <summary>
            Returns a <see cref="T:NKart.Core.Models.IAppliedPayment"/> by it's unique 'key'
            </summary>
            <param name="key">The unique 'key' of the <see cref="T:NKart.Core.Models.IAppliedPayment"/></param>
            <returns>An <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IAppliedPaymentService.GetAppliedPaymentsByPaymentKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the payment key
            </summary>
            <param name="paymentKey">The payment key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IAppliedPaymentService.GetAppliedPaymentsByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the invoice key
            </summary>
            <param name="invoiceKey">The invoice key</param>
            <returns>A collection <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="T:NKart.Core.Services.INoteService">
            <summary>
            Defines a NoteService.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.INoteService.CreateNote(System.Guid,NKart.Core.EntityType,System.String,System.Boolean)">
            <summary>
            Creates a note.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityType">
            The entity type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.INoteService.CreateNote(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a note without saving it to the database.
            </summary>
            <param name="entityKey">
            The entity Key.
            </param>
            <param name="entityTfKey">
            The entity Type field Key.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.INoteService.CreateNoteWithKey(System.Guid,NKart.Core.EntityType,System.String,System.Boolean)">
            <summary>
            Creates a note and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityType">
            The entity type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.INoteService.CreateNoteWithKey(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates an note and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.INote"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.INoteService.Save(NKart.Core.Models.INote,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="note">
            The <see cref="T:NKart.Core.Models.INote"/> to save
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.INoteService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.INote},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="notes">
            The collection of <see cref="T:NKart.Core.Models.INote"/>s to be saved
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.INoteService.Delete(NKart.Core.Models.INote,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="note">
            The <see cref="T:NKart.Core.Models.INote"/> to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.INoteService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.INote},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.INote"/>
            </summary>
            <param name="notes">
            The collection of <see cref="T:NKart.Core.Models.INote"/>s to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.INoteService.GetNotesByEntityKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INote"/> for a particular entity
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.INoteService.GetNotesByEntityTfKey(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INote"/> for an entity type
            </summary>
            <param name="entityTfKey">
            The entity tf key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IAuditLogService">
            <summary>
            Defines an AuditLogService.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.CreateAuditLogWithKey(System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="isError">
            Designates whether or not this is an error log record
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.CreateAuditLogWithKey(System.String,NKart.Core.Models.ExtendedDataCollection,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="isError">
            Designates whether or not this is an error log record
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.CreateAuditLogWithKey(System.Nullable{System.Guid},NKart.Core.EntityType,System.String,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityType">
            The entity type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="isError">
            The is error.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.CreateAuditLogWithKey(System.Nullable{System.Guid},NKart.Core.EntityType,System.String,NKart.Core.Models.ExtendedDataCollection,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityType">
            The entity type.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="extendedData">
            The extended Data.
            </param>
            <param name="isError">
            The is error.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.CreateAuditLogWithKey(System.Nullable{System.Guid},System.Nullable{System.Guid},System.String,NKart.Core.Models.ExtendedDataCollection,System.Boolean,System.Boolean)">
            <summary>
            Creates an audit record and saves it to the database
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="message">
            The message.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
            <param name="isError">
            Designates whether or not this is an error log record
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.Save(NKart.Core.Models.Interfaces.IAuditLog,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="auditLog">
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> to save
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IAuditLog},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="auditLogs">
            The collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>s to be saved
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.Delete(NKart.Core.Models.Interfaces.IAuditLog,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="auditLog">
            The <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IAuditLog},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>
            </summary>
            <param name="auditLogs">
            The collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/>s to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.DeleteErrorAuditLogs(System.Boolean)">
            <summary>
            Deletes all error logs
            </summary>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.GetAuditLogsByEntityKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> for a particular entity
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.GetAuditLogsByEntityTfKey(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> for an entity type
            </summary>
            <param name="entityTfKey">
            The entity tf key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IAuditLogService.GetErrorAuditLogs(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IAuditLog"/> where IsError == true
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.ICustomerAddressService">
            <summary>
            Defines a CustomerAddressService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ICustomerAddressService.Save(NKart.Core.Models.ICustomerAddress,System.Boolean)">
            <summary>
            The save.
            </summary>
            <param name="address">
            The address.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerAddressService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.ICustomerAddress},System.Boolean)">
            <summary>
            The save.
            </summary>
            <param name="addresses">
            The addresses.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerAddressService.Delete(NKart.Core.Models.ICustomerAddress,System.Boolean)">
            <summary>
            The delete.
            </summary>
            <param name="address">
            The address.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerAddressService.GetByKey(System.Guid)">
            <summary>
            The get by key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerAddressService.GetDefaultCustomerAddress(System.Guid,NKart.Core.AddressType)">
            <summary>
            Gets the default customer address of a certain type
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerAddressService.GetByCustomerKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> by the customer key
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerAddressService.GetByCustomerKey(System.Guid,NKart.Core.AddressType)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> by the customer key filtered by an <see cref="T:NKart.Core.AddressType"/>
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerAddressService.GetAll">
            <summary>
            Gets a collection of all customer addresses
            </summary>
            <returns>
            The collection of all customer addresses.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerAddressService.Count(System.Guid)">
            <summary>
            Gets the count of addresses for a customer.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IDetachedContentTypeService">
            <summary>
            Re DetachedContentTypeService.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.CreateDetachedContentType(NKart.Core.EntityType,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> without saving it to the database.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="contentTypeKey">
            The content type key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.CreateDetachedContentType(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> without saving it to the database.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="contentTypeKey">
            The content type key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.CreateDetachedContentTypeWithKey(NKart.Core.EntityType,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> and saves to the database.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="contentTypeKey">
            The content type key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.CreateDetachedContentTypeWithKey(System.Guid,System.Guid,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> and saves to the database.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="contentTypeKey">
            The content type key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.Save(NKart.Core.Models.DetachedContent.IDetachedContentType,System.Boolean)">
            <summary>
            Saves a single instance of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="detachedContentType">
            The detached content type.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.DetachedContent.IDetachedContentType},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="detachedContentTypes">
            The collection to be saved.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.Delete(NKart.Core.Models.DetachedContent.IDetachedContentType,System.Boolean)">
            <summary>
            Deletes a single instance of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="detachedContentType">
            The detached content type.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.GetDetachedContentTypesByEntityTfKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> by the entity type key.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.GetDetachedContentTypesByContentTypeKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/> by the Umbraco content type key.
            </summary>
            <param name="contentTypeKey">
            The Umbraco content type key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IDetachedContentTypeService.GetAll">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>s.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IDigitalMediaService">
            <summary>
            Defines a DigitalMediaService.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IDigitalMediaService.CreateDigitalMediaForProductVariant(System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> and saves it to the database.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IDigitalMediaService.Save(NKart.Core.Models.Interfaces.IDigitalMedia,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>
            </summary>
            <param name="digitalMedia">
            The digital media.
            </param>
            <param name="raiseEvents">
             Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IDigitalMediaService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IDigitalMedia},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </summary>
            <param name="digitalMedias">
            The digital medias.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IDigitalMediaService.Delete(NKart.Core.Models.Interfaces.IDigitalMedia,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> from the database.
            </summary>
            <param name="digitalMedia">
            The digital media.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IDigitalMediaService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IDigitalMedia},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> from the database.
            </summary>
            <param name="digitalMedias">
            The digital medias.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IDigitalMediaService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IDigitalMediaService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IDigitalMedia"/> given a collection of keys
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IEntityCollectionService">
            <summary>
            The EntityCollectionService interface.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.CreateEntityCollection(NKart.Core.EntityType,System.Guid,System.String,System.Boolean)">
            <summary>
            The create entity collection.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.CreateEntityCollectionWithKey(NKart.Core.EntityType,System.Guid,System.String,System.Boolean)">
            <summary>
            The create entity collection with key.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.Save(NKart.Core.Models.Interfaces.IEntityCollection,System.Boolean)">
            <summary>
            Saves a single entity collection.
            </summary>
            <param name="entityCollection">
            The entity collection.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IEntityCollection},System.Boolean)">
            <summary>
            Saves a collection of entity collections.
            </summary>
            <param name="entityCollections">
            The entity collections.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.Delete(NKart.Core.Models.Interfaces.IEntityCollection,System.Boolean)">
            <summary>
            Deletes a single entity collection.
            </summary>
            <param name="entityCollection">
            The entity collection.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetByKey(System.Guid)">
            <summary>
            The get by key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityCollection"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetByEntityTfKey(System.Guid)">
            <summary>
            The get by entity type field key.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetByProviderKey(System.Guid)">
            <summary>
            The get by provider key.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetEntityFilterGroupByKey(System.Guid)">
            <summary>
            Gets an entity filter group by key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IEntityFilterGroup"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetAll(System.Guid[])">
            <summary>
            The get all.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetChildren(System.Guid)">
            <summary>
            The get children.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.ExistsInCollection(System.Nullable{System.Guid},System.Guid)">
            <summary>
            The exists in collection.
            </summary>
            <param name="parentKey">
            The parent key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetRootLevelEntityCollections">
            <summary>
            The get root level entity collections.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetRootLevelEntityCollections(NKart.Core.EntityType)">
            <summary>
            The get root level entity collections.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetRootLevelEntityCollections(NKart.Core.EntityType,System.Guid)">
            <summary>
            The get root level entity collections.
            </summary>
            <param name="entityType">
            The entity type.
            </param>
            <param name="providerKey">
            The provider key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetRootLevelEntityCollections(System.Guid)">
            <summary>
            The get root level entity collections.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetRootLevelEntityCollections(System.Guid,System.Guid)">
            <summary>
            The get root level entity collections.
            </summary>
            <param name="entityTfKey">
            The entity type field key.
            </param>
            <param name="providerKey">
            The provider key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a Page of collections from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.ChildEntityCollectionCount(System.Guid)">
            <summary>
            The child entity collection count.
            </summary>
            <param name="collectionKey">
            The collection Key.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.HasChildEntityCollections(System.Guid)">
            <summary>
            The has child entity collections.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IEntityCollectionService.CollectionCountManagedByProvider(System.Guid)">
            <summary>
            Gets the count of collections managed by a provider
            </summary>
            <param name="providerKey">The provider key</param>
            <returns>
            The count of collections managed by a provider
            </returns>
        </member>
        <member name="T:NKart.Core.Services.INotificationMessageService">
            <summary>
            Defines a NotificationMessageService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.INotificationMessageService.CreateNotificationMethodWithKey(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMessage"/> and saves it to the database
            </summary>
            <param name="methodKey">The <see cref="T:NKart.Core.Models.INotificationMethod"/> key</param>
            <param name="name">The name of the message (primarily used in the back office UI)</param>
            <param name="description">The name of the message (primarily used in the back office UI)</param>
            <param name="fromAddress">The senders or "from" address</param>
            <param name="recipients">A collection of recipient address</param>
            <param name="bodyText">The body text of the message</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>Attempt{INotificationMessage}</returns>
        </member>
        <member name="M:NKart.Core.Services.INotificationMessageService.Save(NKart.Core.Models.INotificationMessage,System.Boolean)">
            <summary>
            Saves a single instance of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="notificationMessage">The <see cref="T:NKart.Core.Models.NotificationMessage"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.INotificationMessageService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.INotificationMessage},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s
            </summary>
            <param name="notificationMessages">The collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.INotificationMessageService.Delete(NKart.Core.Models.INotificationMessage,System.Boolean)">
            <summary>
            Deletes a single instance of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="notificationMessage">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.INotificationMessageService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.INotificationMessage"/> by it's unique key (Guid)
            </summary>
            <param name="key">The key (Guid) for the <see cref="T:NKart.Core.Models.INotificationMessage"/> to be retrieved</param>
            <returns>Optional boolean indicating whether or not to raise events</returns>
        </member>
        <member name="M:NKart.Core.Services.INotificationMessageService.GetNotificationMessagesByMethodKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s base on the notification method
            </summary>
            <param name="notificationMethodKey">The <see cref="T:NKart.Core.Models.INotificationMethod"/> key</param>
            <returns>Optional boolean indicating whether or not to raise events</returns>
        </member>
        <member name="M:NKart.Core.Services.INotificationMessageService.GetNotificationMessagesByMonitorKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s based on a monitor key
            </summary>
            <param name="monitorKey">The Notification Monitor Key (Guid)</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>
        </member>
        <member name="T:NKart.Core.Services.INotificationMethodService">
            <summary>
            Defines a NotificationMethodService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.INotificationMethodService.CreateNotificationMethodWithKey(System.Guid,System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMethod"/> and saves it to the database
            </summary>
            <param name="providerKey">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key</param>
            <param name="name">The name of the notification (used in back office)</param>
            <param name="serviceCode">The notification service code</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>An Attempt{<see cref="T:NKart.Core.Models.INotificationMethod"/>}</returns>
        </member>
        <member name="M:NKart.Core.Services.INotificationMethodService.Save(NKart.Core.Models.INotificationMethod,System.Boolean)">
            <summary>
            Saves a single instance of <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethod">The <see cref="T:NKart.Core.Models.INotificationMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.INotificationMethodService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.INotificationMethod},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethods">The collection of <see cref="T:NKart.Core.Models.INotificationMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.INotificationMethodService.Delete(NKart.Core.Models.INotificationMethod,System.Boolean)">
            <summary>
            Deletes a single instance os <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethod">The <see cref="T:NKart.Core.Models.INotificationMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.INotificationMethodService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.INotificationMethod},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethods">The collection of <see cref="T:NKart.Core.Models.INotificationMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.INotificationMethodService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.INotificationMethod"/> by it's key
            </summary>
            <param name="key">The key (Guid) of the <see cref="T:NKart.Core.Models.INotificationMethod"/> to be retrieved</param>
            <returns>The <see cref="T:NKart.Core.Models.INotificationMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.INotificationMethodService.GetNotifcationMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.INotificationMethod"/> assoicated with a provider
            </summary>
            <param name="providerKey">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key</param>
            <returns>A collection of all <see cref="T:NKart.Core.Models.INotificationMethod"/> associated with a provider</returns>
        </member>
        <member name="T:NKart.Core.Services.IOfferRedeemedService">
            <summary>
            Defines the OfferRedeemedService.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.CreateOfferRedeemedWithKey(NKart.Core.Models.Interfaces.IOfferSettings,NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Creates an <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> record
            </summary>
            <param name="offerSettings">
            The offer settings.
            </param>
            <param name="invoice">
            The invoice.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.Save(NKart.Core.Models.Interfaces.IOfferRedeemed,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>
            </summary>
            <param name="offerRedeemed">
            The offer redeemed.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IOfferRedeemed},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>
            </summary>
            <param name="redemptions">
            The redemptions.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.Delete(NKart.Core.Models.Interfaces.IOfferRedeemed,System.Boolean)">
            <summary>
            Deletes an <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>
            </summary>
            <param name="offerRedeemed">
            The offer redeemed.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IOfferRedeemed},System.Boolean)">
            <summary>
            The delete.
            </summary>
            <param name="redemptions">
            The redemptions.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.GetByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> record by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.GetByInvoiceKey(System.Guid)">
            <summary>
             Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> records by an invoice key.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.GetByCustomerKey(System.Guid)">
            <summary>
             Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> records by a customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.GetByOfferSettingsKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> records by a offer settings key.
            </summary>
            <param name="offerSettingsKey">
            The offer settings key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.GetByOfferSettingsKeyAndCustomerKey(System.Guid,System.Guid)">
            <summary>
            The get by offer settings key and customer key.
            </summary>
            <param name="offerSettingsKey">
            The offer settings key.
            </param>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.GetByOfferProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> records by an offer provider key.
            </summary>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferRedeemedService.GetOfferRedeemedCount(System.Guid)">
            <summary>
            Gets the redemption count for an offer.
            </summary>
            <param name="offerSettingsKey">
            The offer settings key.
            </param>
            <returns>
            The current count of offer redemptions.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IOfferSettingsService">
            <summary>
            Defines an offer settings service
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.CreateOfferSettings(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> without saving it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.CreateOfferSettings(System.String,System.String,System.Guid,NKart.Core.Models.OfferComponentDefinitionCollection,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> without saving it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="componentDefinitions">
            The component definitions.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.CreateOfferSettingsWithKey(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> and saves it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.CreateOfferSettingsWithKey(System.String,System.String,System.Guid,NKart.Core.Models.OfferComponentDefinitionCollection,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> and saves it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="componentDefinitions">
            The component definitions.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.Save(NKart.Core.Models.Interfaces.IOfferSettings,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="offerSettings">
            The offer settings.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IOfferSettings},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="offersSettings">
            The offers settings.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.Delete(NKart.Core.Models.Interfaces.IOfferSettings,System.Boolean)">
            <summary>
            Deletes a single of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="offerSettings">
            The offer settings.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IOfferSettings},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="offersSettings">
            The offers settings.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> by their unique keys
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.GetByOfferProviderKey(System.Guid,System.Boolean)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> for a given offer provider.
            </summary>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="activeOnly">
            Optional value indicating whether or not to only return active Offers settings marked as active
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.GetByOfferCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.OfferSettings"/> by the offer code value.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.GetAllActive(System.Boolean)">
            <summary>
            Gets a collection of active <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="excludeExpired">
            The exclude Expired.
            </param>
            <returns>
            The <see cref="!:IEnumerable&lt;IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IOfferSettingsService.OfferCodeIsUnique(System.String)">
            <summary>
            Checks if the offer code is unique.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <returns>
            A valid indicating whether or not the offer code is unique.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IOrderService">
            <summary>
            Defines the OrderService.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.CreateOrder(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IOrder"/> without saving it to the database
            </summary>
            <param name="orderStatusKey">The <see cref="T:NKart.Core.Models.IOrderStatus"/> key</param>
            <param name="invoiceKey">The invoice key</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>The <see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.CreateOrder(System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IOrder"/> without saving it to the database
            </summary>
            <param name="orderStatusKey">
            The <see cref="T:NKart.Core.Models.IOrderStatus"/> key
            </param>
            <param name="invoiceKey">
            The invoice key
            </param>
            <param name="orderNumber">
            The order Number.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IOrder"/>.
            </returns>
            <remarks>
            Order number must be a positive integer value or zero
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.CreateOrderWithKey(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IOrder"/> and saves it to the database
            </summary>
            <param name="orderStatusKey">The <see cref="T:NKart.Core.Models.IOrderStatus"/> key</param>
            <param name="invoiceKey">The invoice key</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns><see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.Save(NKart.Core.Models.IOrder,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IOrder"/>
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IOrder},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IOrder"/>
            </summary>
            <param name="orders">The collection of <see cref="T:NKart.Core.Models.IOrder"/></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.Delete(NKart.Core.Models.IOrder,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IOrder"/>
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IOrder},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.IOrder"/>
            </summary>
            <param name="orders">The collection of <see cref="T:NKart.Core.Models.IOrder"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.GetByOrderNumber(System.Int32)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IOrder"/> given it's unique 'OrderNumber'
            </summary>
            <param name="orderNumber">The order number of the <see cref="T:NKart.Core.Models.IOrder"/> to be retrieved</param>
            <returns><see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.GetOrdersByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IOrder"/> for a given <see cref="T:NKart.Core.Models.IInvoice"/> key
            </summary>
            <param name="invoiceKey">The <see cref="T:NKart.Core.Models.IInvoice"/> key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IOrder"/> objects given a list of Keys
            </summary>
            <param name="keys">List of guid 'key' for the invoices to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.GetOrderStatusByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IOrderStatus"/> by it's key
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IInvoiceStatus"/> key</param>
            <returns><see cref="T:NKart.Core.Models.IInvoiceStatus"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IOrderService.GetAllOrderStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IOrderStatus"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Services.IPageCachedService`1">
            <summary>
            Marks paged cache services.
            </summary>
            <typeparam name="TEntity">
            The type of entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.Services.IPageCachedService`1.GetByKey(System.Guid)">
            <summary>
            Gets an entity by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="!:TEntity"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IPageCachedService`1.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.Page`1"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IPaymentMethodService">
            <summary>
            Defines the PaymentMethodService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IPaymentMethodService.Save(NKart.Core.Models.IPaymentMethod,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentMethodService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IPaymentMethod},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="paymentMethods">A collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentMethodService.Delete(NKart.Core.Models.IPaymentMethod,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentMethodService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IPaymentMethod},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethods">The collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentMethodService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="key">The unique 'key' (Guid) of the <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.IPaymentMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentMethodService.GetPaymentMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/> for a given PaymentGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the PaymentGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentMethodService.GetPaymentMethodByPaymentCode(System.Guid,System.String)">
            <summary>
            Returns a <see cref="T:NKart.Core.Models.IPaymentMethod"/> given is't paymentCode 
            </summary>
            <param name="providerKey">The unique 'key' of the PaymentGatewayProvider</param>
            <param name="paymentCode">The paymentCode</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentMethodService.GetAll">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Services.IPaymentService">
            <summary>
            The PaymentService interface.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.CreatePayment(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Creates a payment without saving it to the database
            </summary>
            <param name="paymentMethodType">The type of the payment method</param>
            <param name="amount">The amount of the payment</param>
            <param name="paymentMethodKey">The optional paymentMethodKey</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>Returns <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.CreatePaymentWithKey(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Creates and saves a payment
            </summary>
            <param name="paymentMethodType">The type of the payment method</param>
            <param name="amount">The amount of the payment</param>
            <param name="paymentMethodKey">The optional paymentMethodKey</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>Returns <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.Save(NKart.Core.Models.IPayment,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IPayment},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="payments">A collection of <see cref="T:NKart.Core.Models.IPayment"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.Delete(NKart.Core.Models.IPayment,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IPayment},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="payments">
            The payments.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="key">The unique 'key' (GUID) of the <see cref="T:NKart.Core.Models.IPayment"/></param>
            <returns><see cref="T:NKart.Core.Models.IPaymentMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> given a list of keys
            </summary>
            <param name="keys">A collection of payment keys</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.GetPaymentsByPaymentMethodKey(System.Nullable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> for a given PaymentGatewayProvider
            </summary>
            <param name="paymentMethodKey">The unique 'key' of the PaymentGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.GetPaymentsByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> for a given invoice
            </summary>
            <param name="invoiceKey">The unique 'key' of the invoice</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.GetPaymentsByCustomerKey(System.Guid)">
            <summary>
            Get a list of payments by customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IPayment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.ApplyPaymentToInvoice(System.Guid,System.Guid,NKart.Core.AppliedPaymentType,System.String,System.Decimal,System.Boolean)">
            <summary>
            Creates and saves an AppliedPayment
            </summary>
            <param name="paymentKey">The payment key</param>
            <param name="invoiceKey">The invoice 'key'</param>
            <param name="appliedPaymentType">The applied payment type</param>
            <param name="description">The description of the payment application</param>
            <param name="amount">The amount of the payment to be applied</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>An <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.Save(NKart.Core.Models.IAppliedPayment,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.Delete(NKart.Core.Models.IAppliedPayment,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAppliedPayment},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayments">The collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.GetAppliedPaymentsByPaymentKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the payment key
            </summary>
            <param name="paymentKey">The payment key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IPaymentService.GetAppliedPaymentsByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the invoice key
            </summary>
            <param name="invoiceKey">The invoice key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="T:NKart.Core.Services.IStaticCollectionService`1">
            <summary>
            Defines a service that has static collections.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.EntityBase.IEntity"/>
            </typeparam>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.AddToCollection(`0,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            Adds an entity to a collection.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.AddToCollection(`0,System.Guid)">
            <summary>
            Adds an entity to a collection.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.AddToCollection(System.Guid,System.Guid)">
            <summary>
            The add invoice to collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.RemoveFromCollection(`0,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.RemoveFromCollection(`0,System.Guid)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="entity">
            The entity.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.RemoveFromCollection(System.Guid,System.Guid)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.ExistsInCollection(System.Guid,System.Guid)">
            <summary>
            Returns true if the invoice exists in the static collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.ExistsInCollection(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns true if the entity exists in the at least one of the static collections.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets an entity from a collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets distinct entities from a multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets an entity from a collection filtered by a search term
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStaticCollectionService`1.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets an entity from multiple collections filtered by a search term
            </summary>
            <param name="collectionKeys">
            A collection of collection keys.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IWarehouseCatalogService">
            <summary>
            Defines a warehouse catalog service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseCatalogService.CreateWarehouseCatalogWithKey(System.Guid,System.String,System.String,System.Boolean)">
            <summary>
            Creates warehouse catalog and persists it to the database.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="description">
            The description.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseCatalogService.Save(NKart.Core.Models.IWarehouseCatalog,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalog">
            The warehouse catalog.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseCatalogService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalogs">
            The warehouse catalogs.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseCatalogService.Delete(NKart.Core.Models.IWarehouseCatalog,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalog">
            The warehouse catalog.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <remarks>
            Cannot delete the default catalog in the default warehouse
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseCatalogService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalogs">
            The warehouse catalogs.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <remarks>
            Cannot delete the default catalog in the default warehouse
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseCatalogService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseCatalogService.GetAll">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseCatalogService.GetByWarehouseKey(System.Guid)">
            <summary>
            Get a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by warehouse key.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.MerchelloRepositoryService">
            <summary>
            The merchello repository service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.MerchelloRepositoryService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.MerchelloRepositoryService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="P:NKart.Core.Services.MerchelloRepositoryService.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.MerchelloRepositoryService.EventMessagesFactory">
            <summary>
            Gets the event messages factory.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.MerchelloRepositoryService.RepositoryFactory">
            <summary>
            Gets the repository factory.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.MerchelloRepositoryService.UowProvider">
            <summary>
            Gets the UOW provider.
            </summary>
        </member>
        <member name="T:NKart.Core.Services.NotificationMessageService">
            <summary>
            Represents a NotificationMessageService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMessageService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMessageService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMessageService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMessageService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMessageService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.CreateNotificationMethodWithKey(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMessage"/> and saves it to the database
            </summary>
            <param name="methodKey">The <see cref="T:NKart.Core.Models.INotificationMethod"/> key</param>
            <param name="name">The name of the message (primarily used in the back office UI)</param>
            <param name="description">The name of the message (primarily used in the back office UI)</param>
            <param name="fromAddress">The senders or "from" address</param>
            <param name="recipients">A collection of recipient address</param>
            <param name="bodyText">The body text of the message</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>Attempt{INotificationMessage}</returns>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.Save(NKart.Core.Models.INotificationMessage,System.Boolean)">
            <summary>
            Saves a single instance of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="notificationMessage">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.INotificationMessage},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s
            </summary>
            <param name="notificationMessages">The collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.Delete(NKart.Core.Models.INotificationMessage,System.Boolean)">
            <summary>
            Deletes a single instance of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="notificationMessage">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.INotificationMessage"/> by it's unique key (Guid)
            </summary>
            <param name="key">The key (Guid) for the <see cref="T:NKart.Core.Models.INotificationMessage"/> to be retrieved</param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/> by list of unique key (Guid)
            </summary>
            <param name="keys">The keys (Guid) for the collection of <see cref="T:NKart.Core.Models.INotificationMessage"/> to be retrieved</param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.GetNotificationMessagesByMethodKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s base on the notification method
            </summary>
            <param name="notificationMethodKey">The <see cref="T:NKart.Core.Models.INotificationMethod"/> key</param>
            <returns>Optional boolean indicating whether or not to raise events</returns>
        </member>
        <member name="M:NKart.Core.Services.NotificationMessageService.GetNotificationMessagesByMonitorKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s based on a monitor key
            </summary>
            <param name="monitorKey">The Notification Monitor Key (Guid)</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>        
        </member>
        <member name="E:NKart.Core.Services.NotificationMessageService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NotificationMessageService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NotificationMessageService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NotificationMessageService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NotificationMessageService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.NotificationMessageService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="T:NKart.Core.Services.NotificationMethodService">
            <summary>
            Represents a NotificationMethodService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMethodService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMethodService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMethodService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMethodService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.NotificationMethodService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.CreateNotificationMethodWithKey(System.Guid,System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMethod"/> and saves it to the database
            </summary>
            <param name="providerKey">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key</param>
            <param name="name">The name of the notification (used in back office)</param>
            <param name="serviceCode">The notification service code</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>An Attempt{<see cref="T:NKart.Core.Models.INotificationMethod"/>}</returns>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.Save(NKart.Core.Models.INotificationMethod,System.Boolean)">
            <summary>
            Saves a single instance of <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethod">The <see cref="T:NKart.Core.Models.INotificationMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.INotificationMethod},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethods">The collection of <see cref="T:NKart.Core.Models.INotificationMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.Delete(NKart.Core.Models.INotificationMethod,System.Boolean)">
            <summary>
            Deletes a single instance os <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethod">The <see cref="T:NKart.Core.Models.INotificationMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.INotificationMethod},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethods">The collection of <see cref="T:NKart.Core.Models.INotificationMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.INotificationMethod"/> by it's key
            </summary>
            <param name="key">The key (Guid) of the <see cref="T:NKart.Core.Models.INotificationMethod"/> to be retrieved</param>
            <returns>The <see cref="T:NKart.Core.Models.INotificationMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.GetNotifcationMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.INotificationMethod"/> assoicated with a provider
            </summary>
            <param name="providerKey">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key</param>
            <returns>A collection of all <see cref="T:NKart.Core.Models.INotificationMethod"/> associated with a provider</returns>
        </member>
        <member name="M:NKart.Core.Services.NotificationMethodService.GetAll">
            <summary>
            Gets a collection of all notification methods.  
            </summary>
            <remarks>Primarily used for testing</remarks>
        </member>
        <member name="E:NKart.Core.Services.NotificationMethodService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NotificationMethodService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NotificationMethodService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NotificationMethodService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.NotificationMethodService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.NotificationMethodService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="T:NKart.Core.Services.OfferRedeemedService">
            <summary>
            The offer redeemed service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.OfferRedeemedService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferRedeemedService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferRedeemedService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferRedeemedService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferRedeemedService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferRedeemedService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.OfferRedeemedService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OfferRedeemedService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OfferRedeemedService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OfferRedeemedService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OfferRedeemedService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.OfferRedeemedService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.CreateOfferRedeemedWithKey(NKart.Core.Models.Interfaces.IOfferSettings,NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Creates an <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> record
            </summary>
            <param name="offerSettings">
            The offer settings.
            </param>
            <param name="invoice">
            The invoice.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.Save(NKart.Core.Models.Interfaces.IOfferRedeemed,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>
            </summary>
            <param name="offerRedeemed">
            The offer redeemed.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IOfferRedeemed},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>
            </summary>
            <param name="redemptions">
            The redemptions.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.Delete(NKart.Core.Models.Interfaces.IOfferRedeemed,System.Boolean)">
            <summary>
            Deletes an <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>
            </summary>
            <param name="offerRedeemed">
            The offer redeemed.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IOfferRedeemed},System.Boolean)">
            <summary>
            The delete.
            </summary>
            <param name="redemptions">
            The redemptions.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.GetByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> record by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.GetByInvoiceKey(System.Guid)">
            <summary>
             Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> records by an invoice key.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.GetByCustomerKey(System.Guid)">
            <summary>
             Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> records by a customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.GetByOfferSettingsKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> records by a offer settings key.
            </summary>
            <param name="offerSettingsKey">
            The offer settings key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.GetByOfferSettingsKeyAndCustomerKey(System.Guid,System.Guid)">
            <summary>
            The get by offer settings key and customer key.
            </summary>
            <param name="offerSettingsKey">
            The offer settings key.
            </param>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.GetByOfferProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferRedeemed"/> records by an offer provider key.
            </summary>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferRedeemedService.GetOfferRedeemedCount(System.Guid)">
            <summary>
            Gets the redemption count for an offer.
            </summary>
            <param name="offerSettingsKey">
            The offer settings key.
            </param>
            <returns>
            The current count of offer redemptions.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.OfferSettingsService">
            <summary>
            Represents the OfferSettingsService.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.OfferSettingsService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferSettingsService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferSettingsService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferSettingsService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferSettingsService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OfferSettingsService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.OfferSettingsService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OfferSettingsService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OfferSettingsService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OfferSettingsService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OfferSettingsService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.OfferSettingsService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.CreateOfferSettings(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> without saving it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.CreateOfferSettings(System.String,System.String,System.Guid,NKart.Core.Models.OfferComponentDefinitionCollection,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> without saving it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="componentDefinitions">
            The component definitions.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.CreateOfferSettingsWithKey(System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> and saves it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.CreateOfferSettingsWithKey(System.String,System.String,System.Guid,NKart.Core.Models.OfferComponentDefinitionCollection,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> and saves it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="componentDefinitions">
            The component definitions.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.Save(NKart.Core.Models.Interfaces.IOfferSettings,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="offerSettings">
            The offer settings.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IOfferSettings},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="offersSettings">
            The offers settings.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.Delete(NKart.Core.Models.Interfaces.IOfferSettings,System.Boolean)">
            <summary>
            Deletes a single of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="offerSettings">
            The offer settings.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.Interfaces.IOfferSettings},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="offersSettings">
            The offers settings.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> by their unique keys
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Returns a page of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="page">
            The page number.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.GetByOfferProviderKey(System.Guid,System.Boolean)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/> for a given offer provider.
            </summary>
            <param name="offerProviderKey">
            The offer provider key.
            </param>
            <param name="activeOnly">
            Optional value indicating whether or not to only return active Offers settings marked as active
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.GetByOfferCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.OfferSettings"/> by the offer code value.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.GetAllActive(System.Boolean)">
            <summary>
            Gets a collection of active <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </summary>
            <param name="excludeExpired">
            The exclude Expired.
            </param>
            <returns>
            The <see cref="!:IEnumerable&lt;IOfferSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.OfferCodeIsUnique(System.String)">
            <summary>
            Checks if the offer code is unique.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <returns>
            A valid indicating whether or not the offer code is unique.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.GetPage(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Searches the offer settings by a term.
            </summary>
            <param name="filterTerm">
            The term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OfferSettingsService.ValidateSortByField(System.String)">
            <summary>
            Validates the sort field.
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.OrderService">
            <summary>
            Represents the OrderService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.OrderService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.OrderService.ValidSortFields">
            <summary>
            The valid sort fields.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.OrderService._storeSettingService">
            <summary>
            The store setting service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.OrderService._shipmentService">
            <summary>
            The shipment service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OrderService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OrderService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OrderService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OrderService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OrderService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OrderService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OrderService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IStoreSettingService,NKart.Core.Services.IShipmentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OrderService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
            <param name="shipmentService">
            The shipment service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OrderService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IStoreSettingService,NKart.Core.Services.IShipmentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OrderService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
            <param name="shipmentService">
            The shipment service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.OrderService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IStoreSettingService,NKart.Core.Services.IShipmentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.OrderService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
            <param name="shipmentService">
            The shipment service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.OrderService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OrderService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OrderService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OrderService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OrderService.StatusChanging">
            <summary>
            Occurs before an invoice status has changed
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OrderService.StatusChanged">
            <summary>
            Occurs after an invoice status has changed
            </summary>
        </member>
        <member name="E:NKart.Core.Services.OrderService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.OrderService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OrderService.CreateOrder(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IOrder"/> without saving it to the database
            </summary>
            <param name="orderStatusKey">The <see cref="T:NKart.Core.Models.IOrderStatus"/> key</param>
            <param name="invoiceKey">The invoice key</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>The <see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.FirstEditableOrderOnInvoice(NKart.Core.Models.IOrder[])">
            <summary>
            Returns an order if there is one that can be edited on an order
            </summary>
            <returns>The <see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.AddOrderLineItemsToInvoice(System.Collections.Generic.List{NKart.Core.Models.OrderLineItem},NKart.Core.Models.IInvoice,NKart.Core.Models.InvoiceAdjustmentResult)">
            <summary>
            Either adds new orderlineitems to an existing order on the invoice or creates a new one
            </summary>
            <param name="orderLineItems"></param>
            <param name="invoice"></param>
            <param name="invoiceAdjustmentResult"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.AddOrderLineItemsToInvoice(NKart.Core.Models.OrderLineItem,NKart.Core.Models.IInvoice,NKart.Core.Models.InvoiceAdjustmentResult)">
            <summary>
            Either adds new orderlineitems to an existing order on the invoice or creates a new one
            </summary>
            <param name="orderLineItem"></param>
            <param name="invoice"></param>
            <param name="invoiceAdjustmentResult"></param>
        </member>
        <member name="M:NKart.Core.Services.OrderService.CreateOrder(System.Guid,System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IOrder"/> without saving it to the database
            </summary>
            <param name="orderStatusKey">
            The <see cref="T:NKart.Core.Models.IOrderStatus"/> key
            </param>
            <param name="invoiceKey">
            The invoice key
            </param>
            <param name="orderNumber">
            The order Number.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IOrder"/>.
            </returns>
            <remarks>
            Order number must be a positive integer value or zero
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.OrderService.CreateOrderWithKey(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IOrder"/> and saves it to the database
            </summary>
            <param name="orderStatusKey">The <see cref="T:NKart.Core.Models.IOrderStatus"/> key</param>
            <param name="invoiceKey"></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns><see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.Save(NKart.Core.Models.IOrder,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IOrder"/>
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.OrderService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IOrder},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IOrder"/>
            </summary>
            <param name="orders">The collection of <see cref="T:NKart.Core.Models.IOrder"/></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.OrderService.Delete(NKart.Core.Models.IOrder,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IOrder"/>
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.OrderService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IOrder},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.IOrder"/>
            </summary>
            <param name="orders">The collection of <see cref="T:NKart.Core.Models.IOrder"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IOrder"/> given it's unique 'key' (GUID)
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IOrder"/>'s unique 'key' (GUID)</param>
            <returns>The <see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.Page`1"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetByOrderNumber(System.Int32)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IOrder"/> given it's unique 'OrderNumber'
            </summary>
            <param name="orderNumber">The order number of the <see cref="T:NKart.Core.Models.IOrder"/> to be retrieved</param>
            <returns><see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetOrdersByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IOrder"/> for a given <see cref="T:NKart.Core.Models.IInvoice"/> key
            </summary>
            <param name="invoiceKey">The <see cref="T:NKart.Core.Models.IInvoice"/> key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IOrder"/> objects given a list of Keys
            </summary>
            <param name="keys">List of guid 'key' for the invoices to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IOrder"/></returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetOrderStatusByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IOrderStatus"/> by it's key
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IInvoiceStatus"/> key</param>
            <returns><see cref="T:NKart.Core.Models.IInvoiceStatus"/></returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetAllOrderStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IOrderStatus"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetAll">
            <summary>
            Gets all of the orders
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.Count(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IOrder})">
            <summary>
            The count of items returned by the query
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetPagedKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of keys
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>        
        </member>
        <member name="M:NKart.Core.Services.OrderService.GetPage(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IOrder},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.ValidateSortByField(System.String)">
            <summary>
            The validate sort by field.
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.OrderService.DeleteShipments(NKart.Core.Models.IOrder)">
            <summary>
            Deletes <see cref="T:NKart.Core.Models.IShipment"/>s associated with the order
            </summary>
            <param name="order">The <see cref="T:NKart.Core.Models.IOrder"/></param>
        </member>
        <member name="T:NKart.Core.Services.PageCachedServiceBase`1">
            <summary>
            The page cached service base.
            </summary>
            <typeparam name="TEntity">
            The type of entity
            </typeparam>
        </member>
        <member name="M:NKart.Core.Services.PageCachedServiceBase`1.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PageCachedServiceBase`1"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PageCachedServiceBase`1.GetByKey(System.Guid)">
            <summary>
            Gets an entity by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="!:TEntity"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.PageCachedServiceBase`1.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.Page`1"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.PageCachedServiceBase`1.Count(Umbraco.Core.Persistence.Querying.IQuery{`0})">
            <summary>
            The count.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.PageCachedServiceBase`1.GetPagedKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Performs a paged query
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.PageCachedServiceBase`1.GetPageFromKeyPage(Umbraco.Core.Persistence.Page{System.Guid},System.Func{System.Collections.Generic.IEnumerable{`0}})">
            <summary>
            The get page from key page.
            </summary>
            <param name="keyPage">
            The key page.
            </param>
            <param name="getter">
            The getter.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.PageCachedServiceBase`1.GetPagedKeys``1(NKart.Core.Persistence.Repositories.IPagedRepository{`0,``0},Umbraco.Core.Persistence.Querying.IQuery{`0},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page.
            </summary>
            <param name="repository">
            The repository.
            </param>
            <param name="query">
            The query.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <typeparam name="TDto">
            The type of dto
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.PageCachedServiceBase`1.Search``1(NKart.Core.Persistence.Repositories.IPagedRepository{`0,``0},System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Performs a paged search based on a term
            </summary>
            <param name="repository">
            The repository.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <typeparam name="TDto">
            The type of <see cref="!:TDto"/>
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.PageCachedServiceBase`1.ValidateSortByField(System.String)">
            <summary>
            Validates the sort by string is a valid sort by field
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            A validated database field name.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.PaymentMethodService">
            <summary>
            Represents the PaymentMethodService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentMethodService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentMethodService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentMethodService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentMethodService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentMethodService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.CreatePaymentMethodWithKey(System.Guid,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Attempts to create a <see cref="T:NKart.Core.Models.IPaymentMethod"/> for a given provider.  If the provider already 
            defines a paymentCode, the creation fails.
            </summary>
            <param name="providerKey">The unique 'key' (Guid) of the TaxationGatewayProvider</param>
            <param name="name">The name of the payment method</param>
            <param name="description">The description of the payment method</param>
            <param name="paymentCode">The unique 'payment code' associated with the payment method.  (Eg. visa, mc)</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns><see cref="T:Umbraco.Core.Attempt"/> indicating whether or not the creation of the <see cref="T:NKart.Core.Models.IPaymentMethod"/> with respective success or fail</returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.Save(NKart.Core.Models.IPaymentMethod,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IPaymentMethod},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="paymentMethods">A collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.Delete(NKart.Core.Models.IPaymentMethod,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IPaymentMethod},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethods">The collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="key">The unique 'key' (Guid) of the <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.IPaymentMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.GetPaymentMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/> for a given PaymentGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the PaymentGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.GetPaymentMethodByPaymentCode(System.Guid,System.String)">
            <summary>
            Returns a <see cref="T:NKart.Core.Models.IPaymentMethod"/> given is't paymentCode 
            </summary>
            <param name="providerKey">The unique 'key' of the PaymentGatewayProvider</param>
            <param name="paymentCode">The paymentCode</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentMethodService.GetAll">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
        </member>
        <member name="E:NKart.Core.Services.PaymentMethodService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.PaymentMethodService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.PaymentMethodService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.PaymentMethodService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.PaymentMethodService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.PaymentMethodService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="T:NKart.Core.Services.PaymentService">
            <summary>
            Represents the PaymentService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.PaymentService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.PaymentService._appliedPaymentService">
            <summary>
            The applied payment service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider,NKart.Core.Services.IAppliedPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax
            </param>
            <param name="appliedPaymentService">
            The applied payment service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IAppliedPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="appliedPaymentService">
            The applied payment service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IAppliedPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="appliedPaymentService">
            The applied payment service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IAppliedPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.PaymentService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="appliedPaymentService">
            The applied payment service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.PaymentService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.PaymentService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.PaymentService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.PaymentService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.PaymentService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.PaymentService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.CreatePayment(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Creates a payment without saving it to the database
            </summary>
            <param name="paymentMethodType">The type of the payment method</param>
            <param name="amount">The amount of the payment</param>
            <param name="paymentMethodKey">The optional payment method Key</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>Returns <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.CreatePaymentWithKey(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Creates and saves a payment
            </summary>
            <param name="paymentMethodType">The type of the payment method</param>
            <param name="amount">The amount of the payment</param>
            <param name="paymentMethodKey">The optional payment Method Key</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>Returns <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.Save(NKart.Core.Models.IPayment,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IPayment},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="payments">A collection of <see cref="T:NKart.Core.Models.IPayment"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.Delete(NKart.Core.Models.IPayment,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IPayment},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="payments">
            The payments.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
            <param name="key">The unique 'key' (GUID) of the <see cref="T:NKart.Core.Models.IPayment"/></param>
            <returns><see cref="T:NKart.Core.Models.IPaymentMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IProduct"/> objects given a list of Unique keys
            </summary>
            <param name="keys">List of GUID keys for Product objects to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IProduct"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.GetPaymentsByPaymentMethodKey(System.Nullable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> for a given PaymentGatewayProvider
            </summary>
            <param name="paymentMethodKey">The unique 'key' of the PaymentGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.GetPaymentsByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> for a given invoice
            </summary>
            <param name="invoiceKey">The unique 'key' of the invoice</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.GetPaymentsByCustomerKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> by customer key.
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IPayment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.ApplyPaymentToInvoice(System.Guid,System.Guid,NKart.Core.AppliedPaymentType,System.String,System.Decimal,System.Boolean)">
            <summary>
            Creates and saves an AppliedPayment
            </summary>
            <param name="paymentKey">The payment key</param>
            <param name="invoiceKey">The invoice 'key'</param>
            <param name="appliedPaymentType">The applied payment type</param>
            <param name="description">The description of the payment application</param>
            <param name="amount">The amount of the payment to be applied</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>An <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.Save(NKart.Core.Models.IAppliedPayment,System.Boolean)">
            <summary>
            Saves an <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.Delete(NKart.Core.Models.IAppliedPayment,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAppliedPayment},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayments">The collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.GetAppliedPaymentsByPaymentKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the payment key
            </summary>
            <param name="paymentKey">The payment key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.GetAppliedPaymentsByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the invoice key
            </summary>
            <param name="invoiceKey">The invoice key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.CreatePaymentWithKey(System.Guid,System.Decimal,System.Nullable{System.Guid},System.Boolean)">
            <summary>
            Creates and saves a payment
            </summary>
            <param name="paymentTfKey">The payment typefield key</param>
            <param name="amount">The amount of the payment</param>
            <param name="paymentMethodKey">The optional paymentMethodKey</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>Returns <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.PaymentService.GetAll">
            <summary>
            Gets all payments.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
            <remarks>
            Used for testing
            </remarks>
        </member>
        <member name="T:NKart.Core.Services.ProductOptionService">
            <summary>
            Represents a product option service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ProductOptionService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductOptionService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductOptionService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductOptionService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductOptionService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductOptionService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.ProductOptionService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductOptionService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductOptionService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductOptionService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductOptionService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.ProductOptionService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.CreateProductOption(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IProductOption"/> without saving it to the database.
            </summary>
            <param name="name">
            The option name.
            </param>
            <param name="shared">
            A value indicating whether or not this is a shared option (usable by multiple products).
            </param>
            <param name="required">
            The required.
            </param>
            <param name="raiseEvents">
             Optional boolean indicating whether or not to raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.CreateProductOptionWithKey(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IProductOption"/> and saves it to the database.
            </summary>
            <param name="name">
            The option name.
            </param>
            <param name="shared">
            A value indicating whether or not this is a shared option (usable by multiple products).
            </param>
            <param name="required">
            The required.
            </param>
            <param name="raiseEvents">
             Optional boolean indicating whether or not to raise events.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.GetProductAttributeByKey(System.Guid)">
            <summary>
            Gets a product attribute by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductAttribute"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.GetProductAttributes(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets <see cref="T:NKart.Core.Models.IProductAttribute"/> by a an array of keys.
            </summary>
            <param name="keys">
            The collection attribute keys.
            </param>
            <returns>
            The collection of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.Save(NKart.Core.Models.IProductOption,System.Boolean)">
            <summary>
            Saves a single product option.
            </summary>
            <param name="option">
            The option to be saved
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductOption},System.Boolean)">
            <summary>
            Saves a collection of product options
            </summary>
            <param name="options">
            The collection of product options to be saved
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.Delete(NKart.Core.Models.IProductOption,System.Boolean)">
            <summary>
            Deletes a product option
            </summary>
            <param name="option">
            The option to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
            <remarks>
            This performs a check to ensure the option is valid to be deleted
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IProductOption"/> by it's key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductOption"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductOption"/> by a list of keys.
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.GetProductOptionUseCount(NKart.Core.Models.IProductOption)">
            <summary>
            Gets the usage information about the product option.
            </summary>
            <param name="option">
            The option.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Counting.IProductOptionUseCount"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.GetProductOptionShareCount(NKart.Core.Models.IProductOption)">
            <summary>
            Gets the number of occurrences that an option has been shared.
            </summary>
            <param name="option">
            The option.
            </param>
            <returns>
            The count of option shares.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="sharedOnly">
            Limit to only shared options.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.GetPage(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IProductOption"/>.
            </summary>
            <param name="term">
            A search term to filter by
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <param name="sharedOnly">
            Limit to only shared options.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.Save(NKart.Core.Models.IProductAttribute)">
            <summary>
            Updates an attribute.
            </summary>
            <param name="attribute">
            The attribute.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductOption},System.Boolean)">
            <summary>
            Deletes a collection of product options
            </summary>
            <param name="options">
            The collection of product options to be deleted
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events.
            </param>
            <remarks>
            This performs a check to ensure the option is valid to be deleted
            
            THIS is INTERNAL due to sharing policies
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.GetAll">
            <summary>
            Gets all the product options.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductOptionService.EnsureSafeOptionDelete(NKart.Core.Models.IProductOption)">
            <summary>
            Ensures the option is safe to delete.
            </summary>
            <param name="option">
            The option.
            </param>
            <returns>
            A value indicating whether or not the option can be deleted.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.TaxMethodService">
            <summary>
            The tax method service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.TaxMethodService.Locker">
            <summary>
            The thread locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.TaxMethodService._storeSettingService">
            <summary>
            The store setting service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.TaxMethodService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.TaxMethodService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.TaxMethodService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.TaxMethodService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.TaxMethodService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.TaxMethodService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.TaxMethodService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.TaxMethodService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.TaxMethodService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.TaxMethodService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.TaxMethodService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.Save(NKart.Core.Models.ITaxMethod,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethod">The <see cref="T:NKart.Core.Models.ITaxMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.ITaxMethod},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="countryTaxRateList">A collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.Delete(NKart.Core.Models.ITaxMethod,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethod">The <see cref="T:NKart.Core.Models.ITaxMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.ITaxMethod},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethods">The collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="key">The unique 'key' (GUID) of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.GetAll">
            <summary>
            Gets the collection of all tax methods
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.GetTaxMethodByCountryCode(System.Guid,System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/> based on a provider and country code
            </summary>
            <param name="providerKey">The unique 'key' of the <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/></param>
            <param name="countryCode">The country code of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.GetTaxMethodForProductPricing">
            <summary>
            Get tax method for product pricing.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/> or null if no tax method is found
            </returns>
            <remarks>
            There can be only one =)
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.GetTaxMethodsByCountryCode(System.String)">
            <summary>
            Gets a collection <see cref="T:NKart.Core.Models.ITaxMethod"/> based on a provider and country code
            </summary>
            <param name="countryCode">The country code of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
            <remarks>
            
            There should only ever be one - but we've left this open
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.GetTaxMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> for a given TaxationGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the TaxationGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.CreateTaxMethodWithKey(System.Guid,System.String,System.Decimal,System.Boolean)">
            <summary>
            Attempts to create a <see cref="T:NKart.Core.Models.ITaxMethod"/> for a given provider and country.  If the provider already 
            defines a tax rate for the country, the creation fails.
            </summary>
            <param name="providerKey">The unique 'key' (GUID) of the TaxationGatewayProvider</param>
            <param name="countryCode">The two character ISO country code</param>
            <param name="percentageTaxRate">The tax rate in percentage for the country</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns><see cref="T:Umbraco.Core.Attempt"/> indicating whether or not the creation of the <see cref="T:NKart.Core.Models.ITaxMethod"/> with respective success or fail</returns>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.CreateTaxMethodWithKey(System.Guid,NKart.Core.Models.ICountry,System.Decimal,System.Boolean)">
            <summary>
            The create tax method with key.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="country">
            The country.
            </param>
            <param name="percentageTaxRate">
            The percentage tax rate.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.GetTaxMethodName(NKart.Core.Models.ITaxMethod)">
            <summary>
            The get tax method name.
            </summary>
            <param name="taxMethod">
            The tax method.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.TaxMethodService.CountryTaxRateExists(System.Guid,System.String)">
            <summary>
            The country tax rate exists.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="countryCode">
            The country code.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.GatewayProviderService">
            <summary>
            Represents the GatewayProviderService
            </summary>    
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.GatewayProviderService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.GatewayProviderService"/> class. 
            Constructor
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.#ctor(Umbraco.Core.Logging.ILogger,NKart.Core.Persistence.RepositoryFactory,NKart.Core.Services.IShipMethodService,NKart.Core.Services.IShipRateTierService,NKart.Core.Services.IShipCountryService,NKart.Core.Services.IInvoiceService,NKart.Core.Services.IOrderService,NKart.Core.Services.ITaxMethodService,NKart.Core.Services.IPaymentService,NKart.Core.Services.IPaymentMethodService,NKart.Core.Services.INotificationMethodService,NKart.Core.Services.INotificationMessageService,NKart.Core.Services.IWarehouseService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.GatewayProviderService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="shipMethodService">
            The ship method service.
            </param>
            <param name="shipRateTierService">
            The ship rate tier service.
            </param>
            <param name="shipCountryService">
            The ship country service.
            </param>
            <param name="invoiceService">
            The invoice service.
            </param>
            <param name="orderService">
            The order service.
            </param>
            <param name="taxMethodService">
            The tax method service.
            </param>
            <param name="paymentService">
            The payment service.
            </param>
            <param name="paymentMethodService">
            The payment method service.
            </param>
            <param name="notificationMethodService">
            The notification method service.
            </param>
            <param name="notificationMessageService">
            The notification message service.
            </param>
            <param name="warehouseService">
            The warehouse service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.GatewayProviderService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.GatewayProviderService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.GatewayProviderService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.GatewayProviderService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.IGatewayProviderSettings,System.Boolean)">
            <summary>
            Saves a single instance of a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="gatewayProviderSettings"></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Delete(NKart.Core.Models.IGatewayProviderSettings,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="gatewayProviderSettings"></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IGatewayProviderSettings},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="gatewayProviderList"></param>
            <param name="raiseEvents"></param>
            <remarks>
            Used for testing
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetGatewayProviderByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by it's unique 'Key' (Guid)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetGatewayProvidersByType(NKart.Core.GatewayProviderType)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by its type (Shipping, Taxation, Payment)
            </summary>
            <param name="gatewayProviderType"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetGatewayProvidersByShipCountry(NKart.Core.Models.IShipCountry)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by ship country
            </summary>
            <param name="shipCountry"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetAllGatewayProviders">
            <summary>
            Gets a collection containing all <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetAppliedPaymentsByPaymentKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the payment key
            </summary>
            <param name="paymentKey">The payment key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetAppliedPaymentsByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the invoice key
            </summary>
            <param name="invoiceKey">The invoice key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.IAppliedPayment)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.IInvoice)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to save</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.CreatePaymentMethodWithKey(System.Guid,System.String,System.String,System.String)">
            <summary>
            Attempts to create a <see cref="T:NKart.Core.Models.IPaymentMethod"/> for a given provider.  If the provider already 
            defines a paymentCode, the creation fails.
            </summary>
            <param name="providerKey">The unique 'key' (Guid) of the TaxationGatewayProvider</param>
            <param name="name">The name of the payment method</param>
            <param name="description">The description of the payment method</param>
            <param name="paymentCode">The unique 'payment code' associated with the payment method.  (Eg. visa, mc)</param>
            <returns><see cref="T:Umbraco.Core.Attempt"/> indicating whether or not the creation of the <see cref="T:NKart.Core.Models.IPaymentMethod"/> with respective success or fail</returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be saved</param>        
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Delete(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be deleted</param> 
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetPaymentMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/> for a given PaymentGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the PaymentGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.CreatePayment(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid})">
            <summary>
            Creates a payment without saving it to the database
            </summary>
            <param name="paymentMethodType">The type of the paymentmethod</param>
            <param name="amount">The amount of the payment</param>
            <param name="paymentMethodKey">The optional paymentMethodKey</param>
            <returns>Returns <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.CreatePaymentWithKey(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid})">
            <summary>
            Creates and saves a payment
            </summary>
            <param name="paymentMethodType">The type of the paymentmethod</param>
            <param name="amount">The amount of the payment</param>
            <param name="paymentMethodKey">The optional paymentMethodKey</param>
            <returns>Returns <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.IPayment)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.ApplyPaymentToInvoice(System.Guid,System.Guid,NKart.Core.AppliedPaymentType,System.String,System.Decimal)">
            <summary>
            Creates and saves an AppliedPayment
            </summary>
            <param name="paymentKey">The payment key</param>
            <param name="invoiceKey">The invoice 'key'</param>
            <param name="appliedPaymentType">The applied payment type</param>
            <param name="description">The description of the payment application</param>
            <param name="amount">The amount of the payment to be applied</param>
            <returns>An <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetPaymentsForInvoice(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> for a given invoice
            </summary>
            <param name="invoiceKey">The unique 'key' of the invoice</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.CreateNotificationMethodWithKey(System.Guid,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMethod"/> and saves it to the database
            </summary>
            <param name="providerKey">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key</param>
            <param name="name">The name of the notification (used in back office)</param>
            <param name="serviceCode">The notification service code</param>
            <returns>An Attempt{<see cref="T:NKart.Core.Models.INotificationMethod"/>}</returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.INotificationMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Models.INotificationMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Delete(NKart.Core.Models.INotificationMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Models.INotificationMethod"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.CreateNotificationMessageWithKey(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMessage"/> and saves it to the database
            </summary>
            <param name="methodKey">The <see cref="T:NKart.Core.Models.INotificationMethod"/> key</param>
            <param name="name">The name of the message (primarily used in the back office UI)</param>
            <param name="description">The name of the message (primarily used in the back office UI)</param>
            <param name="fromAddress">The senders or "from" address</param>
            <param name="recipients">A collection of recipient address</param>
            <param name="bodyText">The body text of the message</param>
            <returns>Attempt{INotificationMessage}</returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.INotificationMessage)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to save</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Delete(NKart.Core.Models.INotificationMessage)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetNotificationMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMethod"/> for a give NotificationGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the NotificationGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.INotificationMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetNotificationMessagesByMethodKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/> associated with a <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethodKey">The key (Guid) of the <see cref="T:NKart.Core.Models.INotificationMethod"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetNotificationMessageByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.INotificationMethod"/> by it's unique key(Guid)
            </summary>
            <param name="notificationMessageKey">The unique key (Guid) of the <see cref="T:NKart.Core.Models.INotificationMessage"/></param>
            <returns>A <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetNotificationMessagesByMonitorKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s based on a monitor key
            </summary>
            <param name="monitorKey">The Notification Monitor Key (Guid)</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.CreateShipMethodWithKey(System.Guid,NKart.Core.Models.IShipCountry,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IShipMethod"/>.  This is useful due to the data constraint
            preventing two ShipMethods being created with the same ShipCountry and ServiceCode for any provider.
            </summary>
            <param name="providerKey">The unique gateway provider key (Guid)</param>
            <param name="shipCountry">The <see cref="T:NKart.Core.Models.IShipCountry"/> this ship method is to be associated with</param>
            <param name="name">The required name of the <see cref="T:NKart.Core.Models.IShipMethod"/></param>
            <param name="serviceCode">The ShipMethods service code</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.IShipMethod)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethod"></param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipMethod})">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethodList">Collection of <see cref="T:NKart.Core.Models.IShipMethod"/></param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Delete(NKart.Core.Models.IShipMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethod"></param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetShipMethodsByShipCountryKey(System.Guid,System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipMethod"/> objects given a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key and a <see cref="T:NKart.Core.Models.IShipCountry"/> key
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetShipMethodsByShipCountryKey(System.Guid)">
            <summary>
            Gets a list of all <see cref="T:NKart.Core.Models.IShipMethod"/> objects given a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetShipMethodByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipMethod"/> by it's unique key
            </summary>
            <param name="shipMethodKey">The <see cref="T:NKart.Core.Models.IShipMethod"/> key</param>
            <returns>A <see cref="T:NKart.Core.Models.IShipMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetAllShipMethods">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IShipMethod"/>.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.IShipRateTier)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTier"></param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipRateTier})">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTierList"></param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Delete(NKart.Core.Models.IShipRateTier)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTier"></param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetShipRateTiersByShipMethodKey(System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipRateTier"/> objects given a <see cref="T:NKart.Core.Models.IShipMethod"/> key
            </summary>
            <param name="shipMethodKey">Guid</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipRateTier"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetShipCountryByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipCountry"/> by it's unique key (Guid)
            </summary>
            <param name="shipCountryKey">The unique key of the <see cref="T:NKart.Core.Models.IShipCountry"/></param>
            <returns>The <see cref="T:NKart.Core.Models.IShipCountry"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetShipCountry(System.Guid,System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipCountry"/> by CatalogKey and CountryCode
            </summary>
            <param name="catalogKey">The unique key of the <see cref="T:NKart.Core.Models.IWarehouseCatalog"/></param>
            <param name="countryCode">The two character ISO country code</param>
            <returns>An <see cref="T:NKart.Core.Models.IShipCountry"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetAllShipCountries">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IShipCountry"/>
            </summary>
            <returns>A collection of all <see cref="T:NKart.Core.Models.IShipCountry"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetAllInvoiceStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IInvoiceStatus"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetAllOrderStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IOrderStatus"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.CreateTaxMethodWithKey(System.Guid,System.String,System.Decimal)">
            <summary>
            Attempts to create a <see cref="T:NKart.Core.Models.ITaxMethod"/> for a given provider and country.  If the provider already 
            defines a tax rate for the country, the creation fails.
            </summary>
            <param name="providerKey">The unique 'key' (Guid) of the TaxationGatewayProvider</param>
            <param name="countryCode">The two character ISO country code</param>
            <param name="percentageTaxRate">The tax rate in percentage for the country</param>
            <returns><see cref="T:Umbraco.Core.Attempt"/> indicating whether or not the creation of the <see cref="T:NKart.Core.Models.ITaxMethod"/> with respective success or fail</returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetTaxMethodByCountryCode(System.Guid,System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/> based on a provider and country code
            </summary>
            <param name="providerKey">The unique 'key' of the <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/></param>
            <param name="countryCode">The country code of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetTaxMethodForProductPricing">
            <summary>
            Get tax method for product pricing.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/> or null if no tax method is found
            </returns>
            <remarks>
            There can be only one =)
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetTaxMethodsByCountryCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/> based on a provider and country code
            </summary>
            <param name="countryCode">The country code of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns>A collection <see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Save(NKart.Core.Models.ITaxMethod)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethod">The <see cref="T:NKart.Core.Models.ITaxMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.Delete(NKart.Core.Models.ITaxMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethod">The <see cref="T:NKart.Core.Models.ITaxMethod"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Services.GatewayProviderService.GetTaxMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> for a given TaxationGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the TaxationGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="T:NKart.Core.Services.ITaxMethodService">
            <summary>
            Defines the TaxMethodService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.Save(NKart.Core.Models.ITaxMethod,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethod">The <see cref="T:NKart.Core.Models.ITaxMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.ITaxMethod},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="countryTaxRateList">A collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.Delete(NKart.Core.Models.ITaxMethod,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethod">The <see cref="T:NKart.Core.Models.ITaxMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.ITaxMethod},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethods">The collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="key">The unique 'key' (Guid) of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.GetAll">
            <summary>
            The get all.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.GetTaxMethodByCountryCode(System.Guid,System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/> based on a provider and country code
            </summary>
            <param name="providerKey">The unique 'key' of the <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/></param>
            <param name="countryCode">The country code of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.GetTaxMethodForProductPricing">
            <summary>
            Get tax method for product pricing.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/> or null if no tax method is found
            </returns>
            <remarks>
            There can be only one =)
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.GetTaxMethodsByCountryCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/> based on a provider and country code
            </summary>
            <param name="countryCode">The country code of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ITaxMethodService.GetTaxMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> for a given TaxationGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the TaxationGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="T:NKart.Core.Services.IGatewayProviderService">
            <summary>
            Defines the GatewayProviderService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.IGatewayProviderSettings,System.Boolean)">
            <summary>
            Saves a single instance of a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="gatewayProviderSettings"></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Delete(NKart.Core.Models.IGatewayProviderSettings,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="gatewayProviderSettings"></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetGatewayProviderByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by it's unique 'Key' (Guid)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetGatewayProvidersByType(NKart.Core.GatewayProviderType)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by its type (Shipping, Taxation, Payment)
            </summary>
            <param name="gatewayProviderType"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetGatewayProvidersByShipCountry(NKart.Core.Models.IShipCountry)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by ship country
            </summary>
            <param name="shipCountry"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetAllGatewayProviders">
            <summary>
            Gets a collection containing all <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetAppliedPaymentsByPaymentKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the payment key
            </summary>
            <param name="paymentKey">The payment key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetAppliedPaymentsByInvoiceKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/>s by the invoice key
            </summary>
            <param name="invoiceKey">The invoice key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.IAppliedPayment)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IAppliedPayment"/>
            </summary>
            <param name="appliedPayment">The <see cref="T:NKart.Core.Models.IAppliedPayment"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.IInvoice)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to save</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.CreatePaymentMethodWithKey(System.Guid,System.String,System.String,System.String)">
            <summary>
            Attempts to create a <see cref="T:NKart.Core.Models.IPaymentMethod"/> for a given provider.  If the provider already 
            defines a paymentCode, the creation fails.
            </summary>
            <param name="providerKey">The unique 'key' (Guid) of the TaxationGatewayProvider</param>
            <param name="name">The name of the payment method</param>
            <param name="description">The description of the payment method</param>
            <param name="paymentCode">The unique 'payment code' associated with the payment method.  (Eg. visa, mc)</param>
            <returns><see cref="T:Umbraco.Core.Attempt"/> indicating whether or not the creation of the <see cref="T:NKart.Core.Models.IPaymentMethod"/> with respective success or fail</returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be saved</param>        
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Delete(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be deleted</param>        
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetPaymentMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/> for a given PaymentGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the PaymentGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPaymentMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.CreatePayment(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid})">
            <summary>
            Creates a payment without saving it to the database
            </summary>
            <param name="paymentMethodType">The type of the paymentmethod</param>
            <param name="amount">The amount of the payment</param>
            <param name="paymentMethodKey">The optional paymentMethodKey</param>
            <returns>Returns <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.CreatePaymentWithKey(NKart.Core.PaymentMethodType,System.Decimal,System.Nullable{System.Guid})">
            <summary>
            Creates and saves a payment
            </summary>
            <param name="paymentMethodType">The type of the paymentmethod</param>
            <param name="amount">The amount of the payment</param>
            <param name="paymentMethodKey">The optional paymentMethodKey</param>
            <returns>Returns <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.IPayment)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="payment">The <see cref="T:NKart.Core.Models.IPayment"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.ApplyPaymentToInvoice(System.Guid,System.Guid,NKart.Core.AppliedPaymentType,System.String,System.Decimal)">
            <summary>
            Creates and saves an AppliedPayment
            </summary>
            <param name="paymentKey">The payment key</param>
            <param name="invoiceKey">The invoice 'key'</param>
            <param name="appliedPaymentType">The applied payment type</param>
            <param name="description">The description of the payment application</param>
            <param name="amount">The amount of the payment to be applied</param>
            <returns>An <see cref="T:NKart.Core.Models.IAppliedPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetPaymentsForInvoice(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IPayment"/> for a given invoice
            </summary>
            <param name="invoiceKey">The unique 'key' of the invoice</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IPayment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.CreateNotificationMethodWithKey(System.Guid,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMethod"/> and saves it to the database
            </summary>
            <param name="providerKey">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key</param>
            <param name="name">The name of the notification (used in back office)</param>
            <param name="serviceCode">The notification service code</param>        
            <returns>An Attempt{<see cref="T:NKart.Core.Models.INotificationMethod"/>}</returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.INotificationMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Models.INotificationMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Delete(NKart.Core.Models.INotificationMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Models.INotificationMethod"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.CreateNotificationMessageWithKey(System.Guid,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMessage"/> and saves it to the database
            </summary>
            <param name="methodKey">The <see cref="T:NKart.Core.Models.INotificationMethod"/> key</param>
            <param name="name">The name of the message (primarily used in the back office UI)</param>
            <param name="description">The name of the message (primarily used in the back office UI)</param>
            <param name="fromAddress">The senders or "from" address</param>
            <param name="recipients">A collection of recipient address</param>
            <param name="bodyText">The body text of the message</param>
            <returns>Attempt{INotificationMessage}</returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.INotificationMessage)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to save</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Delete(NKart.Core.Models.INotificationMessage)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetNotificationMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMethod"/> for a give NotificationGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the NotificationGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.INotificationMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetNotificationMessagesByMethodKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/> associated with a <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="notificationMethodKey">The key (Guid) of the <see cref="T:NKart.Core.Models.INotificationMethod"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetNotificationMessageByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.INotificationMethod"/> by it's unique key(Guid)
            </summary>
            <param name="notificationMessageKey">The unique key (Guid) of the <see cref="T:NKart.Core.Models.INotificationMessage"/></param>
            <returns>A <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetNotificationMessagesByMonitorKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s based on a monitor key
            </summary>
            <param name="monitorKey">The Notification Monitor Key (Guid)</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.CreateShipMethodWithKey(System.Guid,NKart.Core.Models.IShipCountry,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IShipMethod"/>.  This is useful due to the data constraint
            preventing two ShipMethods being created with the same ShipCountry and ServiceCode for any provider.
            </summary>
            <param name="providerKey">The unique gateway provider key (Guid)</param>
            <param name="shipCountry">The <see cref="T:NKart.Core.Models.IShipCountry"/> this ship method is to be associated with</param>
            <param name="name">The required name of the <see cref="T:NKart.Core.Models.IShipMethod"/></param>
            <param name="serviceCode">The ShipMethods service code</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.IShipMethod)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethod"></param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipMethod})">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethodList">Collection of <see cref="T:NKart.Core.Models.IShipMethod"/></param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Delete(NKart.Core.Models.IShipMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethod"></param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetShipMethodsByShipCountryKey(System.Guid,System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipMethod"/> objects given a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key and a <see cref="T:NKart.Core.Models.IShipCountry"/> key
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetShipMethodsByShipCountryKey(System.Guid)">
            <summary>
            Gets a list of all <see cref="T:NKart.Core.Models.IShipMethod"/> objects given a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetShipMethodByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipMethod"/> by it's unique key
            </summary>
            <param name="shipMethodKey">The <see cref="T:NKart.Core.Models.IShipMethod"/> key</param>
            <returns>A <see cref="T:NKart.Core.Models.IShipMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetAllShipMethods">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IShipMethod"/>s.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.IShipRateTier)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTier"></param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipRateTier})">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTierList"></param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Delete(NKart.Core.Models.IShipRateTier)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTier"></param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetShipRateTiersByShipMethodKey(System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipRateTier"/> objects given a <see cref="T:NKart.Core.Models.IShipMethod"/> key
            </summary>
            <param name="shipMethodKey">Guid</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipRateTier"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetShipCountryByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipCountry"/> by it's unique key (Guid)
            </summary>
            <param name="shipCountryKey">The unique key of the <see cref="T:NKart.Core.Models.IShipCountry"/></param>
            <returns>The <see cref="T:NKart.Core.Models.IShipCountry"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetShipCountry(System.Guid,System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipCountry"/> by CatalogKey and CountryCode
            </summary>
            <param name="catalogKey">The unique key of the <see cref="T:NKart.Core.Models.IWarehouseCatalog"/></param>
            <param name="countryCode">The two character ISO country code</param>
            <returns>An <see cref="T:NKart.Core.Models.IShipCountry"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetAllShipCountries">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IShipCountry"/>
            </summary>
            <returns>A collection of all <see cref="T:NKart.Core.Models.IShipCountry"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetAllInvoiceStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IInvoiceStatus"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetAllOrderStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IOrderStatus"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.CreateTaxMethodWithKey(System.Guid,System.String,System.Decimal)">
            <summary>
            Attempts to create a <see cref="T:NKart.Core.Models.ITaxMethod"/> for a given provider and country.  If the provider already 
            defines a tax rate for the country, the creation fails.
            </summary>
            <param name="providerKey">The unique 'key' (GUID) of the TaxationGatewayProvider</param>
            <param name="countryCode">The two character ISO country code</param>
            <param name="percentageTaxRate">The tax rate in percentage for the country</param>
            <returns><see cref="T:Umbraco.Core.Attempt"/> indicating whether or not the creation of the <see cref="T:NKart.Core.Models.ITaxMethod"/> with respective success or fail</returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetTaxMethodByCountryCode(System.Guid,System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/> based on a provider and country code
            </summary>
            <param name="providerKey">The unique 'key' of the <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/></param>
            <param name="countryCode">The country code of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns>A collection <see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetTaxMethodForProductPricing">
            <summary>
            Get tax method for product pricing.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/> or null if no tax method is found
            </returns>
            <remarks>
            There can be only one =)
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetTaxMethodsByCountryCode(System.String)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> based on a provider and country code
            </summary>
            <param name="countryCode">The country code of the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <returns><see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Save(NKart.Core.Models.ITaxMethod)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethod">The <see cref="T:NKart.Core.Models.ITaxMethod"/> to be saved</param>        
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.Delete(NKart.Core.Models.ITaxMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxMethod">The <see cref="T:NKart.Core.Models.ITaxMethod"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetTaxMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> for a given TaxationGatewayProvider
            </summary>
            <param name="providerKey">The unique 'key' of the TaxationGatewayProvider</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IGatewayProviderService.GetDefaultWarehouse">
            <summary>
            Gets the default <see cref="T:NKart.Core.Models.IWarehouse"/>
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouse"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IInvoiceService">
            <summary>
            Defines the InvoiceService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.CreateInvoice(System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IInvoice"/> without saving it to the database
            </summary>
            <param name="invoiceStatusKey">The <see cref="T:NKart.Core.Models.IInvoiceStatus"/> key</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns><see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.CreateInvoice(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IInvoice"/> with an assigned invoice number without saving it to the database
            </summary>
            <param name="invoiceStatusKey">
            The <see cref="T:NKart.Core.Models.IInvoiceStatus"/> key
            </param>
            <param name="invoiceNumber">
            The invoice Number
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            <see cref="T:NKart.Core.Models.IInvoice"/>
            </returns>
            <remarks>
            Invoice number must be a positive integer value or zero
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.Save(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoice},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoices">The collection of <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.Delete(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoice},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoices">The collection of <see cref="T:NKart.Core.Models.IInvoice"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IInvoice"/> given it's unique 'key' (GUID)
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IInvoice"/>'s unique 'key' (GUID)</param>
            <returns><see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetByInvoiceNumber(System.Int32)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IInvoice"/> given it's unique 'InvoiceNumber'
            </summary>
            <param name="invoiceNumber">The invoice number of the <see cref="T:NKart.Core.Models.IInvoice"/> to be retrieved</param>
            <returns><see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IInvoice"/> objects given a list of Keys
            </summary>
            <param name="keys">List of GUID 'key' for the invoices to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetInvoicesByPaymentKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IInvoice"/> objects that are associated with a <see cref="T:NKart.Core.Models.IPayment"/> by the payments 'key'
            </summary>
            <param name="paymentKey">The <see cref="T:NKart.Core.Models.IPayment"/> key (GUID)</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetInvoicesByCustomerKey(System.Guid)">
            <summary>
            Get invoices by a customer key.
            </summary>
            <param name="customeryKey">
            The customer key.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetInvoicesByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Get a collection invoices by date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.CountInvoices">
            <summary>
            Gets the total count of all invoices
            </summary>
            <returns>
            The <see cref="T:System.Int32"/> representing the count of invoices.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.CountInvoices(System.DateTime,System.DateTime)">
            <summary>
            Gets the total count of all invoices within a date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> representing the count of invoices.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.CountInvoices(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoiceStatus})">
            <summary>
            Gets the total count of all invoices within a date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="invoiceStatuses">
            The invoice statuses.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> representing the count of invoices.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.CountInvoices(System.DateTime,System.DateTime,NKart.Core.CustomerType)">
            <summary>
            The count invoices by customer type
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="customerType">
            The customer type.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.SumInvoiceTotals(System.DateTime,System.DateTime,System.String)">
            <summary>
            Gets the totals of invoices in a date range for a specific currency code.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <returns>
            The sum of the invoice totals.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.SumInvoiceTotals(System.DateTime,System.DateTime,System.String,System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoiceStatus})">
            <summary>
            Gets the totals of invoices in a date range for a specific currency code.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="invoiceStatuses">
            The invoice statuses.
            </param>
            <returns>
            The sum of the invoice totals.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.SumLineItemTotalsBySku(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Gets the total of line items for a give SKU invoiced in a specific currency across the date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <returns>
            The total of line items for a give SKU invoiced in a specific currency across the date range.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetDistinctCurrencyCodes">
            <summary>
            Gets distinct currency codes used in invoices.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetInvoiceOrderShipment(System.Guid)">
            <summary>
            Gets a InvoiceOrderShipment structure
            </summary>
            <param name="invoiceId"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetInvoiceStatusByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IInvoiceStatus"/> by it's key
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IInvoiceStatus"/> key</param>
            <returns><see cref="T:NKart.Core.Models.IInvoiceStatus"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IInvoiceService.GetAllInvoiceStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IInvoiceStatus"/>
            </summary>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IInvoiceStatus"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IItemCacheService">
            <summary>
            Defines the CustomerRegistryService, which provides access to operations involving <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetItemCacheWithKey(NKart.Core.Models.ICustomerBase,NKart.Core.ItemCacheType)">
            <summary>
            Creates an item cache (or retrieves an existing one) based on type and saves it to the database
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="itemCache">
            The item Cache.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetItemCacheWithKey(NKart.Core.Models.ICustomerBase,NKart.Core.ItemCacheType,System.Guid)">
            <summary>
            Creates an item cache (or retrieves an existing one) based on type and saves it to the database
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="itemCacheType">
            The item Cache Type.
            </param>
            <param name="versionKey">
            The version Key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetItemCaches(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IItemCache"/> for by an entity Key.
            </summary>
            <param name="entityKey">
            The entity key (usually the customer key).
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetEntityItemCaches(System.Guid,System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IItemCache"/> for by an entity Key (usually the customer key).
            </summary>
            <param name="entityKey">
            The entity key (usually the customer key).
            </param>
            <param name="itemCacheTfKey">
            The item cache type field Key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.Save(NKart.Core.Models.IItemCache,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IItemCache"/> object
            </summary>
            <param name="itemCache">The <see cref="T:NKart.Core.Models.IItemCache"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IItemCache},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IItemCache"/> objects
            </summary>
            <param name="itemCaches">The <see cref="T:NKart.Core.Models.IItemCache"/>s to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.Delete(NKart.Core.Models.IItemCache,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IItemCache"/> object
            </summary>
            <param name="itemCache"><see cref="T:NKart.Core.Models.IItemCache"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IItemCache},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IItemCache"/> objects
            </summary>
            <param name="itemCaches">Collection of <see cref="T:NKart.Core.Models.IItemCache"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IItemCache"/> object by its Id
            </summary>
            <param name="key">unique 'key' of the Address to retrieve</param>
            <returns><see cref="T:NKart.Core.Models.IItemCache"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetItemCacheByCustomer(NKart.Core.Models.ICustomerBase)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IItemCache"/> objects by the <see cref="T:NKart.Core.Models.ICustomerBase"/>
            </summary>
            <param name="customer">The customer associated with the <see cref="T:NKart.Core.Models.IItemCache"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IItemCache"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetItemCacheByCustomer(NKart.Core.Models.ICustomerBase,System.Guid)">
            <summary>
            Returns the consumer's registry of a given type
            </summary>
            <param name="customer">The <see cref="T:NKart.Core.Models.ICustomerBase"/></param>
            <param name="itemCacheTfKey"><see cref="T:NKart.Core.Models.TypeFields.ITypeField"/>.TypeKey</param>
            <returns><see cref="T:NKart.Core.Models.IItemCache"/></returns>
            <remarks>
            Public use of this method is intended to access ItemCacheType.Custom records
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetItemCacheByCustomer(NKart.Core.Models.ICustomerBase,NKart.Core.ItemCacheType)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IItemCache"/> object by the <see cref="T:NKart.Core.Models.ICustomerBase"/>
            </summary>
            <param name="customer">The <see cref="T:NKart.Core.Models.ICustomerBase"/> object</param>
            <param name="itemCacheType">The type of the <see cref="T:NKart.Core.Models.IItemCache"/></param>
            <returns><see cref="T:NKart.Core.Models.IItemCache"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetCustomerItemCachePage(NKart.Core.ItemCacheType,System.DateTime,System.DateTime,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
            <param name="itemCacheType">
            The item cache type.
            </param>
            <param name="startDate">
            The start Date.
            </param>
            <param name="endDate">
            The end Date.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IItemCache"/> objects given a list of Keys
            </summary>
            <param name="keys">List of GUID 'key' for customer registries to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IItemCache"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.Count(NKart.Core.ItemCacheType,NKart.Core.CustomerType)">
            <summary>
            Gets the count of of item caches for a customer type.
            </summary>
            <param name="itemCacheType">
            The item cache type.
            </param>
            <param name="customerType">
            The customer type.
            </param>
            <returns>
            The count of item caches.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IItemCacheService.Count(NKart.Core.ItemCacheType,NKart.Core.CustomerType,System.DateTime,System.DateTime)">
            <summary>
            Gets the count of of item caches for a customer type for a given date range.
            </summary>
            <param name="itemCacheType">
            The item cache type.
            </param>
            <param name="customerType">
            The customer type.
            </param>
            <param name="startDate">
            The start Date.
            </param>
            <param name="endDate">
            The end Date.
            </param>
            <returns>
            The count of item caches.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IProductService">
            <summary>
            Defines the ProductService, which provides access to operations involving <see cref="T:NKart.Core.Models.IProduct"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IProductService.CreateProduct(System.String,System.String,System.Decimal,System.Boolean)">
            <summary>
            Creates a Product without saving it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.CreateProductWithKey(System.String,System.String,System.Decimal,System.Boolean)">
            <summary>
            Creates a Product and saves it to the database
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.Save(NKart.Core.Models.IProduct,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IProductVariant"/> object
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IProductService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProduct},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IProduct"/> objects
            </summary>
            <param name="productList">Collection of <see cref="T:NKart.Core.Models.IProduct"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IProductService.Delete(NKart.Core.Models.IProduct,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IProduct"/> object
            </summary>
            <param name="product"><see cref="T:NKart.Core.Models.IProduct"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IProductService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProduct},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IProduct"/> objects
            </summary>
            <param name="productList">Collection of <see cref="T:NKart.Core.Models.IProduct"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetBySku(System.String)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IProduct"/> by it's unique SKU.
            </summary>
            <param name="sku">
            The product SKU.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IProduct"/> objects given a list of Unique keys
            </summary>
            <param name="keys">List of GUID keys for Product objects to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IProduct"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetAll">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IProduct"/>.
            </summary>
            <returns>
            The collection of all <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetProductVariantsByProductKey(System.Guid)">
            <summary>
            The get product variants by product key.
            </summary>
            <param name="productKey">
            The product key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetProductVariantByKey(System.Guid)">
            <summary>
            The get product variant by key.
            </summary>
            <param name="productVariantKey">
            The product variant key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetProductVariantBySku(System.String)">
            <summary>
            Get's a <see cref="T:NKart.Core.Models.IProductVariant"/> by it's unique SKU.
            </summary>
            <param name="sku">
            The SKU.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.ProductsCount">
            <summary>
            Returns the count of all products
            </summary>
            <returns>
            The count as an <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.SkuExists(System.String)">
            <summary>
            True/false indicating whether or not a SKU is already exists in the database
            </summary>
            <param name="sku">The SKU to be tested</param>
            <returns>A value indication whether or not the SKU exists</returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetKeyForSlug(System.String)">
            <summary>
            Gets the product key from the product slug
            </summary>
            <param name="slug"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.RemoveDetachedContent(NKart.Core.Models.IProduct,System.Guid,System.Boolean)">
            <summary>
            Removes detached content from the product.
            </summary>
            <param name="product">
            The product variants.
            </param>
            <param name="detachedContentTypeKey">
            The detached content type key
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IProductService.RemoveDetachedContent(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProduct},System.Guid,System.Boolean)">
            <summary>
            Removes detached content from the collection of products
            </summary>
            <param name="products">
            The product variants.
            </param>
            <param name="detachedContentTypeKey">
            The detached content type key
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetByDetachedContentType(System.Guid)">
            <summary>
            Gets a collect of products by detached content type.
            </summary>
            <param name="detachedContentTypeKey">
            The detached content type key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets an entity from a collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets distinct entities from a multiple collection.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets an entity from a collection filtered by a search term
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductService.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection,System.Boolean)">
            <summary>
            Gets an entity from multiple collections filtered by a search term
            </summary>
            <param name="collectionKeys">
            A collection of collection keys.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IProductVariantService">
            <summary>
            Defines a ProductVariantService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.CreateProductVariantWithKey(NKart.Core.Models.IProduct,NKart.Core.Models.ProductAttributeCollection,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IProductVariant"/> of the <see cref="T:NKart.Core.Models.IProduct"/> passed defined by the collection of <see cref="T:NKart.Core.Models.IProductAttribute"/>
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct"/></param>
            <param name="attributes">The <see cref="T:NKart.Core.Models.IProductVariant"/></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>Either a new <see cref="T:NKart.Core.Models.IProductVariant"/> or, if one already exists with associated attributes, the existing <see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.CreateProductVariantWithKey(NKart.Core.Models.IProduct,System.String,System.String,System.Decimal,NKart.Core.Models.ProductAttributeCollection,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IProductVariant"/> of the <see cref="T:NKart.Core.Models.IProduct"/> passed defined by the collection of <see cref="T:NKart.Core.Models.IProductAttribute"/>
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct"/></param>
            <param name="name">The name of the product variant</param>
            <param name="sku">The unique SKU of the product variant</param>
            <param name="price">The price of the product variant</param>
            <param name="attributes">The <see cref="T:NKart.Core.Models.IProductVariant"/></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>Either a new <see cref="T:NKart.Core.Models.IProductVariant"/> or, if one already exists with associated attributes, the existing <see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.Save(NKart.Core.Models.IProductVariant,System.Boolean)">
            <summary>
            Saves a single instance of a <see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
            <param name="productVariant">The <see cref="T:NKart.Core.Models.IProductVariant"/></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductVariant},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
            <param name="productVariantList">The collection of <see cref="T:NKart.Core.Models.IProductVariant"/> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.Delete(NKart.Core.Models.IProductVariant,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
            <param name="productVariant">The <see cref="T:NKart.Core.Models.IProductVariant"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductVariant},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IProductVariant"/>
            </summary>
            <param name="productVariantList">The collection of <see cref="T:NKart.Core.Models.IProductVariant"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.GetByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IProductVariant"/> object by its unique key
            </summary>
            <param name="key">key of the Product to retrieve</param>
            <returns><see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.GetAll">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </summary>
            <returns>
            The collection of all <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.GetBySku(System.String)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IProductVariant"/> object by it's unique SKU.
            </summary>
            <param name="sku">
            The SKU.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IProductVariant"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IProductVariant"/> objects given a list of Unique keys
            </summary>
            <param name="keys">List of keys for ProductVariant objects to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IProduct"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.GetByProductKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductVariant"/> objects for a given Product Key
            </summary>
            <param name="productKey">GUID product key of the <see cref="T:NKart.Core.Models.IProductVariant"/> collection to retrieve</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.GetByWarehouseKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IProductVariant"/> objects associated with a given warehouse 
            </summary>
            <param name="warehouseKey">The 'unique' key of the warehouse</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IProductVariant"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IProductVariantService.SkuExists(System.String)">
            <summary>
            True/false indicating whether or not a SKU is already exists in the database
            </summary>
            <param name="sku">
            The SKU to be tested
            </param>
            <returns>
            The <see cref="T:System.Boolean"/> indicating whether or not the SKU exists.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IServiceContext">
            <summary>
            Defines the ServiceContext, which provides access to the following services:
            <see cref="T:NKart.Core.Services.ICustomerService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.AuditLogService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IAuditLogService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.NoteService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IAuditLogService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.CustomerService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.ICustomerService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.DetachedContentTypeService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IDetachedContentTypeService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.DigitalMediaService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IDigitalMediaService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.EntityCollectionService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IEntityCollectionService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.GatewayProviderService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IGatewayProviderService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.InvoiceService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IInvoiceService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.ItemCacheService">
            <summary>
            Gets the <see cref="P:NKart.Core.Services.IServiceContext.ItemCacheService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.OrderService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IOrderService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.OfferSettingsService">
            <summary>
            Gets the offer settings service.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.PaymentService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IPaymentService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.ProductService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IProductService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.ProductOptionService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IProductOptionService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.ProductVariantService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IProductVariantService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.ShipCountryService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IShipCountryService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.StoreSettingService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IStoreSettingService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.ShipmentService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IShipmentService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.IServiceContext.WarehouseService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IWarehouseService"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Services.IShipCountryService">
            <summary>
            Defines the ShipCountryServcie
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IShipCountryService.Save(NKart.Core.Models.IShipCountry,System.Boolean)">
            <summary>
            Saves a single <see cref="!:shipCountry"/>
            </summary>
            <param name="shipCountry">
            The ship Country.
            </param>
            <param name="raiseEvents">
            The raise Events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IShipCountryService.Delete(NKart.Core.Models.IShipCountry,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IShipCountry"/> object
            </summary>
            <param name="shipCountry">
            The ship Country.
            </param>
            <param name="raiseEvents">
            The raise Events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IShipCountryService.GetByKey(System.Guid)">
            <summary>
            Gets a single <see cref="T:NKart.Core.Models.IShipCountry"/> by it's unique key (Guid pk)
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipCountry"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IShipCountryService.GetShipCountryByCountryCode(System.Guid,System.String)">
            <summary>
            Gets a single <see cref="T:NKart.Core.Models.IShipCountry"/>
            </summary>
            <param name="catalogKey">
            The warehouse catalog key (guid)
            </param>
            <param name="countryCode">
            The two letter ISO country code
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipCountry"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IShipCountryService.GetShipCountriesByCatalogKey(System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipCountry"/> objects given a <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> key
            </summary>
            <param name="catalogKey">The catalog key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipCountry"/></returns>
        </member>
        <member name="T:NKart.Core.Services.IShipMethodService">
            <summary>
            The ShipMethodService interface.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IShipMethodService.Save(NKart.Core.Models.IShipMethod,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethod">
            The ship Method.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IShipMethodService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipMethod},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethodList">Collection of <see cref="T:NKart.Core.Models.IShipMethod"/></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IShipMethodService.Delete(NKart.Core.Models.IShipMethod,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethod">
            The ship Method.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.IShipMethodService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipMethod},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethods">The collection of <see cref="T:NKart.Core.Models.IShipMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IShipMethodService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipMethod"/> given it's unique 'key' (Guid)
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IShipMethod"/>'s unique 'key' (Guid)</param>
            <returns><see cref="T:NKart.Core.Models.IShipMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IShipMethodService.GetShipMethodsByProviderKey(System.Guid,System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipMethod"/> objects given a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key and a <see cref="T:NKart.Core.Models.IShipCountry"/> key
            </summary>
            <param name="providerKey">
            The provider Key.
            </param>
            <param name="shipCountryKey">
            The ship Country Key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IShipMethodService.GetShipMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a list of all <see cref="T:NKart.Core.Models.IShipMethod"/> objects given a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key
            </summary>
            <param name="providerKey">
            The provider Key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IShipMethodService.GetAll">
            <summary>
            Gets all the <see cref="T:NKart.Core.Models.IShipMethod"/>.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IShipRateTierService">
            <summary>
            Defines the ShipRateTierService
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IShipRateTierService.Save(NKart.Core.Models.IShipRateTier,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTier">The <see cref="T:NKart.Core.Models.IShipRateTier"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.IShipRateTierService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipRateTier},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTierList">The collection of <see cref="T:NKart.Core.Models.IShipRateTier"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.IShipRateTierService.Delete(NKart.Core.Models.IShipRateTier,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTier">The <see cref="T:NKart.Core.Models.IShipRateTier"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.IShipRateTierService.GetShipRateTiersByShipMethodKey(System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipRateTier"/> objects given a <see cref="T:NKart.Core.Models.IShipMethod"/> key
            </summary>
            <param name="shipMethodKey">Guid</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipRateTier"/></returns>
        </member>
        <member name="T:NKart.Core.Services.IStoreSettingService">
            <summary>
            Defines the SettingsService, which provides access to operations involving configurable Merchello configurations and settings
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.CreateStoreSettingWithKey(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a store setting and persists it to the database
            </summary>
            <param name="name">The settings name</param>
            <param name="value">The settings value</param>
            <param name="typeName">The type name</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns><see cref="T:NKart.Core.Models.IStoreSetting"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.Save(NKart.Core.Models.IStoreSetting,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IStoreSetting"/> object
            </summary>
            <param name="storeSetting">The <see cref="T:NKart.Core.Models.IStoreSetting"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.Delete(NKart.Core.Models.IStoreSetting,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IStoreSetting"/>
            </summary>
            <param name="storeSetting">The store setting to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IStoreSetting"/> by it's unique 'Key'
            </summary>
            <param name="key">The store setting key</param>
            <returns>The <see cref="T:NKart.Core.Models.IStoreSetting"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetAll">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IStoreSetting"/>
            </summary>
            <returns>The collection of all <see cref="T:NKart.Core.Models.IStoreSetting"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetCountryByCode(System.String)">
            <summary>
            Returns the <see cref="T:NKart.Core.Models.ICountry"/> for the country code passed.
            </summary>
            <param name="countryCode">The two letter ISO Region code (country code)</param>
            <returns><see cref="T:NKart.Core.Models.ICountry"/> for the country corresponding the the country code passed</returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetAllCountries">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.ICountry"/>
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetAllCurrencies">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.ICurrency"/>
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetCurrencyByCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ICurrency"/> for the currency code passed
            </summary>
            <param name="currencyCode">The ISO Currency Code (ex. USD)</param>
            <returns>The <see cref="T:NKart.Core.Models.ICurrency"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetCurrencyFormat(NKart.Core.Models.ICurrency)">
            <summary>
            Returns the currency format
            </summary>
            <param name="currency">
            The <see cref="T:NKart.Core.Models.ICurrency"/>.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.ICurrencyFormat"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetAllCountries(System.String[])">
            <summary>
            Returns a <see cref="T:NKart.Core.Models.ICountry"/> collection for all countries excluding codes passed
            </summary>
            <param name="excludeCountryCodes">A collection of country codes to exclude from the result set</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.ICountry"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetNextInvoiceNumber(System.Int32)">
            <summary>
            Gets the next usable InvoiceNumber
            </summary>
            <param name="invoicesCount">
            The number of invoices.
            </param>
            <returns>
            The next invoice number
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetNextOrderNumber(System.Int32)">
            <summary>
            Gets the next usable OrderNumber
            </summary>
            <param name="ordersCount">The number of orders</param>
            <returns>The next order number</returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetNextShipmentNumber(System.Int32)">
            <summary>
            Gets the next usable ShipmentNumber.
            </summary>
            <param name="shipmentsCount">
            The shipments count.
            </param>
            <returns>
            The next shipment number.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IStoreSettingService.GetTypeFields">
            <summary>
            Gets the complete collection of registered type fields
            </summary>
            <returns>The collection of <see cref="T:NKart.Core.Models.TypeFields.ITypeField"/></returns>
        </member>
        <member name="T:NKart.Core.Services.IShipmentService">
            <summary>
            Defines the ShipmentService which provides access to shipment operations
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.CreateShipment(NKart.Core.Models.IShipmentStatus,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IShipment"/> without persisting it to the database.
            </summary>
            <param name="shipmentStatus">
            The shipment status.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.CreateShipment(NKart.Core.Models.IShipmentStatus,NKart.Core.Models.IAddress,NKart.Core.Models.IAddress,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IShipment"/> without persisting it to the database.
            </summary>
            <param name="shipmentStatus">
            The shipment status.
            </param>
            <param name="origin">
            The origin.
            </param>
            <param name="destination">
            The destination.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.CreateShipment(NKart.Core.Models.IShipmentStatus,NKart.Core.Models.IAddress,NKart.Core.Models.IAddress,NKart.Core.Models.LineItemCollection,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IShipment"/> without persisting it to the database.
            </summary>
            <param name="shipmentStatus">
            The shipment status.
            </param>
            <param name="origin">
            The origin.
            </param>
            <param name="destination">
            The destination.
            </param>
            <param name="items">
            The items.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.Save(NKart.Core.Models.IShipment,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipment"/> object
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipment},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipment"/> objects
            </summary>
            <param name="shipmentList">Collection of <see cref="T:NKart.Core.Models.IShipment"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.Delete(NKart.Core.Models.IShipment,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IShipment"/> object
            </summary>
            <param name="shipment"><see cref="T:NKart.Core.Models.IShipment"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipment},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IShipment"/> objects
            </summary>
            <param name="shipmentList">Collection of <see cref="T:NKart.Core.Models.IShipment"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.GetByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IShipment"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid pk of the Shipment to retrieve</param>
            <returns><see cref="T:NKart.Core.Models.IShipment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.GetShipmentsByShipMethodKey(System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipment"/> object given a ship method Key
            </summary>
            <param name="shipMethodKey">The pk of the shipMethod</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IShipment"/> objects given a list of Unique keys
            </summary>
            <param name="keys">List of Guid keys for Shipment objects to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IShipment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.GetShipmentsByOrderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IShipment"/> give an order key
            </summary>
            <param name="orderKey"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.GetShipmentStatusByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IShipmentStatus"/> by it's key
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IShipmentStatus"/> key</param>
            <returns><see cref="T:NKart.Core.Models.IShipmentStatus"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IShipmentService.GetAllShipmentStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IShipmentStatus"/>
            </summary>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IShipmentStatus"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.IWarehouseService">
            <summary>
            Defines the AddressService, which provides access to operations involving <see cref="T:NKart.Core.Models.IWarehouse"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.Save(NKart.Core.Models.IWarehouse,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IWarehouse"/> object
            </summary>
            <param name="warehouse">The <see cref="T:NKart.Core.Models.IWarehouse"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouse},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IWarehouse"/> objects
            </summary>
            <param name="warehouseList">Collection of <see cref="T:NKart.Core.Models.IWarehouse"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.GetDefaultWarehouse">
            <summary>
            Gets the default <see cref="T:NKart.Core.Models.IWarehouse"/>
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouse"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.GetByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IWarehouse"/> object by its 'UniqueId'
            </summary>
            <param name="key">key of the Warehouse to retrieve</param>
            <returns><see cref="T:NKart.Core.Models.IWarehouse"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IWarehouse"/> objects given a list of Unique keys
            </summary>
            <param name="keys">List of int Id for Warehouse objects to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IWarehouse"/></returns>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.CreateWarehouseCatalogWithKey(System.Guid,System.String,System.String)">
            <summary>
            Creates warehouse catalog and persists it to the database.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="description">
            The description.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.Save(NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalog">
            The warehouse catalog.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog})">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalogs">
            The warehouse catalogs.
            </param>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.Delete(NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalog">
            The warehouse catalog.
            </param>
            <remarks>
            Cannot delete the default catalog in the default warehouse
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog})">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalogs">
            The warehouse catalogs.
            </param>
            <remarks>
            Cannot delete the default catalog in the default warehouse
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.GetWarehouseCatalogByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.GetAllWarehouseCatalogs">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.IWarehouseService.GetWarhouseCatalogByWarehouseKey(System.Guid)">
            <summary>
            Get a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by warehouse key.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.InvoiceService">
            <summary>
            Represents the InvoiceService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.InvoiceService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.InvoiceService.ValidSortFields">
            <summary>
            The valid sort fields.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.InvoiceService._appliedPaymentService">
            <summary>
            The applied payment service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.InvoiceService._orderService">
            <summary>
            The order service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.InvoiceService._storeSettingService">
            <summary>
            The store setting service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.InvoiceService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.InvoiceService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.InvoiceService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IAppliedPaymentService,NKart.Core.Services.IOrderService,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.InvoiceService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="appliedPaymentService">
            The applied payment service.
            </param>
            <param name="orderService">
            The order service.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IAppliedPaymentService,NKart.Core.Services.IOrderService,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.InvoiceService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="appliedPaymentService">
            The applied payment service.
            </param>
            <param name="orderService">
            The order service.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IAppliedPaymentService,NKart.Core.Services.IOrderService,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.InvoiceService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="appliedPaymentService">
            The applied payment service.
            </param>
            <param name="orderService">
            The order service.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.InvoiceService.Creating">
            <summary>
            Occurs before the Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.InvoiceService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.InvoiceService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.InvoiceService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.InvoiceService.StatusChanging">
            <summary>
            Occurs before an invoice status has changed
            </summary>
        </member>
        <member name="E:NKart.Core.Services.InvoiceService.StatusChanged">
            <summary>
            Occurs after an invoice status has changed
            </summary>
        </member>
        <member name="E:NKart.Core.Services.InvoiceService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.InvoiceService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.CreateInvoice(System.Guid,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IInvoice"/> without saving it to the database
            </summary>
            <param name="invoiceStatusKey">The <see cref="T:NKart.Core.Models.IInvoiceStatus"/> key</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns><see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.CreateInvoice(System.Guid,System.Int32,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IInvoice"/> with an assigned invoice number without saving it to the database
            </summary>
            <param name="invoiceStatusKey">
            The <see cref="T:NKart.Core.Models.IInvoiceStatus"/> key
            </param>
            <param name="invoiceNumber">
            The invoice Number
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            <see cref="T:NKart.Core.Models.IInvoice"/>
            </returns>
            <remarks>
            Invoice number must be a positive integer value or zero
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.Save(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoice},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoices">The collection of <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.Delete(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoice},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoices">The collection of <see cref="T:NKart.Core.Models.IInvoice"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IInvoice"/> given it's unique 'key' (GUID)
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IInvoice"/>'s unique 'key' (GUID)</param>
            <returns><see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.Page`1"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetByInvoiceNumber(System.Int32)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IInvoice"/> given it's unique 'InvoiceNumber'
            </summary>
            <param name="invoiceNumber">The invoice number of the <see cref="T:NKart.Core.Models.IInvoice"/> to be retrieved</param>
            <returns><see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IInvoice"/> objects given a list of Keys
            </summary>
            <param name="keys">List of GUID 'key' for the invoices to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoicesByPaymentKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IInvoice"/> objects that are associated with a <see cref="T:NKart.Core.Models.IPayment"/> by the payments 'key'
            </summary>
            <param name="paymentKey">The <see cref="T:NKart.Core.Models.IPayment"/> key (GUID)</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoicesByCustomerKey(System.Guid)">
            <summary>
            Get invoices by a customer key.
            </summary>
            <param name="customeryKey">
            The customer key.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoicesByDateRange(System.DateTime,System.DateTime)">
            <summary>
            Gets the count of invoice by date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <returns>
            The count the invoices.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.CountInvoices">
            <summary>
            Gets the total count of all <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <returns>The count of <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.CountInvoices(System.DateTime,System.DateTime)">
            <summary>
            Gets the total count of all invoices within a date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> representing the count of invoices.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.CountInvoices(System.DateTime,System.DateTime,System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoiceStatus})">
            <summary>
            Gets the total count of all invoices within a date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="invoiceStatuses">
            The invoice statuses.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> representing the count of invoices.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.CountInvoices(System.DateTime,System.DateTime,NKart.Core.CustomerType)">
            <summary>
            Gets the total count of all invoices within a date range and customer type
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="customerType">
            The customer Type.
            </param>
            <returns>
            The <see cref="T:System.Int32"/> representing the count of invoices.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.SumInvoiceTotals(System.DateTime,System.DateTime,System.String)">
            <summary>
            Gets the totals of invoices in a date range for a specific currency code.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <returns>
            The sum of the invoice totals.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.SumInvoiceTotals(System.DateTime,System.DateTime,System.String,System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoiceStatus})">
            <summary>
            Gets the totals of invoices in a date range for a specific currency code.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="invoiceStatuses">
            The invoice statuses.
            </param>
            <returns>
            The sum of the invoice totals.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.SumLineItemTotalsBySku(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Gets the total of line items for a give SKU invoiced in a specific currency across the date range.
            </summary>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="currencyCode">
            The currency code.
            </param>
            <param name="sku">
            The SKU.
            </param>
            <returns>
            The total of line items for a give SKU invoiced in a specific currency across the date range.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetDistinctCurrencyCodes">
            <summary>
            Gets distinct currency codes used in invoices.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceOrderShipment(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceStatusByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IInvoiceStatus"/> by it's key
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IInvoiceStatus"/> key</param>
            <returns><see cref="T:NKart.Core.Models.IInvoiceStatus"/></returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetAllInvoiceStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IInvoiceStatus"/>
            </summary>
            <returns>
            The collection of invoice statuses.
            </returns>
            <remarks>
            TODO move this to an internal InvoiceStatusService
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.AddToCollection(NKart.Core.Models.IInvoice,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The add invoice to collection.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.AddToCollection(NKart.Core.Models.IInvoice,System.Guid)">
            <summary>
            The add invoice to collection.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.AddToCollection(System.Guid,System.Guid)">
            <summary>
            The add invoice to collection.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.RemoveFromCollection(NKart.Core.Models.IInvoice,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.RemoveFromCollection(NKart.Core.Models.IInvoice,System.Guid)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.RemoveFromCollection(System.Guid,System.Guid)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.ExistsInCollection(System.Guid,System.Guid)">
            <summary>
            Determines if an invoice exists in a collection.
            </summary>
            <param name="invoiceKey">
            The invoice key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.ExistsInCollection(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns true if the entity exists in the at least one of the static collections.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get invoices from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets distinct invoices from multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets distinct filtered invoices from multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetKeysFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get invoice keys from static collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetKeysFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetKeysNotInCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get invoice keys from static collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetKeysNotInCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoicesMatchingInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term and the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoicesMatchingTermNotInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term but not the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingTermNotInvoiceStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the invoice status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="invoiceStatusKey">
            The invoice status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoicesMatchingOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term and the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingOrderStatus(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status key.
            </summary>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingOrderStatuses(System.Collections.Generic.List{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status keys.
            </summary>
            <param name="orderStatusKeys">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingOrderStatuses(System.String,System.Collections.Generic.List{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term and the order status keys.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKeys">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoicesMatchingTermNotOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoices matching the search term but not the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingTermNotOrderStatus(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the order status key.
            </summary>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingTermNotOrderStatuses(System.Collections.Generic.List{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the order status keys.
            </summary>
            <param name="orderStatusKeys">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingTermNotOrderStatus(System.String,System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the order status key.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKey">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetInvoiceKeysMatchingTermNotOrderStatuses(System.String,System.Collections.Generic.List{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets invoice keys matching the search term but not the order status keys.
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="orderStatusKeys">
            The order status key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.AdjustInvoice(NKart.Core.Models.IInvoice,System.Collections.Generic.IEnumerable{NKart.Core.Models.IInvoiceLineItem})">
            <summary>
            Synchronizes invoice adjustments.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="adjustments">
            The adjustments.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.ReSyncInvoiceTotal(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Resyncs invoice total after line item changes
            </summary>
            <param name="applyTaxationMethod">
            If set to true, this will rework out the tax for the invoice and update the tax items
            </param>
            <param name="invoice"></param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.SetTaxableSetting(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Sets or resets the tax setting.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="taxable">
            The taxable.
            </param>
            <remarks>
            In cases where a product already includes the tax and we still need to calculate taxes for shipping
            and custom line items on the invoice we set the taxable setting on the products to false and then set them back
            to true after the tax calculation has been completed.
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetAll">
            <summary>
            Gets list of all <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <returns>
            The collection of all <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.Count(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IInvoice})">
            <summary>
            The count of invoices.
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetDefaultCurrencyCode">
            <summary>
            Gets the default currency code.
            </summary>
            <returns>
            The currency code saved in the store settings.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetPagedKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of Keys
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The order by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
            <remarks>
            This is used by large back office collections usually backed by Examine (Lucene) backed cache
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetPagedKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page by search term
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
            <remarks>
            The search is prefabricated in the repository
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetPagedKeys(System.String,System.DateTime,System.DateTime,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page by search term and a date range
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="startDate">
            The start date.
            </param>
            <param name="endDate">
            The end date.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
            <remarks>
            The search is prefabricated in the repository
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.GetPagedKeys(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IInvoice},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.ValidateSortByField(System.String)">
            <summary>
            Validates the sort by string is a valid sort by field
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            A validated database field name.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.DeleteOrders(NKart.Core.Models.IInvoice)">
            <summary>
            Deletes orders associated with the invoice
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
        </member>
        <member name="M:NKart.Core.Services.InvoiceService.DeleteAppliedPayments(NKart.Core.Models.IInvoice)">
            <summary>
            The delete applied payments.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
        </member>
        <member name="T:NKart.Core.Services.ItemCacheService">
            <summary>
            Represents the Customer Registry Service 
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ItemCacheService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ItemCacheService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ItemCacheService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ItemCacheService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ItemCacheService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ItemCacheService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.ItemCacheService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ItemCacheService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ItemCacheService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ItemCacheService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ItemCacheService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.ItemCacheService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetItemCacheWithKey(NKart.Core.Models.ICustomerBase,NKart.Core.ItemCacheType)">
            <summary>
            Creates a basket for a consumer with a given type
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="itemCacheType">
            The item Cache Type.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetItemCacheWithKey(NKart.Core.Models.ICustomerBase,NKart.Core.ItemCacheType,System.Guid)">
            <summary>
            Creates a basket for a consumer with a given type
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="itemCacheType">
            The item Cache Type.
            </param>
            <param name="versionKey">
            The version Key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.Save(NKart.Core.Models.IItemCache,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IItemCache"/> object
            </summary>
            <param name="itemCache">The <see cref="T:NKart.Core.Models.IItemCache"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IItemCache},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IItemCache"/> objects.
            </summary>
            <param name="itemCaches">Collection of <see cref="T:NKart.Core.Models.ItemCache"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.Delete(NKart.Core.Models.IItemCache,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IItemCache"/> object
            </summary>
            <param name="itemCache">The <see cref="T:NKart.Core.Models.IItemCache"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IItemCache},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.IItemCache"/> objects
            </summary>
            <param name="itemCaches">Collection of <see cref="T:NKart.Core.Models.IItemCache"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetByKey(System.Guid)">
            <summary>
            Gets a Basket by its unique id - primary key
            </summary>
            <param name="key">Id for the Basket</param>
            <returns><see cref="T:NKart.Core.Models.IItemCache"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetItemCaches(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetEntityItemCaches(System.Guid,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetCustomerItemCachePage(NKart.Core.ItemCacheType,System.DateTime,System.DateTime,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
            <param name="itemCacheType">
            The item cache type.
            </param>
            <param name="startDate">
            The start Date.
            </param>
            <param name="endDate">
            The end Date.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by field.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a list of Basket give a list of unique keys
            </summary>
            <param name="keys">List of unique keys</param>
            <returns>The collection of <see cref="T:NKart.Core.Models.IItemCache"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.Count(NKart.Core.ItemCacheType,NKart.Core.CustomerType)">
            <summary>
            The count.
            </summary>
            <param name="itemCacheType">
            The item cache type.
            </param>
            <param name="customerType">
            The customer type.
            </param>
            <returns>
            The count of item caches.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.Count(NKart.Core.ItemCacheType,NKart.Core.CustomerType,System.DateTime,System.DateTime)">
            <summary>
            Gets the count of of item caches for a customer type for a given date range.
            </summary>
            <param name="itemCacheType">
            The item cache type.
            </param>
            <param name="customerType">
            The customer type.
            </param>
            <param name="startDate">
            The start Date.
            </param>
            <param name="endDate">
            The end Date.
            </param>
            <returns>
            The count of item caches.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetItemCacheByCustomer(NKart.Core.Models.ICustomerBase,NKart.Core.ItemCacheType)">
            <summary>
            Returns the customer item cache of a given type.  This method will not create an item cache if the cache does not exist.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="itemCacheType">
            The item Cache Type.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetItemCacheByCustomer(NKart.Core.Models.ICustomerBase)">
            <summary>
            Returns a collection of item caches for the consumer
            </summary>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetItemCacheByCustomer(NKart.Core.Models.ICustomerBase,System.Guid)">
            <summary>
            Returns the customer item cache of a given type. This method will not create an item cache if the cache does not exist.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="itemCacheTfKey">
            The item Cache type field Key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ItemCacheService.GetAll">
            <summary>
            Gets a collection of all item caches.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.ProductVariantService">
            <summary>
                Represents the ProductVariantService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ProductVariantService.Locker">
            <summary>
                The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductVariantService" /> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
                Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductVariantService" /> class.
            </summary>
            <param name="logger">
                The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
                Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductVariantService" /> class.
            </summary>
            <param name="logger">
                The logger.
            </param>
            <param name="sqlSyntax">
                The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
                Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductVariantService" /> class.
            </summary>
            <param name="repositoryFactory">
                The repository factory.
            </param>
            <param name="logger">
                The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
                Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductVariantService" /> class.
            </summary>
            <param name="provider">
                The provider.
            </param>
            <param name="repositoryFactory">
                The repository factory.
            </param>
            <param name="logger">
                The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:NKart.Core.Services.ProductVariantService" /> class.
            </summary>
            <param name="provider">
                The provider.
            </param>
            <param name="repositoryFactory">
                The repository factory.
            </param>
            <param name="logger">
                The logger.
            </param>
            <param name="eventMessagesFactory">
                The event messages factory.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.CreateProductVariantWithKey(NKart.Core.Models.IProduct,NKart.Core.Models.ProductAttributeCollection,System.Boolean)">
            <summary>
                Creates a <see cref="T:NKart.Core.Models.IProductVariant" /> of the <see cref="T:NKart.Core.Models.IProduct" /> passed defined by the collection of
                <see cref="T:NKart.Core.Models.IProductAttribute" />
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct" /></param>
            <param name="attributes">The <see cref="T:NKart.Core.Models.IProductVariant" /></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>
                Either a new <see cref="T:NKart.Core.Models.IProductVariant" /> or, if one already exists with associated attributes, the existing
                <see cref="T:NKart.Core.Models.IProductVariant" />
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.CreateProductVariantWithKey(NKart.Core.Models.IProduct,System.String,System.String,System.Decimal,NKart.Core.Models.ProductAttributeCollection,System.Boolean)">
            <summary>
                Creates a <see cref="T:NKart.Core.Models.IProductVariant" /> of the <see cref="T:NKart.Core.Models.IProduct" /> passed defined by the collection of
                <see cref="T:NKart.Core.Models.IProductAttribute" />
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct" /></param>
            <param name="name">The name of the product variant</param>
            <param name="sku">The unique SKU of the product variant</param>
            <param name="price">The price of the product variant</param>
            <param name="attributes">The <see cref="T:NKart.Core.Models.IProductVariant" /></param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>
                Either a new <see cref="T:NKart.Core.Models.IProductVariant" /> or, if one already exists with associated attributes, the existing
                <see cref="T:NKart.Core.Models.IProductVariant" />
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.Save(NKart.Core.Models.IProductVariant,System.Boolean)">
            <summary>
                Saves a single instance of a <see cref="T:NKart.Core.Models.IProductVariant" />
            </summary>
            <param name="productVariant">The <see cref="T:NKart.Core.Models.IProductVariant" /> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductVariant},System.Boolean)">
            <summary>
                Saves a collection of <see cref="T:NKart.Core.Models.IProductVariant" />
            </summary>
            <param name="productVariantList">The collection of <see cref="T:NKart.Core.Models.IProductVariant" /> to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.Delete(NKart.Core.Models.IProductVariant,System.Boolean)">
            <summary>
                Deletes a single <see cref="T:NKart.Core.Models.IProductVariant" />
            </summary>
            <param name="productVariant">The <see cref="T:NKart.Core.Models.IProductVariant" /> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IProductVariant},System.Boolean)">
            <summary>
                Deletes a collection of <see cref="T:NKart.Core.Models.IProductVariant" />
            </summary>
            <param name="productVariantList">The collection of <see cref="T:NKart.Core.Models.IProductVariant" /> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.GetByKey(System.Guid)">
            <summary>
                Gets an <see cref="T:NKart.Core.Models.IProductVariant" /> object by its 'UniqueId'
            </summary>
            <param name="key">key of the Product to retrieve</param>
            <returns>
                <see cref="T:NKart.Core.Models.IProductVariant" />
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.GetAll">
            <inheritdoc />
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.GetBySku(System.String)">
            <summary>
                Gets an <see cref="T:NKart.Core.Models.IProductVariant" /> object by it's unique SKU.
            </summary>
            <param name="sku">
                The SKU.
            </param>
            <returns>
                The <see cref="T:NKart.Core.Models.IProductVariant" />.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
                Gets list of <see cref="T:NKart.Core.Models.IProductVariant" /> objects given a list of Unique ids
            </summary>
            <param name="keys">List of keys for ProductVariant objects to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IProduct" /></returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.GetByProductKey(System.Guid)">
            <summary>
                Gets a collection of <see cref="T:NKart.Core.Models.IProductVariant" /> object for a given Product Key
            </summary>
            <param name="productKey">The product key of the <see cref="T:NKart.Core.Models.IProductVariant" /> collection to retrieve</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IProductVariant" /></returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.GetByWarehouseKey(System.Guid)">
            <summary>
                Gets a collection of <see cref="T:NKart.Core.Models.IProductVariant" /> objects associated with a given warehouse
            </summary>
            <param name="warehouseKey">The 'unique' key of the warehouse</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IProductVariant" /></returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.SkuExists(System.String)">
            <summary>
                True/false indicating whether or not a SKU is already exists in the database
            </summary>
            <param name="sku">The SKU to be tested</param>
            <returns>A value indicating whether or not the SKU exists</returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.CreateProductVariant(NKart.Core.Models.IProduct,System.Collections.Generic.List{NKart.Core.Models.IProductVariant},NKart.Core.Models.ProductAttributeCollection)">
            <summary>
                Creates a <see cref="T:NKart.Core.Models.IProductVariant" /> of the <see cref="T:NKart.Core.Models.IProduct" /> passed defined by the collection of
                <see cref="T:NKart.Core.Models.IProductAttribute" />
                without saving it to the database
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct" /></param>
            <param name="variants">
                Existing variants to check against
            </param>
            <param name="attributes">The <see cref="T:NKart.Core.Models.IProductVariant" /></param>
            <returns>
                Either a new <see cref="T:NKart.Core.Models.IProductVariant" /> or, if one already exists with associated attributes, the existing
                <see cref="T:NKart.Core.Models.IProductVariant" />
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.CreateProductVariant(NKart.Core.Models.IProduct,System.Collections.Generic.List{NKart.Core.Models.IProductVariant},System.String,System.String,System.Decimal,NKart.Core.Models.ProductAttributeCollection)">
            <summary>
                Creates a <see cref="T:NKart.Core.Models.IProductVariant" /> of the <see cref="T:NKart.Core.Models.IProduct" /> passed defined by the collection of
                <see cref="T:NKart.Core.Models.IProductAttribute" />
                without saving it to the database
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct" /></param>
            <param name="variants"></param>
            <param name="name">The name of the product variant</param>
            <param name="sku">The unique SKU of the product variant</param>
            <param name="price">The price of the product variant</param>
            <param name="attributes">The <see cref="T:NKart.Core.Models.ProductAttributeCollection" /></param>
            <returns>
                Either a new <see cref="T:NKart.Core.Models.IProductVariant" /> or, if one already exists with associated attributes, the existing
                <see cref="T:NKart.Core.Models.IProductVariant" />
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.GetAll(System.Guid[])">
            <summary>
                Gets the count of all product variants.
            </summary>
            <param name="keys">
                The keys.
            </param>
            <returns>
                The <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </returns>
            <remarks>
                Used in tests
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.Count(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.IProductVariant})">
            <summary>
                Gets the count of <see cref="T:NKart.Core.Models.IProductVariant" /> by a query
            </summary>
            <param name="query">
                The query.
            </param>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.GetProductVariantWithAttributes(NKart.Core.Models.IProduct,System.Collections.Generic.List{NKart.Core.Models.IProductVariant},System.Guid[])">
            <summary>
                Returns <see cref="T:NKart.Core.Models.IProductVariant" /> given the product and the collection of attribute ids that defines the
                <see cref="T:NKart.Core.Models.IProductVariant" />
            </summary>
            <param name="product">
                The product.
            </param>
            <param name="variants">
                Variants to check against
            </param>
            <param name="attributeKeys">
                The attribute Keys.
            </param>
            <returns>
                The <see cref="T:NKart.Core.Models.IProductVariant" />.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ProductVariantService.ProductVariantWithAttributesExists(NKart.Core.Models.IProduct,System.Collections.Generic.List{NKart.Core.Models.IProductVariant},NKart.Core.Models.ProductAttributeCollection)">
            <summary>
                Compares the <see cref="T:NKart.Core.Models.ProductAttributeCollection" /> with other <see cref="T:NKart.Core.Models.IProductVariant" />s of the
                <see cref="T:NKart.Core.Models.IProduct" /> pass
                to determine if the a variant already exists with the attributes passed
            </summary>
            <param name="product">The <see cref="T:NKart.Core.Models.IProduct" /> to reference</param>
            <param name="variants">
                Variants to check against
            </param>
            <param name="attributes"><see cref="T:NKart.Core.Models.ProductAttributeCollection" /> to compare</param>
            <returns>
                True/false indicating whether or not a <see cref="T:NKart.Core.Models.IProductVariant" /> already exists with the
                <see cref="T:NKart.Core.Models.ProductAttributeCollection" /> passed
            </returns>
        </member>
        <member name="E:NKart.Core.Services.ProductVariantService.Creating">
            <summary>
                Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductVariantService.Created">
            <summary>
                Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductVariantService.Saving">
            <summary>
                Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductVariantService.Saved">
            <summary>
                Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductVariantService.Deleting">
            <summary>
                Occurs before Delete
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ProductVariantService.Deleted">
            <summary>
                Occurs after Delete
            </summary>
        </member>
        <member name="T:NKart.Core.Services.ServiceContext">
            <summary>
            The Merchello ServiceContext, which provides access to the following services:
            <see cref="T:NKart.Core.Services.ICustomerService"/>, <see cref="T:NKart.Core.Services.IGatewayProviderService"/>, <see cref="T:NKart.Core.Services.IInvoiceService"/>, <see cref="T:NKart.Core.Services.IItemCacheService"/> 
            <see cref="T:NKart.Core.Services.IOrderService"/>, <see cref="T:NKart.Core.Services.IPaymentService"/>, <see cref="T:NKart.Core.Services.IProductService"/>, <see cref="T:NKart.Core.Services.IProductOptionService"/>, <see cref="T:NKart.Core.Services.IProductVariantService"/>,
            <see cref="T:NKart.Core.Services.IStoreSettingService"/>, <see cref="T:NKart.Core.Services.IShipmentService"/>, and <see cref="T:NKart.Core.Services.IWarehouseService"/>
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._anonymousCustomerService">
            <summary>
            The anonymous customer service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._appliedPaymentService">
            <summary>
            The applied payment service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._auditLogService">
            <summary>
            The audit log service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._noteService">
            <summary>
            The note service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._countryTaxRateService">
            <summary>
            The country tax rate service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._customerAddressService">
            <summary>
            The customer address service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._customerService">
            <summary>
            The customer service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._detachedContentTypeService">
            <summary>
            The detached content type service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._digitalMediaService">
            <summary>
            The digital media service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._entityCollectionService">
            <summary>
            The entity collection service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._invoiceService">
            <summary>
            The invoice service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._itemCacheService">
            <summary>
            The item cache service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._gatewayProviderService">
            <summary>
            The gateway provider service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._orderService">
            <summary>
            The order service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._offerSettingsService">
            <summary>
            The offer settings service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._offerRedeemedService">
            <summary>
            The offer redeemed service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._notificationMethodService">
            <summary>
            The notification method service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._notificationMessageService">
            <summary>
            The notification message service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._paymentService">
            <summary>
            The payment service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._paymentMethodService">
            <summary>
            The payment method service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._productService">
            <summary>
            The product service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._productOptionService">
            <summary>
            The product option service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._productVariantService">
            <summary>
            The product variant service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._storeSettingsService">
            <summary>
            The store settings service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._shipCountryService">
            <summary>
            The ship country service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._shipMethodService">
            <summary>
            The ship method service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._shipRateTierService">
            <summary>
            The ship rate tier service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._shipmentService">
            <summary>
            The shipment service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._warehouseService">
            <summary>
            The warehouse service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._warehouseCatalogService">
            <summary>
            The _warehouse catalog service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ServiceContext._repositoryFactory">
            <summary>
            The <see cref="T:NKart.Core.Persistence.RepositoryFactory"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ServiceContext.#ctor(NKart.Core.Persistence.RepositoryFactory,NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ServiceContext"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository Factory.
            </param>
            <param name="dbUnitOfWorkProvider">
            The database unit of work provider.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event Messages Factory.
            </param>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.AuditLogService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IAuditLogService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.NoteService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.INoteService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.CustomerService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.ICustomerService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.DetachedContentTypeService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IDetachedContentTypeService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.DigitalMediaService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IDigitalMediaService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.EntityCollectionService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IEntityCollectionService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.GatewayProviderService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IGatewayProviderService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.InvoiceService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IInvoiceService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.ItemCacheService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IItemCacheService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.OrderService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IOrderService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.OfferSettingsService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IOfferSettingsService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.PaymentService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IPaymentService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.ProductService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IProductService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.ProductOptionService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IProductOptionService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.ProductVariantService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IProductVariantService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.StoreSettingService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IStoreSettingService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.ShipCountryService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IShipCountryService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.ShipmentService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IShipmentService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.WarehouseService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IWarehouseService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.DatabaseUnitOfWorkProvider">
            <summary>
            Gets the database unit of work provider.
            </summary>
            <remarks>Used for testing</remarks>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.AppliedPaymentService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IAppliedPaymentService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.AnonymousCustomerService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IAnonymousCustomerService"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.TaxMethodService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.ITaxMethodService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.CustomerAddressService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.ICustomerAddressService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.NotificationMessageService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.INotificationMessageService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.NotificationMethodService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.INotificationMethodService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.OfferRedeemedService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IOfferRedeemedService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.PaymentMethodService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IPaymentMethodService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.ShipMethodService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IShipMethodService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.WarehouseCatalogService">
            <summary>
            Gets the warehouse catalog service.
            </summary>
        </member>
        <member name="P:NKart.Core.Services.ServiceContext.SqlSyntax">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ServiceContext.BuildServiceContext(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Builds the various services
            </summary>
            <param name="dbDatabaseUnitOfWorkProvider">
            Database unit of work provider used by the various services
            </param>
            <param name="repositoryFactory">
            The <see cref="T:NKart.Core.Persistence.RepositoryFactory"/>
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event Messages Factory.
            </param>
        </member>
        <member name="T:NKart.Core.Services.ShipCountryService">
            <summary>
            The ship country service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ShipCountryService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ShipCountryService._storeSettingService">
            <summary>
            The store setting service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipCountryService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipCountryService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipCountryService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipCountryService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipCountryService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.CreateShipCountryWithKey(System.Guid,System.String,System.Boolean)">
            <summary>
            The create ship country with key.
            </summary>
            <param name="warehouseCatalogKey">
            The warehouse catalog key.
            </param>
            <param name="countryCode">
            The country code.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.CreateShipCountryWithKey(System.Guid,NKart.Core.Models.ICountry,System.Boolean)">
            <summary>
            The create ship country with key.
            </summary>
            <param name="warehouseCatalogKey">
            The warehouse catalog key.
            </param>
            <param name="country">
            The country.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.Save(NKart.Core.Models.IShipCountry,System.Boolean)">
            <summary>
            Saves a single <see cref="!:shipCountry"/>
            </summary>
            <param name="shipCountry"></param>
            <param name="raiseEvents"></param>        
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.Delete(NKart.Core.Models.IShipCountry,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IShipCountry"/> object
            </summary>
            <param name="shipCountry"></param>
            <param name="raiseEvents"></param>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.GetShipCountriesByCatalogKey(System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipCountry"/> objects given a <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> key
            </summary>
            <param name="catalogKey">Guid</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipCountry"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.GetShipCountryByCountryCode(System.Guid,System.String)">
            <summary>
            Gets a single <see cref="T:NKart.Core.Models.IShipCountry"/>
            </summary>
            <param name="catalogKey">The warehouse catalog key (guid)</param>
            <param name="countryCode">The two letter ISO country code</param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Services.ShipCountryService.GetByKey(System.Guid)">
            <summary>
            Gets a single <see cref="T:NKart.Core.Models.IShipCountry"/> by it's unique key (Guid pk)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="E:NKart.Core.Services.ShipCountryService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipCountryService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipCountryService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipCountryService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipCountryService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.ShipCountryService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="T:NKart.Core.Services.ShipMethodService">
            <summary>
            Defines the ShipMethodService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ShipMethodService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipMethodService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipMethodService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipMethodService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipMethodService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipMethodService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.ShipMethodService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipMethodService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipMethodService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipMethodService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipMethodService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.ShipMethodService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.Save(NKart.Core.Models.IShipMethod,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethod">The <see cref="T:NKart.Core.Models.IShipMethod"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipMethod},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethodList">Collection of <see cref="T:NKart.Core.Models.IShipMethod"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.Delete(NKart.Core.Models.IShipMethod,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethod">The <see cref="T:NKart.Core.Models.IShipMethod"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipMethod},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
            <param name="shipMethods">The collection of <see cref="T:NKart.Core.Models.IShipMethod"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IShipMethod"/> given it's unique 'key' (GUID)
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IShipMethod"/>'s unique 'key' (GUID)</param>
            <returns>The <see cref="T:NKart.Core.Models.IShipMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.GetShipMethodsByProviderKey(System.Guid,System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipMethod"/> objects given a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key and a <see cref="T:NKart.Core.Models.IShipCountry"/> key
            </summary>
            <param name="providerKey">
            The provider Key.
            </param>
            <param name="shipCountryKey">
            The ship Country Key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.GetShipMethodsByProviderKey(System.Guid)">
            <summary>
            Gets a list of all <see cref="T:NKart.Core.Models.IShipMethod"/> objects given a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> key
            </summary>
            <param name="providerKey">
            The provider Key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IShipMethod"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.GetAll">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IShipMethod"/>s.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.CreateShipMethodWithKey(System.Guid,NKart.Core.Models.IShipCountry,System.String,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IShipMethod"/>.  This is useful due to the data constraint
            preventing two ShipMethods being created with the same ShipCountry and ServiceCode for any provider.
            </summary>
            <param name="providerKey">
            The unique gateway provider key (GUID)
            </param>
            <param name="shipCountry">
            The <see cref="T:NKart.Core.Models.IShipCountry"/> this ship method is to be associated with
            </param>
            <param name="name">
            The required name of the <see cref="T:NKart.Core.Models.IShipMethod"/>
            </param>
            <param name="serviceCode">
            The ShipMethods service code
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipMethodService.ShipMethodExists(System.Guid,System.Guid,System.String)">
            <summary>
            The ship method exists.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <param name="shipCountryKey">
            The ship country key.
            </param>
            <param name="serviceCode">
            The service code.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.ShipRateTierService">
            <summary>
            Represents the ShipRateTierService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ShipRateTierService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipRateTierService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipRateTierService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipRateTierService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipRateTierService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipRateTierService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipRateTierService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipRateTierService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipRateTierService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipRateTierService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipRateTierService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.ShipRateTierService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipRateTierService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipRateTierService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.ShipRateTierService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipRateTierService.Save(NKart.Core.Models.IShipRateTier,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTier">The <see cref="T:NKart.Core.Models.IShipRateTier"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.ShipRateTierService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipRateTier},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTierList">The collection of <see cref="T:NKart.Core.Models.IShipRateTier"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.ShipRateTierService.Delete(NKart.Core.Models.IShipRateTier,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IShipRateTier"/>
            </summary>
            <param name="shipRateTier">The <see cref="T:NKart.Core.Models.IShipRateTier"/> to be deleted</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.ShipRateTierService.GetShipRateTiersByShipMethodKey(System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipRateTier"/> objects given a <see cref="T:NKart.Core.Models.IShipMethod"/> key
            </summary>
            <param name="shipMethodKey">The ship method key</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipRateTier"/></returns>
        </member>
        <member name="T:NKart.Core.Services.StoreSettingService">
            <summary>
            Represents the Store Settings Service
            </summary>
        </member>
        <member name="F:NKart.Core.Services.StoreSettingService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.StoreSettingService"/> class. 
            </summary>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.StoreSettingService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.StoreSettingService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.StoreSettingService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.StoreSettingService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.StoreSettingService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
        </member>
        <member name="E:NKart.Core.Services.StoreSettingService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.StoreSettingService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.StoreSettingService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.StoreSettingService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.StoreSettingService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.StoreSettingService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.CountryHasProvinces(System.String)">
            <summary>
            True/false indicating whether or not the region has provinces configured in the Merchello.config file
            </summary>
            <param name="countryCode">
            The two letter ISO Region code (country code)
            </param>
            <returns>
            A value indicating whether or not the country has provinces.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetProvinceLabelForCountry(System.String)">
            <summary>
            Returns the province label from the configuration file
            </summary>
            <param name="countryCode">
            The two letter ISO Region code
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetProvincesByCountryCode(System.String)">
            <summary>
            Returns a collection of <see cref="T:NKart.Core.Models.IProvince"/> given a region code
            </summary>
            <param name="countryCode">The two letter ISO Region code (country code)</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IProvince"/></returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetCurrencyFormat(NKart.Core.Models.ICurrency)">
            <summary>
            Returns the currency format
            </summary>
            <param name="currency">
            The <see cref="T:NKart.Core.Models.ICurrency"/>.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.Interfaces.ICurrencyFormat"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.CreateStoreSettingWithKey(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a store setting and persists it to the database
            </summary>
            <param name="name">The settings name</param>
            <param name="value">The settings value</param>
            <param name="typeName">The type name</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns><see cref="T:NKart.Core.Models.IStoreSetting"/></returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.Save(NKart.Core.Models.IStoreSetting,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IStoreSetting"/> object
            </summary>
            <param name="storeSetting">The <see cref="T:NKart.Core.Models.IStoreSetting"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.Delete(NKart.Core.Models.IStoreSetting,System.Boolean)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.IStoreSetting"/>
            </summary>
            <param name="storeSetting">
            The store Setting.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IStoreSetting"/> by it's unique 'Key' (GUID)
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IStoreSetting"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetAll">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IStoreSetting"/>
            </summary>
            <returns>
            The collection of all <see cref="T:NKart.Core.Models.IStoreSetting"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetNextInvoiceNumber(System.Int32)">
            <summary>
            Gets the next usable InvoiceNumber
            </summary>
            <param name="invoicesCount">
            The invoices Count.
            </param>
            <returns>
            The next invoice number.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetNextOrderNumber(System.Int32)">
            <summary>
            Gets the next usable OrderNumber
            </summary>
            <param name="ordersCount">
            The orders Count.
            </param>
            <returns>
            The next order number.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetNextShipmentNumber(System.Int32)">
            <summary>
            Gets the next usable ShipmentNumber.
            </summary>
            <param name="shipmentsCount">
            The shipments count.
            </param>
            <returns>
            The next shipment number.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetTypeFields">
            <summary>
            Gets the complete collection of registered type fields
            </summary>
            <returns>
            Gets the collection of all type fields.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetCountryByCode(System.String)">
            <summary>
            Returns the <see cref="T:NKart.Core.Models.ICountry" /> for the country code passed.
            </summary>
            <param name="countryCode">The two letter ISO Region code (country code)</param>
            <returns><see cref="T:System.Globalization.RegionInfo"/> for the country corresponding the the country code passed</returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetAllCountries">
            <summary>
            Gets a collection of all  <see cref="T:NKart.Core.Models.ICountry"/>
            </summary>
            <returns>
            The collection of all countries.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetAllCurrencies">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.ICurrency"/>
            </summary>
            <returns>
            The collection of all currencies.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetCurrencyByCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ICurrency"/> for the currency code passed
            </summary>
            <param name="currencyCode">The ISO Currency Code (e.g. USD)</param>
            <returns>The <see cref="T:NKart.Core.Models.ICurrency"/></returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetAllCountries(System.String[])">
            <summary>
            Returns a Region collection for all countries excluding codes passed
            </summary>
            <param name="excludeCountryCodes">A collection of country codes to exclude from the result set</param>
            <returns>A collection of <see cref="T:System.Globalization.RegionInfo"/></returns>
        </member>
        <member name="M:NKart.Core.Services.StoreSettingService.GetCountryFromConfig(System.String)">
            <summary>
            Gets a country by it's country code from the configuration file.
            </summary>
            <param name="countryCode">
            The country code.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICountry"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Services.ShipmentService">
            <summary>
            Represents the ShipmentService
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ShipmentService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.ShipmentService._storeSettingService">
            <summary>
            The store setting service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipmentService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipmentService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipmentService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The sql syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipmentService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipmentService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="storeSettingService">
            The store Setting Service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.ShipmentService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.ShipmentService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipmentService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipmentService.StatusChanging">
            <summary>
            Occurs before an invoice status has changed
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipmentService.StatusChanged">
            <summary>
            Occurs after an invoice status has changed
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipmentService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.ShipmentService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:NKart.Core.Services.ShipmentService.UpdatedOrder">
            <summary>
            Special event that fires when an order record is updated
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.CreateShipment(NKart.Core.Models.IShipmentStatus,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IShipment"/> without persisting it to the database.
            </summary>
            <param name="shipmentStatus">
            The shipment status.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.CreateShipment(NKart.Core.Models.IShipmentStatus,NKart.Core.Models.IAddress,NKart.Core.Models.IAddress,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IShipment"/> without persisting it to the database.
            </summary>
            <param name="shipmentStatus">
            The shipment status.
            </param>
            <param name="origin">
            The origin.
            </param>
            <param name="destination">
            The destination.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.CreateShipment(NKart.Core.Models.IShipmentStatus,NKart.Core.Models.IAddress,NKart.Core.Models.IAddress,NKart.Core.Models.LineItemCollection,System.Boolean)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.IShipment"/> without persisting it to the database.
            </summary>
            <param name="shipmentStatus">
            The shipment status.
            </param>
            <param name="origin">
            The origin.
            </param>
            <param name="destination">
            The destination.
            </param>
            <param name="items">
            The items.
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.Save(NKart.Core.Models.IShipment,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IShipment"/> object
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipment},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IShipment"/> objects
            </summary>
            <param name="shipmentList">Collection of <see cref="T:NKart.Core.Models.IShipment"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.Delete(NKart.Core.Models.IShipment,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IShipment"/> object
            </summary>
            <param name="shipment"><see cref="T:NKart.Core.Models.IShipment"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipment},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IShipment"/> objects
            </summary>
            <param name="shipmentList">Collection of <see cref="T:NKart.Core.Models.IShipment"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.GetByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IShipment"/> object by its 'UniqueId'
            </summary>
            <param name="key">Guid pk of the Shipment to retrieve</param>
            <returns><see cref="T:NKart.Core.Models.IShipment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.GetShipmentsByShipMethodKey(System.Guid)">
            <summary>
            Gets a list of <see cref="T:NKart.Core.Models.IShipment"/> object given a ship method Key
            </summary>
            <param name="shipMethodKey">The pk of the shipMethod</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.IShipment"/> objects given a list of Unique keys
            </summary>
            <param name="keys">List of Guid keys for Shipment objects to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.IShipment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.GetShipmentsByOrderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IShipment"/> give an order key
            </summary>
            <param name="orderKey">
            The order Key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.GetShipmentStatusByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.IShipmentStatus"/> by it's key
            </summary>
            <param name="key">The <see cref="T:NKart.Core.Models.IShipmentStatus"/> key</param>
            <returns><see cref="T:NKart.Core.Models.IShipmentStatus"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.GetAllShipmentStatuses">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Models.IShipmentStatus"/>
            </summary>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IShipmentStatus"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.GetAll">
            <summary>
            Gets all <see cref="T:NKart.Core.Models.IShipment"/>
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipment"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ShipmentService.UpdateOrderLineItemShipmentKeys(NKart.Core.Models.IShipment)">
            <summary>
            Updates any order line items when a shipment is deleted to null
            </summary>
            <param name="shipment">
            The shipment.
            </param>
        </member>
        <member name="T:NKart.Core.Services.WarehouseCatalogService">
            <summary>
            Represents a warehouse catalog service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.WarehouseCatalogService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.WarehouseCatalogService._productVariantService">
            <summary>
            The product variant service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseCatalogService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseCatalogService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IProductVariantService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseCatalogService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="productVariantService">
            The product Variant Service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IProductVariantService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseCatalogService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="productVariantService">
            The product Variant Service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IProductVariantService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseCatalogService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="productVariantService">
            The product variant service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.WarehouseCatalogService.Creating">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.WarehouseCatalogService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.WarehouseCatalogService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.WarehouseCatalogService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.WarehouseCatalogService.StatusChanging">
            <summary>
            Occurs before an invoice status has changed
            </summary>
        </member>
        <member name="E:NKart.Core.Services.WarehouseCatalogService.StatusChanged">
            <summary>
            Occurs after an invoice status has changed
            </summary>
        </member>
        <member name="E:NKart.Core.Services.WarehouseCatalogService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.WarehouseCatalogService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.CreateWarehouseCatalogWithKey(System.Guid,System.String,System.String,System.Boolean)">
            <summary>
            Creates warehouse catalog and persists it to the database.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="description">
            The description.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.Save(NKart.Core.Models.IWarehouseCatalog,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalog">
            The warehouse catalog.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalogs">
            The warehouse catalogs.
            </param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.Delete(NKart.Core.Models.IWarehouseCatalog,System.Boolean)">
            <summary>
            Deletes a single instance of a <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalog">
            The warehouse catalog.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>
            </summary>
            <param name="warehouseCatalogs">
            The warehouse catalogs.
            </param>
            <param name="raiseEvents">
            The raise events.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by its key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.GetAll">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.GetByWarehouseKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> for a given <see cref="T:NKart.Core.Models.IWarehouse"/>.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseCatalogService.RemoveVariantsFromCatalogInventoryBeforeDeleting(NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Removes variants from catalog inventory.
            </summary>
            <param name="catalog">
            The catalog.
            </param>
        </member>
        <member name="T:NKart.Core.Services.WarehouseService">
            <summary>
            Represents the Warehouse Service 
            </summary>
        </member>
        <member name="F:NKart.Core.Services.WarehouseService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.WarehouseService._warehouseCatalogService">
            <summary>
            The warehouse catalog service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IWarehouseCatalogService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="warehouseCatalogService">
            The warehouse Catalog Service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IWarehouseCatalogService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="warehouseCatalogService">
            The warehouse Catalog Service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IWarehouseCatalogService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.WarehouseService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="warehouseCatalogService">
            The warehouse catalog service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.WarehouseService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.WarehouseService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="E:NKart.Core.Services.WarehouseService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.WarehouseService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.WarehouseService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.Save(NKart.Core.Models.IWarehouse,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IWarehouse"/> object
            </summary>
            <param name="warehouse">The <see cref="T:NKart.Core.Models.IWarehouse"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouse},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IWarehouse"/> objects.
            </summary>
            <param name="warehouseList">Collection of <see cref="T:NKart.Core.Models.Warehouse"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.GetDefaultWarehouse">
            <summary>
            Gets the default <see cref="T:NKart.Core.Models.IWarehouse"/>
            </summary>
            <returns>The default <see cref="T:NKart.Core.Models.IWarehouse"/></returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.GetByKey(System.Guid)">
            <summary>
            Gets a Warehouse by its unique key
            </summary>
            <param name="key">The key for the Warehouse</param>
            <returns>The <see cref="T:NKart.Core.Models.IWarehouse"/></returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a list of Warehouse give a list of unique keys
            </summary>
            <param name="keys">List of unique keys</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.IWarehouse"/></returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.CreateWarehouseCatalogWithKey(System.Guid,System.String,System.String)">
            <summary>
            Creates warehouse catalog and persists it to the database.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="description">
            The description.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.Save(NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalog">
            The warehouse catalog.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog})">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalogs">
            The warehouse catalogs.
            </param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.Delete(NKart.Core.Models.IWarehouseCatalog)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalog">
            The warehouse catalog.
            </param>
            <remarks>
            Cannot delete the default catalog in the default warehouse
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouseCatalog})">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <param name="warehouseCatalogs">
            The warehouse catalogs.
            </param>
            <remarks>
            Cannot delete the default catalog in the default warehouse
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.GetWarehouseCatalogByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.GetAllWarehouseCatalogs">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </summary>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.GetWarhouseCatalogByWarehouseKey(System.Guid)">
            <summary>
            Get a collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/> by warehouse key.
            </summary>
            <param name="warehouseKey">
            The warehouse key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IWarehouseCatalog"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.CreateWarehouse(System.String)">
            <summary>
            Creates an <see cref="T:NKart.Core.Models.IWarehouse"/> object
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IWarehouse"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.Delete(NKart.Core.Models.IWarehouse,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IWarehouse"/> object
            </summary>
            <param name="warehouse">The <see cref="T:NKart.Core.Models.IWarehouse"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.WarehouseService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IWarehouse},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.IWarehouse"/> objects
            </summary>
            <param name="warehouseList">Collection of <see cref="T:NKart.Core.Models.IWarehouse"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="T:NKart.Core.Services.CustomerService">
            <summary>
            Represents the Customer Service, 
            </summary>
        </member>
        <member name="F:NKart.Core.Services.CustomerService.Locker">
            <summary>
            The locker.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.CustomerService.ValidSortFields">
            <summary>
            The valid sort fields.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.CustomerService._anonymousCustomerService">
            <summary>
            The anonymous customer service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.CustomerService._customerAddressService">
            <summary>
            The customer address service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.CustomerService._invoiceService">
            <summary>
            The invoice service.
            </summary>
        </member>
        <member name="F:NKart.Core.Services.CustomerService._paymentService">
            <summary>
            The payment service.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.#ctor(Umbraco.Core.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerService"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntax">
            The SQL syntax.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.#ctor(NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IAnonymousCustomerService,NKart.Core.Services.ICustomerAddressService,NKart.Core.Services.IInvoiceService,NKart.Core.Services.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerService"/> class.
            </summary>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="anonymousCustomerService">
            The anonymous Customer Service.
            </param>
            <param name="customerAddressService">
            The customer Address Service.
            </param>
            <param name="invoiceService">
            The invoice Service.
            </param>
            <param name="paymentService">
            The payment Service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,NKart.Core.Services.IAnonymousCustomerService,NKart.Core.Services.ICustomerAddressService,NKart.Core.Services.IInvoiceService,NKart.Core.Services.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="anonymousCustomerService">
            The anonymous Customer Service.
            </param>
            <param name="customerAddressService">
            The customer Address Service.
            </param>
            <param name="invoiceService">
            The invoice Service.
            </param>
            <param name="paymentService">
            The payment Service.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.#ctor(NKart.Core.Persistence.UnitOfWork.IDatabaseUnitOfWorkProvider,NKart.Core.Persistence.RepositoryFactory,Umbraco.Core.Logging.ILogger,Umbraco.Core.Events.IEventMessagesFactory,NKart.Core.Services.IAnonymousCustomerService,NKart.Core.Services.ICustomerAddressService,NKart.Core.Services.IInvoiceService,NKart.Core.Services.IPaymentService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Services.CustomerService"/> class.
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="repositoryFactory">
            The repository factory.
            </param>
            <param name="logger">
            The logger.
            </param>
            <param name="eventMessagesFactory">
            The event messages factory.
            </param>
            <param name="anonymousCustomerService">
            The anonymous customer service.
            </param>
            <param name="customerAddressService">
            The customer address service.
            </param>
            <param name="invoiceService">
            The invoice service.
            </param>
            <param name="paymentService">
            The payment service.
            </param>
        </member>
        <member name="E:NKart.Core.Services.CustomerService.Creating">
            <summary>
            Occurs before Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.CustomerService.Created">
            <summary>
            Occurs after Create
            </summary>
        </member>
        <member name="E:NKart.Core.Services.CustomerService.Saving">
            <summary>
            Occurs before Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.CustomerService.Saved">
            <summary>
            Occurs after Save
            </summary>
        </member>
        <member name="E:NKart.Core.Services.CustomerService.Deleting">
            <summary>
            Occurs before Delete
            </summary>		
        </member>
        <member name="E:NKart.Core.Services.CustomerService.Deleted">
            <summary>
            Occurs after Delete
            </summary>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.CreateCustomer(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a customer without saving to the database
            </summary>
            <param name="loginName">The login name of the customer.</param>
            <param name="firstName">The first name of the customer</param>
            <param name="lastName">The last name of the customer</param>
            <param name="email">the email address of the customer</param>
            <returns>The <see cref="T:NKart.Core.Models.ICustomer"/></returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.CreateCustomerWithKey(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a customer and saves the record to the database
            </summary>
            <param name="loginName">
            The login Name.
            </param>
            <param name="firstName">
            The first name of the customer
            </param>
            <param name="lastName">
            The last name of the customer
            </param>
            <param name="email">
            the email address of the customer
            </param>
            <returns>
            <see cref="T:NKart.Core.Models.ICustomer"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.CreateCustomerWithKey(System.String)">
            <summary>
            Creates a customer with the Umbraco login name
            </summary>
            <param name="loginName">
            The login Name.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomer"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Save(NKart.Core.Models.ICustomer,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ICustomer"/> object
            </summary>
            <param name="customer">The <see cref="T:NKart.Core.Models.ICustomer"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events.</param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.ICustomer},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.ICustomer"/> objects.
            </summary>
            <param name="customers">Collection of <see cref="T:NKart.Core.Models.ICustomer"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Delete(NKart.Core.Models.ICustomer,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.ICustomer"/> object
            </summary>
            <param name="customer">The <see cref="T:NKart.Core.Models.ICustomer"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.ICustomer},System.Boolean)">
            <summary>
            Deletes a collection <see cref="T:NKart.Core.Models.ICustomer"/> objects
            </summary>
            <param name="customers">Collection of <see cref="T:NKart.Core.Models.ICustomer"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetByKey(System.Guid)">
            <summary>
            Gets a customer by its unique id
            </summary>
            <param name="key">GUID key for the customer</param>
            <returns><see cref="T:NKart.Core.Models.ICustomer"/></returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetPage(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page of <see cref="T:NKart.Core.Models.ICustomer"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetAnyByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.ICustomer"/> or <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> object by its 'UniqueId'
            </summary>
            <param name="entityKey">GUID key of either object to retrieve</param>
            <returns><see cref="T:NKart.Core.Models.ICustomerBase"/></returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetByLoginName(System.String)">
            <summary>
            The get by login name.
            </summary>
            <param name="loginName">
            The login name.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.CustomerCount">
            <summary>
            Gets the total customer count.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.CreateAnonymousCustomerWithKey">
            <summary>
            Creates an <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> and saves it to the database
            </summary>
            <returns><see cref="T:NKart.Core.Models.IAnonymousCustomer"/></returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Save(NKart.Core.Models.IAnonymousCustomer,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>
            </summary>
            <param name="anonymous">
            The <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> to save
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Delete(NKart.Core.Models.IAnonymousCustomer)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>
            </summary>
            <param name="anonymous">The <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> to delete</param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAnonymousCustomer})">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> objects
            </summary>
            <param name="anonymouses">Collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> to delete</param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Save(NKart.Core.Models.ICustomerAddress)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="address">
            The address to be saved
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Delete(NKart.Core.Models.ICustomerAddress)">
            <summary>
            Deletes a single instance of the <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="address">
            The address to be deleted
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetAddressByKey(System.Guid)">
            <summary>
            Gets an address by it's key
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetByCustomerKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> by the customer key
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetByCustomerKey(System.Guid,NKart.Core.AddressType)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> by the customer key filtered by an <see cref="T:NKart.Core.AddressType"/>
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetDefaultCustomerAddress(System.Guid,NKart.Core.AddressType)">
            <summary>
            Gets the default customer address of a certain type
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a list of customer give a list of unique keys
            </summary>
            <param name="keys">List of unique keys</param>
            <returns>A collection of <see cref="T:NKart.Core.Models.ICustomer"/></returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.AddToCollection(NKart.Core.Models.ICustomer,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The add invoice to collection.
            </summary>
            <param name="entity">
            The customer.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.AddToCollection(NKart.Core.Models.ICustomer,System.Guid)">
            <summary>
            The add invoice to collection.
            </summary>
            <param name="entity">
            The customer.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.AddToCollection(System.Guid,System.Guid)">
            <summary>
            The add invoice to collection.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.RemoveFromCollection(NKart.Core.Models.ICustomer,NKart.Core.Models.Interfaces.IEntityCollection)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="entity">
            The customer.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.RemoveFromCollection(NKart.Core.Models.ICustomer,System.Guid)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="entity">
            The customer.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.RemoveFromCollection(System.Guid,System.Guid)">
            <summary>
            The remove invoice from collection.
            </summary>
            <param name="entityKey">
            The customer key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.ExistsInCollection(System.Guid,System.Guid)">
            <summary>
            Determines if an customer exists in a collection.
            </summary>
            <param name="entityKey">
            The customer key.
            </param>
            <param name="collectionKey">
            The collection key.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.ExistsInCollection(System.Guid,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Returns true if the entity exists in the at least one of the static collections.
            </summary>
            <param name="entityKey">
            The entity key.
            </param>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get invoices from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets distinct customers from multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection keys.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetProductsThatExistInAllCollections(System.Collections.Generic.IEnumerable{System.Guid},System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets distinct filtered customers from multiple collections.
            </summary>
            <param name="collectionKeys">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetKeysFromCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get customer keys from static collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetKeysFromCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys from collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetKeysNotInCollection(System.Guid,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetKeysNotInCollection(System.Guid,System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            The get keys not in collection.
            </summary>
            <param name="collectionKey">
            The collection key.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetAllAnonymousCustomers">
            <summary>
            For testing
            </summary>
            <returns>
            The collection of all anonymous customers
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetAll">
            <summary>
            For testing.
            </summary>
            <returns>
            The collection of all customers.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.Count(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.ICustomer})">
            <summary>
            Gets a count of items returned by a query
            </summary>
            <param name="query">
            The query.
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetPagedKeys(System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a <see cref="T:Umbraco.Core.Persistence.Page`1"/>
            </summary>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetPagedKeys(System.String,System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page by search term
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:System.Web.UI.Page"/>.
            </returns>
            <remarks>
            The search is prefabricated in the repository
            </remarks>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.GetPagedKeys(Umbraco.Core.Persistence.Querying.IQuery{NKart.Core.Models.ICustomer},System.Int64,System.Int64,System.String,NKart.Core.Persistence.Querying.SortDirection)">
            <summary>
            Gets a page by query.
            </summary>
            <param name="query">
            The query.
            </param>
            <param name="page">
            The page.
            </param>
            <param name="itemsPerPage">
            The items per page.
            </param>
            <param name="sortBy">
            The sort by.
            </param>
            <param name="sortDirection">
            The sort direction.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Page`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.ValidateSortByField(System.String)">
            <summary>
            Validates the sort by field
            </summary>
            <param name="sortBy">
            The sort by.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.SaveAddresses(NKart.Core.Models.ICustomer)">
            <summary>
            The save addresses.
            </summary>
            <param name="customer">
            The customer.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.AssertAddressCount(NKart.Core.Models.ICustomer)">
            <summary>
            Assert the customer address count.
            </summary>
            <param name="customer">
            The customer.
            </param>
        </member>
        <member name="M:NKart.Core.Services.CustomerService.DeleteInvoicesAndPayments(NKart.Core.Models.ICustomer)">
            <summary>
            Deletes invoices and payments associated with a customer
            </summary>
            <param name="customer">
            The customer.
            </param>
            <remarks>
            This helps clean up the Examine (Lucene) indexes
            </remarks>
        </member>
        <member name="T:NKart.Core.Services.ICustomerService">
            <summary>
            Defines the CustomerService, which provides access to operations involving <see cref="T:NKart.Core.Models.ICustomer"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.CreateCustomer(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a customer without saving to the database
            </summary>
            <param name="loginName">
            The login Name.
            </param>
            <param name="firstName">
            The first name of the customer
            </param>
            <param name="lastName">
            The last name of the customer
            </param>
            <param name="email">
            the email address of the customer
            </param>
            <returns>
            The new <see cref="T:NKart.Core.Models.ICustomer"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.CreateCustomerWithKey(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a customer and saves the record to the database
            </summary>
            <param name="loginName">
            The login Name.
            </param>
            <param name="firstName">
            The first name of the customer
            </param>
            <param name="lastName">
            The last name of the customer
            </param>
            <param name="email">
            the email address of the customer
            </param>
            <returns>
            <see cref="T:NKart.Core.Models.ICustomer"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.CreateCustomerWithKey(System.String)">
            <summary>
            Creates a customer with the Umbraco member id passed
            </summary>
            <param name="loginName">
            The login Name.
            </param>
            <returns>
            <see cref="T:NKart.Core.Models.ICustomer"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Save(NKart.Core.Models.ICustomer,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ICustomer"/> object
            </summary>
            <param name="customer">The <see cref="T:NKart.Core.Models.ICustomer"/> to save</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.ICustomer},System.Boolean)">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Models.ICustomer"/> objects
            </summary>
            <param name="customers">The collection of customers to be saved</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Delete(NKart.Core.Models.ICustomer,System.Boolean)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.ICustomer"/> object
            </summary>
            <param name="customer"><see cref="T:NKart.Core.Models.ICustomer"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.ICustomer},System.Boolean)">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.ICustomer"/> objects
            </summary>
            <param name="customers">Collection of <see cref="T:NKart.Core.Models.ICustomer"/> to delete</param>
            <param name="raiseEvents">Optional boolean indicating whether or not to raise events</param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.GetAnyByKey(System.Guid)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.ICustomer"/> or <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> object by its 'UniqueId'
            </summary>
            <param name="entityKey">GUID key of either object to retrieve</param>
            <returns><see cref="T:NKart.Core.Models.ICustomerBase"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.GetByLoginName(System.String)">
            <summary>
            Gets an <see cref="T:NKart.Core.Models.ICustomer"/> object by its Umbraco login name
            </summary>
            <param name="loginName">
            The login Name.
            </param>
            <returns>
            <see cref="T:NKart.Core.Models.ICustomer"/> object or null if not found
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets list of <see cref="T:NKart.Core.Models.ICustomer"/> objects given a list of Unique keys
            </summary>
            <param name="keys">List of GUID keys for customers to retrieve</param>
            <returns>List of <see cref="T:NKart.Core.Models.ICustomer"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.CustomerCount">
            <summary>
            Gets the total customer count.
            </summary>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.CreateAnonymousCustomerWithKey">
            <summary>
            Creates an <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> and saves it to the database
            </summary>
            <returns><see cref="T:NKart.Core.Models.IAnonymousCustomer"/></returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Save(NKart.Core.Models.IAnonymousCustomer,System.Boolean)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>
            </summary>
            <param name="anonymous">
            The <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> to save
            </param>
            <param name="raiseEvents">
            Optional boolean indicating whether or not to raise events
            </param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Delete(NKart.Core.Models.IAnonymousCustomer)">
            <summary>
            Deletes a single <see cref="T:NKart.Core.Models.IAnonymousCustomer"/>
            </summary>
            <param name="anonymous">The <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> to delete</param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Delete(System.Collections.Generic.IEnumerable{NKart.Core.Models.IAnonymousCustomer})">
            <summary>
            Deletes a collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> objects
            </summary>
            <param name="anonymouses">Collection of <see cref="T:NKart.Core.Models.IAnonymousCustomer"/> to delete</param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Save(NKart.Core.Models.ICustomerAddress)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="address">
            The address.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Save(System.Collections.Generic.IEnumerable{NKart.Core.Models.ICustomerAddress})">
            <summary>
            Saves a single <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="addresses">
            The collection of addresses to be saved.
            </param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.Delete(NKart.Core.Models.ICustomerAddress)">
            <summary>
            Deletes a single instance of the <see cref="T:NKart.Core.Models.ICustomerAddress"/>
            </summary>
            <param name="address">
            The address to be deleted
            </param>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.GetAddressByKey(System.Guid)">
            <summary>
            The get by key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.GetByCustomerKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> by the customer key
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.GetByCustomerKey(System.Guid,NKart.Core.AddressType)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/> by the customer key filtered by an <see cref="T:NKart.Core.AddressType"/>
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Services.ICustomerService.GetDefaultCustomerAddress(System.Guid,NKart.Core.AddressType)">
            <summary>
            Gets the default customer address of a certain type
            </summary>
            <param name="customerKey">
            The customer key.
            </param>
            <param name="addressType">
            The address type.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ICustomerAddress"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Strategies.Itemization.DefaultInvoiceItemizationStrategy">
            <summary>
            Represents the default invoice itemization strategy.
            </summary>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.DefaultInvoiceItemizationStrategy.#ctor(NKart.Core.Models.Invoice)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Strategies.Itemization.DefaultInvoiceItemizationStrategy"/> class.
            </summary>
            <param name="invoice">
            The display.
            </param>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.DefaultInvoiceItemizationStrategy.ItemizeInvoice">
            <summary>
            Itemizes the invoice.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Strategies.Itemization.InvoiceItemItemization"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Strategies.Itemization.ProductBasedTaxationInvoiceItemazationStrategy">
            <summary>
            Represents the invoice itemization strategy for splitting out taxes (VAT) that were included in product pricing.
            </summary>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.ProductBasedTaxationInvoiceItemazationStrategy.#ctor(NKart.Core.Models.Invoice)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Strategies.Itemization.ProductBasedTaxationInvoiceItemazationStrategy"/> class.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.ProductBasedTaxationInvoiceItemazationStrategy.ItemizeInvoice">
            <summary>
            Itemizes the invoice.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Strategies.Itemization.InvoiceItemItemization"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Strategies.Itemization.InvoiceItemItemization">
            <summary>
            Represents a invoice itemization.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.Products">
            <summary>
            Gets or sets the collection of the product line items.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.Shipping">
            <summary>
            Gets or sets the collection of shipping line items.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.Tax">
            <summary>
            Gets or sets the collection of tax line items.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.Adjustments">
            <summary>
            Gets or sets the collection of adjustment line items.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.Discounts">
            <summary>
            Gets or sets the collection of discount line items.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.Custom">
            <summary>
            Gets or sets the collection of custom line items.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.Reconciles">
            <summary>
            Gets a value indicating whether reconciles.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.ShippingTotal">
            <summary>
            Gets the shipping total.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.TaxTotal">
            <summary>
            Gets the tax total.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.AdjustmentTotal">
            <summary>
            Gets the adjustment total.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.ProductTotal">
            <summary>
            Gets the product total.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.DiscountTotal">
            <summary>
            Gets the discount total.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.CustomTotal">
            <summary>
            Gets the custom total.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.InvoiceTotal">
            <summary>
            Gets the invoice total of the invoice.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemItemization.ItemizationTotal">
            <summary>
            Gets the total of the invoice itemization.
            </summary>
        </member>
        <member name="T:NKart.Core.Strategies.Itemization.InvoiceItemizationStrategyBase">
            <summary>
            The invoice itemization strategy base.
            </summary>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.InvoiceItemizationStrategyBase.#ctor(NKart.Core.Models.Invoice)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Strategies.Itemization.InvoiceItemizationStrategyBase"/> class.
            </summary>
            <param name="invoice">
            The <see cref="P:NKart.Core.Strategies.Itemization.InvoiceItemizationStrategyBase.Invoice"/>.
            </param>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.InvoiceItemizationStrategyBase.Invoice">
            <summary>
            Gets the invoice.
            </summary>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.InvoiceItemizationStrategyBase.Itemize">
            <summary>
            Itemizes the invoice.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Strategies.Itemization.InvoiceItemItemization"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.InvoiceItemizationStrategyBase.ItemizeInvoice">
            <summary>
            Itemizes the invoice.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Strategies.Itemization.InvoiceItemItemization"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.InvoiceItemizationStrategyBase.GetLineItemCollection(NKart.Core.LineItemType)">
            <summary>
            Gets the line item collection by <see cref="T:NKart.Core.LineItemType"/>.
            </summary>
            <param name="lineItemType">
            The line item type.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.InvoiceItemizationStrategyBase.Reconcile(NKart.Core.Strategies.Itemization.InvoiceItemItemization)">
            <summary>
            Reconciles the itemization.
            </summary>
            <param name="itemization">
            The itemization.
            </param>
            <returns>
            A value that indicates that the itemization could be reconciled.
            </returns>
        </member>
        <member name="T:NKart.Core.Strategies.Itemization.ProductBasedTaxationVisitor">
            <summary>
            Represents a visitor that separates taxes included in line items for that were included in product pricing.
            </summary>
        </member>
        <member name="F:NKart.Core.Strategies.Itemization.ProductBasedTaxationVisitor._productLineItems">
            <summary>
            The product line items.
            </summary>
        </member>
        <member name="F:NKart.Core.Strategies.Itemization.ProductBasedTaxationVisitor._taxLineItems">
            <summary>
            The tax line items.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.ProductBasedTaxationVisitor.ProductLineItems">
            <summary>
            Gets the product line items without taxes included.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Itemization.ProductBasedTaxationVisitor.TaxLineItems">
            <summary>
            Gets the tax line items created based on taxes that were included in the product pricing.
            </summary>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.ProductBasedTaxationVisitor.Visit(NKart.Core.Models.ILineItem)">
            <summary>
            Visits a line items.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:NKart.Core.Strategies.Itemization.ProductBasedTaxationVisitor.ConvertToDecimal(System.String)">
            <summary>
            The get decimal value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Strategies.IStrategy">
            <summary>
            Marker interface - defines a strategy
            </summary>
            <remarks>
            Moved <see cref="T:NKart.Core.Strategies.IStrategy"/> to strategies namespace
            Breaking change between version 1.2.0 and 1.3.0
            </remarks>
        </member>
        <member name="T:NKart.Core.Strategies.Merging.ILineItemContainerMergingStrategy`1">
            <summary>
            The MergingStrategy interface.
            </summary>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Models.ILineItemContainer"/>
            </typeparam>
        </member>
        <member name="M:NKart.Core.Strategies.Merging.ILineItemContainerMergingStrategy`1.Merge">
            <summary>
            Executes the merging strategy
            </summary>
            <returns>
            Merged <see cref="T:NKart.Core.Models.ILineItemContainer"/> of type <see cref="!:T"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Strategies.Packaging.DefaultWarehousePackagingStrategy">
            <summary>
            Represents the default warehouse packaging strategy.  
            
            The class is responsible for breaking a collection of products into one or more shipments.
            </summary>
            <remarks>
            
            for initial version we are only exposing a single warehouse and a single warehouse catalog 
            TODO : add business logic to test for for catalog and warehouse variations.  This will also need to account for 
            various inventory possibilities
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Strategies.Packaging.DefaultWarehousePackagingStrategy.#ctor(NKart.Core.Models.LineItemCollection,NKart.Core.Models.IAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Strategies.Packaging.DefaultWarehousePackagingStrategy"/> class.
            </summary>
            <param name="lineItemCollection">
            The line item collection.
            </param>
            <param name="destination">
            The destination.
            </param>
            <param name="versionKey">
            The version key.
            </param>
        </member>
        <member name="M:NKart.Core.Strategies.Packaging.DefaultWarehousePackagingStrategy.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.LineItemCollection,NKart.Core.Models.IAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Strategies.Packaging.DefaultWarehousePackagingStrategy"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="lineItemCollection">
            The line item collection.
            </param>
            <param name="destination">
            The destination.
            </param>
            <param name="versionKey">
            The version key.
            </param>
        </member>
        <member name="M:NKart.Core.Strategies.Packaging.DefaultWarehousePackagingStrategy.PackageShipments">
            <summary>
            Creates a collection of shipments for the current basket
            </summary>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.IShipment"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Strategies.Packaging.PackagingStrategyBase">
            <summary>
            Represents a base packaging strategy.
            </summary>
        </member>
        <member name="F:NKart.Core.Strategies.Packaging.PackagingStrategyBase.LineItemCollection">
            <summary>
            The line item collection.
            </summary>
        </member>
        <member name="F:NKart.Core.Strategies.Packaging.PackagingStrategyBase.Destination">
            <summary>
            The destination.
            </summary>
        </member>
        <member name="F:NKart.Core.Strategies.Packaging.PackagingStrategyBase.MerchelloContext">
            <summary>
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Strategies.Packaging.PackagingStrategyBase.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.LineItemCollection,NKart.Core.Models.IAddress,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Strategies.Packaging.PackagingStrategyBase"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="lineItemCollection">
            The line item collection.
            </param>
            <param name="destination">
            The destination.
            </param>
            <param name="versionKey">
            The version key.
            </param>
        </member>
        <member name="P:NKart.Core.Strategies.Packaging.PackagingStrategyBase.VersionKey">
            <summary>
            Gets the version key.
            </summary>
        </member>
        <member name="M:NKart.Core.Strategies.Packaging.PackagingStrategyBase.PackageShipments">
            <summary>
            Packages a line item collection into shipments.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Strategies.Packaging.IPackagingStrategy">
            <summary>
            Defines a shipment packaging strategy
            </summary>
        </member>
        <member name="M:NKart.Core.Strategies.Packaging.IPackagingStrategy.PackageShipments">
            <summary>
            Creates a collection of shipments
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Models.IShipment"/></returns>
        </member>
        <member name="T:NKart.Core.Strategies.Packaging.ShippableProductVisitor">
            <summary>
            Line item visitor intended to filter "Basket" items for shippable products
            </summary>
        </member>
        <member name="F:NKart.Core.Strategies.Packaging.ShippableProductVisitor._lineItems">
            <summary>
            The _line items.
            </summary>
        </member>
        <member name="P:NKart.Core.Strategies.Packaging.ShippableProductVisitor.ShippableItems">
            <summary>
            Gets the shippable items.
            </summary>
        </member>
        <member name="M:NKart.Core.Strategies.Packaging.ShippableProductVisitor.Visit(NKart.Core.Models.ILineItem)">
            <summary>
            The visit.
            </summary>
            <param name="lineItem">
            The line item.
            </param>
        </member>
        <member name="T:NKart.Core.Trees.FirstByValueTreeNodeVisitor`1">
            <summary>
            A visitor to find a matching node.
            </summary>
            <typeparam name="TNode">
            The type of the search value
            </typeparam>
        </member>
        <member name="F:NKart.Core.Trees.FirstByValueTreeNodeVisitor`1._target">
            <summary>
            The target value.
            </summary>
        </member>
        <member name="M:NKart.Core.Trees.FirstByValueTreeNodeVisitor`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Trees.FirstByValueTreeNodeVisitor`1"/> class.
            </summary>
            <param name="value">
            The target value.
            </param>
        </member>
        <member name="M:NKart.Core.Trees.FirstByValueTreeNodeVisitor`1.Visit(NKart.Core.Trees.TreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Trees.ITreeNodeVisitor`1">
            <summary>
            Defines a TreeNode Visitor.
            </summary>
            <typeparam name="TNode">
            The type of the tree node value
            </typeparam>
        </member>
        <member name="P:NKart.Core.Trees.ITreeNodeVisitor`1.Completed">
            <summary>
            Gets or sets a value indicating whether the visitor work has been completed.
            </summary>
            <remarks>
            This is used to bail out of the traversal early if we can
            </remarks>
        </member>
        <member name="T:NKart.Core.Trees.NodeAggregatorTreeNodeVisitor`1">
            <summary>
            Aggregates nodes along a traversal path.
            </summary>
            <typeparam name="TNode">
            The type of the node value
            </typeparam>
        </member>
        <member name="M:NKart.Core.Trees.NodeAggregatorTreeNodeVisitor`1.Visit(NKart.Core.Trees.TreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="T:NKart.Core.Trees.TreeNode`1">
            <summary>
            Represents a generic tree.
            </summary>
            <typeparam name="T">
            The type of object
            </typeparam>
        </member>
        <member name="F:NKart.Core.Trees.TreeNode`1._children">
            <summary>
            The list of the children.
            </summary>
        </member>
        <member name="M:NKart.Core.Trees.TreeNode`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Trees.TreeNode`1"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:NKart.Core.Trees.TreeNode`1.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:NKart.Core.Trees.TreeNode`1.Value">
            <summary>
            Gets the value of the node.
            </summary>
        </member>
        <member name="P:NKart.Core.Trees.TreeNode`1.Children">
            <summary>
            Gets the children.
            </summary>
        </member>
        <member name="P:NKart.Core.Trees.TreeNode`1.Item(System.Int32)">
            <summary>
            Gets a child at a specific index.
            </summary>
            <param name="i">
            The index of the child to retrieve.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Trees.TreeNode`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Trees.TreeNode`1.AddChild(`0)">
            <summary>
            The add child.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Trees.TreeNode`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Trees.TreeNode`1.AddChildren(`0[])">
            <summary>
            Adds children to the tree.
            </summary>
            <param name="values">
            The values.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Trees.TreeNode`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Trees.TreeNode`1.RemoveChild(NKart.Core.Trees.TreeNode{`0})">
            <summary>
            Removes a child from the tree.
            </summary>
            <param name="node">
            The node.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Trees.TreeNode`1.Climb(NKart.Core.Trees.ITreeNodeVisitor{`0})">
            <summary>
            Applies a visitor to each ancestor
            </summary>
            <param name="visitor">
            The visitor.
            </param>
        </member>
        <member name="M:NKart.Core.Trees.TreeNode`1.Traverse(NKart.Core.Trees.ITreeNodeVisitor{`0})">
            <summary>
            Applies a visitor to each node in a traversal.
            </summary>
            <param name="visitor">
            The action.
            </param>
        </member>
        <member name="M:NKart.Core.Trees.TreeNode`1.Flatten">
            <summary>
            Flattens the tree.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Trees.TreeNodeFactory`1">
            <summary>
            Defines a factory capable of building a Tree of <see cref="T:NKart.Core.Trees.TreeNode`1"/>.
            </summary>
            <typeparam name="TNode">
            Type type of the tree node value
            </typeparam>
        </member>
        <member name="M:NKart.Core.Trees.TreeNodeFactory`1.BuildTrees(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            The build trees.
            </summary>
            <param name="flattened">
            The flattened tree data.
            </param>
            <returns>
            The collection of trees found in the flattened data.
            </returns>
        </member>
        <member name="T:NKart.Core.Trees.TreeNodeVistorBase`1">
            <summary>
            A base class for visiting nodes in a tree.
            </summary>
            <typeparam name="TNode">
            The type of the node value
            </typeparam>
        </member>
        <member name="F:NKart.Core.Trees.TreeNodeVistorBase`1._nodes">
            <summary>
            A queue to store found nodes.
            </summary>
        </member>
        <member name="M:NKart.Core.Trees.TreeNodeVistorBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Trees.TreeNodeVistorBase`1"/> class.
            </summary>
        </member>
        <member name="P:NKart.Core.Trees.TreeNodeVistorBase`1.Nodes">
            <summary>
            Gets the list of nodes.
            </summary>
            <remarks>
            Used to store matched nodes from the tree traversal
            </remarks>
        </member>
        <member name="P:NKart.Core.Trees.TreeNodeVistorBase`1.Values">
            <summary>
            Gets the values of the matched nodes
            </summary>
        </member>
        <member name="P:NKart.Core.Trees.TreeNodeVistorBase`1.Completed">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Trees.TreeNodeVistorBase`1.Visit(NKart.Core.Trees.TreeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="M:NKart.Core.Trees.TreeNodeVistorBase`1.Dequeue">
            <summary>
            Removes a node from the top of the queue.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Trees.TreeNode`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Trees.TreeNodeVistorBase`1.Enqueue(NKart.Core.Trees.TreeNode{`0})">
            <summary>
            Adds a node the the queue.
            </summary>
            <param name="node">
            The node.
            </param>
        </member>
        <member name="T:NKart.Core.Ensure">
            <summary>
            Helper class for mandating values, for example on method parameters.
            </summary>
            <remarks>
            This is basically a direct copy/rename of the Umbraco Mandate class.  We've included it in the Merchello source
            so that we can upgrade things more easily in the Merchello version 3.0.0 refactoring.
            </remarks>
            <seealso cref="!:https://github.com/umbraco/Umbraco-CMS/blob/dev-v7/src/Umbraco.Core/Mandate.cs"/>
        </member>
        <member name="M:NKart.Core.Ensure.ParameterNotNull``1(``0,System.String)">
            <summary>
            Mandates that the specified parameter is not null.
            </summary>
            <typeparam name="T">
            The type of the value
            </typeparam>
            <param name="value">
            The value.
            </param>
            <param name="paramName">
            Name of the parameter.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="value"/> is null.
            </exception>
        </member>
        <member name="M:NKart.Core.Ensure.ParameterNotNullOrEmpty(System.String,System.String)">
            <summary>
            Mandates that the specified parameter is not null.
            </summary>
            <param name="value">The value.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="value"/> is null or whitespace.</exception>
        </member>
        <member name="M:NKart.Core.Ensure.ParameterNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Mandates that the specified sequence is not null and has at least one element.
            </summary>
            <typeparam name="T">The type of the parameters</typeparam>
            <param name="sequence">The sequence.</param>
            <param name="paramName">Name of the parameter.</param>
        </member>
        <member name="M:NKart.Core.Ensure.ParameterCondition(System.Boolean,System.String)">
            <summary>
            Mandates that the specified parameter matches the condition.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentException">If the condition is false.</exception>
        </member>
        <member name="M:NKart.Core.Ensure.ParameterCondition(System.Boolean,System.String,System.String)">
            <summary>
            Mandates that the specified parameter matches the condition.
            </summary>
            <param name="condition">The condition to check.</param>
            <param name="paramName">Name of the parameter.</param>
            <param name="message">The message.</param>
            <exception cref="T:System.ArgumentException">If the condition is false.</exception>
        </member>
        <member name="M:NKart.Core.Ensure.That``1(System.Boolean)">
            <summary>
            Mandates that the specified condition is true, otherwise throws an exception specified in <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="condition">if set to <c>true</c>, throws exception <typeparamref name="TException"/>.</param>
            <exception cref="T:System.Exception">An exception of type <typeparamref name="TException"/> is raised if the condition is false.</exception>
        </member>
        <member name="M:NKart.Core.Ensure.That``1(System.Boolean,System.Func{``0})">
            <summary>
            Mandates that the specified condition is true, otherwise throws an exception specified in <typeparamref name="TException"/>.
            </summary>
            <typeparam name="TException">The type of the exception.</typeparam>
            <param name="condition">if set to <c>true</c>, throws exception <typeparamref name="TException"/>.</param>
            <param name="defer">Deferred expression to call if the exception should be raised.</param>
            <exception cref="T:System.Exception">An exception of type <typeparamref name="TException"/> is raised if the condition is false.</exception>
        </member>
        <member name="T:NKart.Core.Events.AddItemEventArgs">
            <summary>
            The add item event args.
            </summary>
        </member>
        <member name="M:NKart.Core.Events.AddItemEventArgs.#ctor(NKart.Core.Models.ILineItem)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.AddItemEventArgs"/> class.
            </summary>
            <param name="lineItem">
            The line Item.
            </param>
        </member>
        <member name="P:NKart.Core.Events.AddItemEventArgs.LineItem">
            <summary>
            Gets or sets the <see cref="T:NKart.Core.Models.ILineItem"/>.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.InitializedEventArgs`1">
            <summary>
            The new event args.
            </summary>
            <typeparam name="T">
            The type of object
            </typeparam>
        </member>
        <member name="M:NKart.Core.Events.InitializedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.InitializedEventArgs`1"/> class. 
            Constructor accepting entities in a creating operation
            </summary>
            <param name="eventObject">
            The object associated with the event
            </param>
        </member>
        <member name="P:NKart.Core.Events.InitializedEventArgs`1.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.InitializingEventArgs`1">
            <summary>
            The initializing event args.
            </summary>
            <typeparam name="T">
            The type of argument
            </typeparam>
        </member>
        <member name="M:NKart.Core.Events.InitializingEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.InitializingEventArgs`1"/> class.
            </summary>
            <param name="eventObject">
            The event object.
            </param>
        </member>
        <member name="P:NKart.Core.Events.InitializingEventArgs`1.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.ObjectEventArgs`1">
            <summary>
            The object event args base.
            </summary>
            <typeparam name="T">
            The type of object
            </typeparam>
        </member>
        <member name="M:NKart.Core.Events.ObjectEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.ObjectEventArgs`1"/> class.
            </summary>
            <param name="eventObject">
            The event object.
            </param>
        </member>
        <member name="P:NKart.Core.Events.ObjectEventArgs`1.EventObject">
            <summary>
            Gets the event object.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.TransientMessageFactory">
            <summary>
            A simple/default transient messages factory
            </summary>
        </member>
        <member name="M:NKart.Core.Events.TransientMessageFactory.Get">
            <summary>
            Gets the Event Messages.
            </summary>
            <returns>
            The <see cref="T:Umbraco.Core.Events.EventMessages"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Events.UpdateItemEventArgs`1">
            <summary>
            Event arguments for updating line items.
            </summary>
            <typeparam name="T">
            The type of updated item
            </typeparam>
        </member>
        <member name="F:NKart.Core.Events.UpdateItemEventArgs`1._result">
            <summary>
            The result.
            </summary>
        </member>
        <member name="M:NKart.Core.Events.UpdateItemEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.UpdateItemEventArgs`1"/> class.
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="P:NKart.Core.Events.UpdateItemEventArgs`1.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.ValidationEventArgs`1">
            <summary>
            The validation event args.
            </summary>
            <typeparam name="T">
            The type of result
            </typeparam>
        </member>
        <member name="F:NKart.Core.Events.ValidationEventArgs`1._result">
            <summary>
            The validation result.
            </summary>
        </member>
        <member name="M:NKart.Core.Events.ValidationEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.ValidationEventArgs`1"/> class.
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="P:NKart.Core.Events.ValidationEventArgs`1.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.FormatterEventArgs`2">
            <summary>
            The formatter event args.
            </summary>
            <typeparam name="TFormatter">
            The type of the formatter
            </typeparam>
            <typeparam name="TModel">
            The type of the model
            </typeparam>
        </member>
        <member name="M:NKart.Core.Events.FormatterEventArgs`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.FormatterEventArgs`2"/> class.
            </summary>
            <param name="formatter">
            The formatter.
            </param>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="P:NKart.Core.Events.FormatterEventArgs`2.Formatter">
            <summary>
            Gets or sets the formatter.
            </summary>
        </member>
        <member name="P:NKart.Core.Events.FormatterEventArgs`2.Model">
            <summary>
            Gets or sets the model.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.MerchelloMigrationEventArgs">
            <summary>
            The merchello migration event args.
            </summary>
        </member>
        <member name="M:NKart.Core.Events.MerchelloMigrationEventArgs.#ctor(NKart.Core.Persistence.Migrations.Analytics.MigrationRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.MerchelloMigrationEventArgs"/> class.
            </summary>
            <param name="record">
            The record.
            </param>
        </member>
        <member name="P:NKart.Core.Events.MerchelloMigrationEventArgs.MigrationRecord">
            <summary>
            Gets or sets the migration record.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.PaymentAttemptEventArgs`1">
            <summary>
            The payment attempt args.
            </summary>
            <typeparam name="T">
            The type of object to return in the event args
            </typeparam>
        </member>
        <member name="M:NKart.Core.Events.PaymentAttemptEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.PaymentAttemptEventArgs`1"/> class.
            </summary>
            <param name="eventObject">
            The event object.
            </param>
        </member>
        <member name="P:NKart.Core.Events.PaymentAttemptEventArgs`1.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.SalesPreparationEventArgs`1">
            <summary>
            The sales preparation event args.
            </summary>
            <typeparam name="T">
            The type of object to return in the event args
            </typeparam>
        </member>
        <member name="M:NKart.Core.Events.SalesPreparationEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.SalesPreparationEventArgs`1"/> class.
            </summary>
            <param name="eventObject">
            The event object.
            </param>
        </member>
        <member name="P:NKart.Core.Events.SalesPreparationEventArgs`1.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="T:NKart.Core.Events.ObservationChannelEventArgs`1">
            <summary>
            Defines ObservationChannal event args
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:NKart.Core.Events.ObservationChannelEventArgs`1.ObservationEntity">
            <summary>
            The entity to be observered
            </summary>
        </member>
        <member name="T:NKart.Core.Events.NotificationEventArgs">
            <summary>
            Generic notifiy event args
            </summary>
        </member>
        <member name="T:NKart.Core.Events.NewEventArgs`1">
            <summary>
            The new event args.
            </summary>
            <typeparam name="T">
            The type of object
            </typeparam>
        </member>
        <member name="M:NKart.Core.Events.NewEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Events.NewEventArgs`1"/> class. 
            Constructor accepting entities in a creating operation
            </summary>
            <param name="eventObject">
            The object associated with the event
            </param>
        </member>
        <member name="P:NKart.Core.Events.NewEventArgs`1.Entity">
            <summary>
            Gets the entity.
            </summary>
        </member>
        <member name="M:NKart.Core.Events.StatusChangeEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor for accepting multiple entities that are used in the status changing operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:NKart.Core.Events.StatusChangeEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Constructor for accepting multiple entities that are used in the saving operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NKart.Core.Events.StatusChangeEventArgs`1.#ctor(`0)" -->
        <member name="M:NKart.Core.Events.StatusChangeEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor accepting a single entity reference
            </summary>
        </member>
        <member name="T:NKart.Core.Events.ConvertEventArgs`1">
            <summary>
            EventArgs for Customer conversion
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NKart.Core.Events.ConvertEventArgs`1.#ctor(`0)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
        </member>
        <member name="M:NKart.Core.Events.ConvertEventArgs`1.#ctor(`0,System.Boolean)">
            <summary>
            Constructor accepting a single entity instance
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="M:NKart.Core.Events.ConvertEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor accepting multiple entities that are used in the converting operation
            </summary>
            <param name="eventObject"></param>
        </member>
        <member name="M:NKart.Core.Events.ConvertEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Constructor accepting multiple entities that are used in the converting operation
            </summary>
            <param name="eventObject"></param>
            <param name="canCancel"></param>
        </member>
        <member name="T:NKart.Core.Exceptions.MerchelloApiException">
            <summary>
            A custom Merchello specific exception intended to be used to expose more information
            about API exceptions.
            </summary>
        </member>
        <member name="M:NKart.Core.Exceptions.MerchelloApiException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Exceptions.MerchelloApiException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="T:NKart.Core.Exceptions.OfferRedemptionException">
            <summary>
            An exception used when an offer redemption attempts fails
            </summary>
        </member>
        <member name="M:NKart.Core.Exceptions.OfferRedemptionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Exceptions.OfferRedemptionException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="T:NKart.Core.Exceptions.InvalidSkuException">
            <summary>
            An exception for invalid SKUs.
            </summary>
        </member>
        <member name="M:NKart.Core.Exceptions.InvalidSkuException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Exceptions.InvalidSkuException"/> class.
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Monitors.MonitorModelAttribute">
            <summary>
            Decorates a monitor with the type of model.
            </summary>
            <remarks>
            Primarily used for notification messages that use partial views
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.MonitorModelAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Monitors.MonitorModelAttribute"/> class.
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Monitors.MonitorModelAttribute.Model">
            <summary>
            Gets the model.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Monitors.INotificationMonitorBase">
            <summary>
            Defines the base NotificationMonitor
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Monitors.INotificationMonitorBase.MessageModelType">
            <summary>
            Gets the message model type.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.INotificationMonitorBase.CacheMessage(System.Collections.Generic.IEnumerable{NKart.Core.Models.INotificationMessage})">
            <summary>
            Caches a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">
            The messages to be cached
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.INotificationMonitorBase.CacheMessage(NKart.Core.Models.INotificationMessage)">
            <summary>
            Caches a single instance of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">
            The message to be cached
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.INotificationMonitorBase.RebuildCache">
            <summary>
            Clears and rebuilds the message cache
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.INotificationMonitorBase.RemoveCachedMessage(NKart.Core.Models.INotificationMessage)">
            <summary>
            Removes a single instance of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">
            The message to be removed from cache
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorEvents">
            <summary>
            The notification monitor events.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorEvents.ApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            The application started.
            </summary>
            <param name="umbracoApplication">
            The umbraco application.
            </param>
            <param name="applicationContext">
            The application context.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorEvents.NotificationMessageServiceOnSaved(NKart.Core.Services.INotificationMessageService,Umbraco.Core.Events.SaveEventArgs{NKart.Core.Models.INotificationMessage})">
            <summary>
            The notification message service on saved.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="saveEventArgs">
            The save event args.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Monitors.OrderShippedMonitor">
            <summary>
            Represents and order shipped monitor
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.OrderShippedMonitor.#ctor(NKart.Core.Gateways.Notification.INotificationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Monitors.OrderShippedMonitor"/> class.
            </summary>
            <param name="notificationContext">
            The notification context.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.OrderShippedMonitor.OnNext(NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel)">
            <summary>
            Trigger call to notifify the monitor of a change
            </summary>
            <param name="value">
            The model to be used by the monitor
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Monitors.PartialOrderShippedMonitor">
            <summary>
            Represents and order shipped monitor
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.PartialOrderShippedMonitor.#ctor(NKart.Core.Gateways.Notification.INotificationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Monitors.PartialOrderShippedMonitor"/> class.
            </summary>
            <param name="notificationContext">
            The notification context.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.PartialOrderShippedMonitor.OnNext(NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel)">
            <summary>
            Trigger call to notifify the monitor of a change
            </summary>
            <param name="value">
            The model to be used by the monitor
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Monitors.OrderConfirmationMonitor">
            <summary>
            Represents and order confirmation monitor
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.OrderConfirmationMonitor.#ctor(NKart.Core.Gateways.Notification.INotificationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Monitors.OrderConfirmationMonitor"/> class.
            </summary>
            <param name="notificationContext">
            The notification context.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.OrderConfirmationMonitor.OnNext(NKart.Core.Models.MonitorModels.IPaymentResultMonitorModel)">
            <summary>
            Trigger call to notify the monitor of a change
            </summary>
            <param name="value">
            The model to be used by the monitor
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1">
            <summary>
            Defines a <see cref="T:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1"/> base class
            </summary>
            <typeparam name="T">
            The Type of the model passed to the monitor
            </typeparam>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1._notificationContext">
            <summary>
            The notification context.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1._messages">
            <summary>
            The _messages.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.#ctor(NKart.Core.Gateways.Notification.INotificationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1"/> class. 
            </summary>
            <param name="notificationContext">
            The notification context.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.MessageModelType">
            <summary>
            Gets the message model type.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.Messages">
            <summary>
            Gets the cached collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.NotificationContext">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Notification.INotificationContext"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.CacheMessage(System.Collections.Generic.IEnumerable{NKart.Core.Models.INotificationMessage})">
            <summary>
            Caches a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="messages">
            A collection of <see cref="T:NKart.Core.Models.INotificationMessage"/> to be cached
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.CacheMessage(NKart.Core.Models.INotificationMessage)">
            <summary>
            Caches a single instance of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">
            The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be cached
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.RebuildCache">
            <summary>
            Clears the message cache
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.RemoveCachedMessage(NKart.Core.Models.INotificationMessage)">
            <summary>
            Removes a single instance of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">
            The message.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.Initialize">
            <summary>
            Object initialization helper
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Monitors.NotificationMonitorBase`1.GetNotificationMessages">
            <summary>
            Method used in Lazy collection instantiation of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <returns>
            A collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory">
            <summary>
            The order shipped trigger helper.
            </summary>
            <remarks>
            http://issues.merchello.com/youtrack/issue/M-532
            </remarks>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory._orderService">
            <summary>
            The <see cref="T:NKart.Core.Services.IOrderService"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory._invoiceService">
            <summary>
            The <see cref="T:NKart.Core.Services.IInvoiceService"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory._storeSettingService">
            <summary>
            The <see cref="T:NKart.Core.Services.IStoreSettingService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory.#ctor(NKart.Core.IMerchelloContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory"/> class.
            </summary>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory.Build(NKart.Core.Models.IShipment,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The build.
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="contacts">
            The collection of contact addresses
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.MonitorModels.IShipmentResultNotifyModel"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Triggering.OrderShippedTrigger">
            <summary>            
            Represents and OrderShippedTrigger
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Triggering.OrderShippedTrigger._factory">
            <summary>
            The <see cref="T:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.OrderShippedTrigger.Notify(NKart.Core.Models.IShipment,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Value to pass to the notification monitors
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="contacts">
            An additional list of contacts
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Triggering.PartialOrderShippedTrigger">
            <summary>
            The partial order shipped trigger.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Triggering.PartialOrderShippedTrigger._factory">
            <summary>
            The <see cref="T:NKart.Core.Gateways.Notification.Triggering.ShipmentResultNotifyModelFactory"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.PartialOrderShippedTrigger.Notify(NKart.Core.Models.IShipment,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Value to pass to the notification monitors
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="contacts">
            An additional list of contacts
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Triggering.INotificationTrigger">
            <summary>
            Defines a notification trigger
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.INotificationTrigger.Notify(System.Object)">
            <summary>
            Value to pass to the notification monitors
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.INotificationTrigger.Notify(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Value to pass to the notification monitors
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="contacts">
            The contacts.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Triggering.NotificationTriggerBase`2">
            <summary>
            Defines the <see cref="T:NKart.Core.Gateways.Notification.Triggering.NotificationTriggerBase`2"/>
            </summary>
            <typeparam name="TInputModel">The type passed to the trigger</typeparam>
            <typeparam name="TMonitorModel">The type of the monitor</typeparam>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.NotificationTriggerBase`2.Notify(System.Object)">
            <summary>
            Value to pass to the notification monitors
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.NotificationTriggerBase`2.Notify(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Value to pass to the notification monitors with additional contacts not defined in notification message (ex. an instance specific customer or vender)
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="contacts">
            The contacts.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.NotificationTriggerBase`2.Notify(`0)">
            <summary>
            Value to pass to the notification monitors
            </summary>
            <param name="model">
            The model.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.NotificationTriggerBase`2.Notify(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Value to pass to the notification monitors with addtional contacts not defined in notification message (ex. an instance specific customer or vender)
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="contacts">
            The contacts.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Triggering.OrderConfirmationTrigger">
            <summary>
            Represents and OrderConfirmationTrigger
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Triggering.OrderConfirmationTrigger._storeSettingService">
            <summary>
            The <see cref="T:NKart.Core.Services.IStoreSettingService"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Triggering.OrderConfirmationTrigger._shipMethodService">
            <summary>
            The <see cref="T:NKart.Core.Services.IShipMethodService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.OrderConfirmationTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Triggering.OrderConfirmationTrigger"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.OrderConfirmationTrigger.#ctor(NKart.Core.IMerchelloContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Triggering.OrderConfirmationTrigger"/> class.
            </summary>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Triggering.OrderConfirmationTrigger.Notify(NKart.Core.Gateways.Payment.IPaymentResult,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Value to pass to the notification monitors
            </summary>
            <param name="model">
            The model.
            </param>
            <param name="contacts">
            An additional list of contacts
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.INotificationContext">
            <summary>
            Defines the NotificationContext
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationContext.GetNotificationMessagesByMonitorKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s by a Monitor Key (Guid)
            </summary>
            <param name="monitorKey">The monitor key</param>
            <returns>A collection of NotificationMessage</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationContext.Send(NKart.Core.Models.INotificationMessage)">
            <summary>
            Sends a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be sent</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationContext.Send(NKart.Core.Models.INotificationMessage,NKart.Core.Formatters.IFormatter)">
            <summary>
            Sends a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be sent</param>
            <param name="formatter">The <see cref="T:NKart.Core.Formatters.IFormatter"/> to use when formatting the message</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationContext.Send(NKart.Core.Models.INotificationMessage,NKart.Core.Formatters.IFormatter,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment})">
            <summary>
            Sends a <see cref="T:NKart.Core.Models.INotificationMessage"/>.
            </summary>
            <param name="message">
            The message.
            </param>
            <param name="formatter">
            The formatter.
            </param>
            <param name="attachments">
            The attachments.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod">
            <summary>
            Defines a notification gateway method
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.INotificationGatewayMethod.NotificationMethod">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.INotificationGatewayMethod.NotificationMessages">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s associated with this NotificationMethod
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayMethod.CreateNotificationMessage(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="name">A name for the message (used in Back Office UI)</param>
            <param name="description">A description for the message (used in Back Office UI)</param>
            <param name="fromAddress">The senders or "From Address"</param>
            <param name="recipients">A collection of recipients</param>
            <param name="bodyText">The body text for the message</param>
            <returns>A <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayMethod.SaveNotificationMessage(NKart.Core.Models.INotificationMessage)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayMethod.DeleteNotificationMessage(NKart.Core.Models.INotificationMessage)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be deleted</param>        
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayMethod.Send(NKart.Core.Models.INotificationMessage)">
            <summary>
            Sends a <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/>
            </summary>
            <param name="notificationMessage">The <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/> to be sent</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayMethod.Send(NKart.Core.Models.INotificationMessage,NKart.Core.Formatters.IFormatter)">
            <summary>
            Sends a <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/>
            </summary>
            <param name="notificationMessage">The <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/> to be sent</param>
            <param name="formatter">The <see cref="T:NKart.Core.Formatters.IFormatter"/> to use to format the message</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayMethod.Send(NKart.Core.Models.INotificationMessage,NKart.Core.Formatters.IFormatter,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment})">
            <summary>
            Sends a <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/> with attachments.
            </summary>
            <param name="notificationMessage">
            The notification message.
            </param>
            <param name="formatter">
            The formatter.
            </param>
            <param name="attachments">
            The attachments.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.NotificationContext">
            <summary>
            Represents a NotificationContext
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationContext.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Gateways.IGatewayProviderResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.NotificationContext"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="resolver">
            The resolver.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationContext.GetProviderByMethodKey(System.Guid)">
            <summary>
            Returns an instance of an 'active' GatewayProvider associated with a GatewayMethod based given the unique Key (GUID) of the GatewayMethod
            </summary>
            <param name="gatewayMethodKey">The unique key (GUID) of the <see cref="T:NKart.Core.Gateways.IGatewayMethod"/></param>
            <returns>An instantiated GatewayProvider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationContext.GetNotificationMessagesByMonitorKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s by a Monitor Key (GUID)
            </summary>
            <param name="monitorKey">The GUID identifier of the the <see cref="T:NKart.Core.Observation.IMonitor"/></param>
            <returns>A collection of NotificationMessage</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationContext.Send(NKart.Core.Models.INotificationMessage)">
            <summary>
            Sends a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be sent</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationContext.Send(NKart.Core.Models.INotificationMessage,NKart.Core.Formatters.IFormatter)">
            <summary>
            Sends a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be sent</param>
            <param name="formatter">The <see cref="T:NKart.Core.Formatters.IFormatter"/> to use when formatting the message</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationContext.Send(NKart.Core.Models.INotificationMessage,NKart.Core.Formatters.IFormatter,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment})">
            <summary>
            Sends a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">
            The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be sent
            </param>
            <param name="formatter">
            The <see cref="T:NKart.Core.Formatters.IFormatter"/> to use when formatting the message
            </param>
            <param name="attachments">
            The attachments.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase">
            <summary>
            Represents a NotificationGatewayMethodBase object
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase._gatewayProviderService">
            <summary>
            The _gateway provider service.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase._notificationMethod">
            <summary>
            The <see cref="T:NKart.Core.Models.INotificationMethod"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase._notificationMessages">
            <summary>
            The collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.INotificationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="notificationMethod">
            The notification method.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.NotificationMethod">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.INotificationMethod"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.NotificationMessages">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.INotificationMessage"/>s associated with this NotificationMethod
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.GatewayProviderService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IGatewayProviderService"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.CreateNotificationMessage(System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="name">A name for the message (used in Back Office UI)</param>
            <param name="description">A description for the message (used in Back Office UI)</param>
            <param name="fromAddress">The senders or "From Address"</param>
            <param name="recipients">A collection of recipients</param>
            <param name="bodyText">The body text for the message</param>
            <returns>A <see cref="T:NKart.Core.Models.INotificationMessage"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.SaveNotificationMessage(NKart.Core.Models.INotificationMessage)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.DeleteNotificationMessage(NKart.Core.Models.INotificationMessage)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
            <param name="message">The <see cref="T:NKart.Core.Models.INotificationMessage"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.Send(NKart.Core.Models.INotificationMessage)">
            <summary>
            Sends a <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/>
            </summary>
            <param name="notificationMessage">The <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/> to be sent</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.Send(NKart.Core.Models.INotificationMessage,NKart.Core.Formatters.IFormatter)">
            <summary>
            Sends a <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/>
            </summary>
            <param name="notificationMessage">The <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/> to be sent</param>
            <param name="formatter">The <see cref="T:NKart.Core.Formatters.IFormatter"/> to use to format the message</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.Send(NKart.Core.Models.INotificationMessage,NKart.Core.Formatters.IFormatter,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment})">
            <summary>
            Sends a <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/>
            </summary>
            <param name="notificationMessage">
            The <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/> to be sent
            </param>
            <param name="formatter">
            The <see cref="T:NKart.Core.Formatters.IFormatter"/> to use to format the message
            </param>
            <param name="attachments">
            The attachments.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayMethodBase.PerformSend(NKart.Core.Gateways.Notification.IFormattedNotificationMessage,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment})">
            <summary>
            Does the actual work of sending the <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/>
            </summary>
            <param name="message">
            The <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/> to be sent
            </param>
            <param name="attachments">
            The attachments.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.NotificationGatewayProviderBase">
            <summary>
            Defines the base NotificationGatewayProvider
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.NotificationGatewayProviderBase.NotificationMethods">
            <summary>
            Gets or sets a collection of all <see cref="T:NKart.Core.Models.INotificationMethod"/>s associated with this provider
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayProviderBase.CreateNotificationMethod(NKart.Core.Gateways.IGatewayResource,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>
            </summary>
            <param name="gatewayResource">The <see cref="T:NKart.Core.Gateways.IGatewayResource"/> implemented by this method</param>
            <param name="name">The name of the notification method</param>
            <param name="serviceCode">The description of the notification method</param>        
            <returns>The <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/> created</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayProviderBase.SaveNotificationMethod(NKart.Core.Gateways.Notification.INotificationGatewayMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayProviderBase.DeleteNotificationMethod(NKart.Core.Gateways.Notification.INotificationGatewayMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayProviderBase.GetNotificationGatewayMethodByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/> by it's unique Key (Guid)
            </summary>
            <param name="notificationGatewayMethodKey">
            The unique key (Guid) of the <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/> or null
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayProviderBase.GetAllNotificationGatewayMethods">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>s for this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.NotificationGatewayProviderBase.DeleteAllNotificationGatewayMethods">
            <summary>
            Used for testing
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Smtp.ISmtpNotificationGatewayProvider">
            <summary>
            Marker interface for the SMTP Notification Gateway Provider
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod">
            <summary>
            Represents a SmtpNotificationGatewayMethod
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod._settings">
            <summary>
            The _settings.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.INotificationMethod,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="notificationMethod">
            The notification method.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="E:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod.Sending">
            <summary>
            Occurs before sending the email message.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod.PerformSend(NKart.Core.Gateways.Notification.IFormattedNotificationMessage,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment})">
            <summary>
            Does the actual work of sending the <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/>
            </summary>
            <param name="message">
            The <see cref="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage"/> to be sent
            </param>
            <param name="attachments">
            The attachments.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod.Send(System.Net.Mail.MailMessage,System.Net.NetworkCredential)">
            <summary>
            Sends an email, logging any errors.
            </summary>
            <param name="msg">
            The <see cref="T:System.Net.Mail.MailMessage"/>.
            </param>
            <param name="credentials">
            The credentials.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayMethod.SendAsync(System.Net.Mail.MailMessage,System.Net.NetworkCredential)">
            <summary>
            Sends an email asynchronously, logging any errors.
            </summary>
            <param name="msg">
            The <see cref="T:System.Net.Mail.MailMessage"/> to send.
            </param>
            <param name="credentials">
            The <see cref="T:System.Net.NetworkCredential"/>s containing identity credentials.
            </param>
            <returns>
            True if the email is sent successfully; otherwise, false.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProvider">
            <summary>
            The smtp notification gateway provider.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProvider.AvailableResources">
            <summary>
            The available resources.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProvider.ListResourcesOffered">
            <summary>
            Returns a collection of all possible gateway methods associated with this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.IGatewayResource"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProvider.CreateNotificationMethod(NKart.Core.Gateways.IGatewayResource,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>
            </summary>
            <param name="gatewayResource">The <see cref="T:NKart.Core.Gateways.IGatewayResource"/> implemented by this method</param>
            <param name="name">The name of the notification method</param>
            <param name="serviceCode"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProvider.GetAllNotificationGatewayMethods">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>s for this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings">
            <summary>
            Represents SMTP Notification Gateway Provider Settings
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings._credentials">
            <summary>
            The credentials.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings"/> class.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings"/> class.
            </summary>
            <param name="host">
            The host.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings.Host">
            <summary>
            Gets or sets the SMTP Host
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings.UserName">
            <summary>
            Gets or sets the UserName
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings.Password">
            <summary>
            Gets or sets the Password
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings.EnableSsl">
            <summary>
            Gets or sets a value indicating whether or not to enable SSL
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings.Port">
            <summary>
            Gets or sets the port
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings.HasCredentials">
            <summary>
            Gets a value indicating whether or not credentials are present
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings.Credentials">
            <summary>
            Gets the credentials.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Smtp.SmtpProviderExtendedDataExtensions">
            <summary>
            Extension methods for Smtp Gateway Provider Extended Data Collection
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpProviderExtendedDataExtensions.GetSmtpProviderSettings(NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Utility to get SMTP Gateway Provider settings from the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpProviderExtendedDataExtensions.SaveSmtpProviderSettings(NKart.Core.Models.ExtendedDataCollection,NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings)">
            <summary>
            Saves <see cref="T:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings"/> to an ExtendedDataCollection
            </summary>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <param name="settings">The <see cref="T:NKart.Core.Gateways.Notification.Smtp.SmtpNotificationGatewayProviderSettings"/> to save</param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.Smtp.SmtpClientExtensions">
            <summary>
            SMTP Client extension methods
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.Smtp.SmtpClientExtensions.SendAsync(System.Net.Mail.SmtpClient,System.Net.Mail.MailMessage)">
            <summary>
            Return the Task for sending a <see cref="T:System.Net.Mail.MailMessage"/> asynchronously
            </summary>
            <param name="client">The <see cref="T:System.Net.Mail.SmtpClient"/> object to extend</param>
            <param name="message">The <see cref="T:System.Net.Mail.MailMessage"/> to send</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/></returns>
            <remarks>
            http://stackoverflow.com/questions/15140308/how-to-send-mails-asynchronous/
            http://stackoverflow.com/questions/3408397/asynchronously-sending-emails-in-c
            </remarks>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.IFormattedNotificationMessage">
            <summary>
            Defines a base notification
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.IFormattedNotificationMessage.From">
            <summary>
            Gets the sender's From address
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.IFormattedNotificationMessage.ReplyTo">
            <summary>
            Gets the optional reply to address
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.IFormattedNotificationMessage.Name">
            <summary>
            Gets or sets the name of the <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.IFormattedNotificationMessage.Recipients">
            <summary>
            Gets a list of recipients for the notification.
            </summary>
            <remarks>
            This could be email addresses, mailing addresses, mobile numbers
            </remarks>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.IFormattedNotificationMessage.SendToCustomer">
            <summary>
            Gets a value indicating whether the notification should also be sent to the customer
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.IFormattedNotificationMessage.BodyText">
            <summary>
            Gets the notification message body text
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.IFormattedNotificationMessage.FormatStatus">
            <summary>
            Gets the status of the formatted message
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.IFormattedNotificationMessage.AddRecipient(System.String)">
            <summary>
            Adds a recipient to the recipient list
            </summary>
            <param name="value">The recipient to be added</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.IFormattedNotificationMessage.RemoveRecipient(System.String)">
            <summary>
            Removes a recipient from the recipient list
            </summary>
            <param name="value">The recipient to be removed</param>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.INotificationGatewayProvider">
            <summary>
            Defines a notification gateway provider - a class responsible for sending notifications
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.INotificationGatewayProvider.NotificationMethods">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.INotificationMethod"/>'s associated with this provider
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayProvider.CreateNotificationMethod(NKart.Core.Gateways.IGatewayResource,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>
            </summary>
            <param name="gatewayResource">The <see cref="T:NKart.Core.Gateways.IGatewayResource"/> implemented by this method</param>
            <param name="name">The name of the notification method</param>
            <param name="serviceCode">The description of the notification method</param>
            <returns>The newly created <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayProvider.SaveNotificationMethod(NKart.Core.Gateways.Notification.INotificationGatewayMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayProvider.DeleteNotificationMethod(NKart.Core.Gateways.Notification.INotificationGatewayMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayProvider.GetNotificationGatewayMethodByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/> by it's unique Key (Guid)
            </summary>
            <param name="notificationGatewayMethodKey">
            The unique key (Guid) of the <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.INotificationGatewayProvider.GetAllNotificationGatewayMethods">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/>s for this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Notification.INotificationGatewayMethod"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.Notification.FormattedNotificationMessage">
            <summary>
            Defines the base notification
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.FormattedNotificationMessage._notificationMessage">
            <summary>
            The notification message.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.FormattedNotificationMessage._formatter">
            <summary>
            The formatter.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.FormattedNotificationMessage._recipients">
            <summary>
            The recipients.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Notification.FormattedNotificationMessage._formattedMessage">
            <summary>
            The formatted message.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.FormattedNotificationMessage.#ctor(NKart.Core.Models.INotificationMessage,NKart.Core.Formatters.IFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Notification.FormattedNotificationMessage"/> class.
            </summary>
            <param name="notificationMessage">
            The notification message.
            </param>
            <param name="formatter">
            The formatter.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.FormattedNotificationMessage.From">
            <summary>
            Gets the sender's From address
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.FormattedNotificationMessage.ReplyTo">
            <summary>
            Gets the optional ReplyTo address
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.FormattedNotificationMessage.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.FormattedNotificationMessage.Recipients">
            <summary>
            Gets a list of recipients for the notification.
            </summary>
            <remarks>
            This could be email addresses, mailing addresses, mobile numbers
            </remarks>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.FormattedNotificationMessage.SendToCustomer">
            <summary>
            Gets a value indicating whether the notification should also be sent to the customer
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.FormattedNotificationMessage.BodyText">
            <summary>
            Gets notification message body text
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.FormattedNotificationMessage.FormatStatus">
            <summary>
            Gets status of the formatted message
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Notification.FormattedNotificationMessage.NotificationMessage">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.INotificationMessage"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.FormattedNotificationMessage.AddRecipient(System.String)">
            <summary>
            Adds a recipient to the send to list
            </summary>
            <param name="value">The recipient</param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.FormattedNotificationMessage.RemoveRecipient(System.String)">
            <summary>
            Removes a recipient from the send to list
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.FormattedNotificationMessage.GetMessage">
            <summary>
            Gets the message.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Notification.FormattedNotificationMessage.Initialize">
            <summary>
            The initialize.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.AuthorizeOperationData">
            <summary>
            The authorize operation data.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.AuthorizeOperationData.Invoice">
            <summary>
            Gets or sets the invoice.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.AuthorizeOperationData.Amount">
            <summary>
            Gets or sets the amount.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.AuthorizeOperationData.PaymentMethod">
            <summary>
            Gets or sets the <see cref="T:NKart.Core.Models.IPaymentMethod"/>.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.AuthorizeOperationData.ProcessorArgumentCollection">
            <summary>
            Gets or sets the processor argument collection.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute">
            <summary>
            The payment gateway method attribute.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="includeInPaymentSelection">
            The include in payment selection.
            </param>
            <param name="requiresCustomer">
            A value indicating whether or not this payment method must be used with a logged in customer (vaulted transactions)
            </param>
            <remarks>
            TODO rename includeInPaymentSelection ... these are payments!
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="authorizeEditorView">
            The authorize editor view.
            </param>
            <param name="includeInPaymentSelection">
            The include in payment selection.
            </param>
            <param name="requiresCustomer">
            A value indicating whether or not this payment method must be used with a logged in customer (vaulted transactions)
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="authorizeEditorView">
            The authorize editor view.
            </param>
            <param name="authorizeCaptureEditorView">
            The authorize capture editor view.
            </param>
            <param name="includeInPaymentSelection">
            The include in payment selection.
            </param>
            <param name="requiresCustomer">
            A value indicating whether or not this payment method must be used with a logged in customer (vaulted transactions)
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="authorizeEditorView">
            The authorize Editor View.
            </param>
            <param name="authorizeCaptureEditorView">
            The authorize capture editor view.
            </param>
            <param name="voidPaymentEditorView">
            The void payment editor view.
            </param>
            <param name="includeInPaymentSelection">
            The include in payment selection.
            </param>
            <param name="requiresCustomer">
            A value indicating whether or not this payment method must be used with a logged in customer (vaulted transactions)
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="authorizeEditorView">
            The authorize Editor View.
            </param>
            <param name="authorizeCaptureEditorView">
            The authorize capture editor view.
            </param>
            <param name="voidPaymentEditorView">
            The void payment editor view.
            </param>
            <param name="refundPaymentEditorView">
            The refund payment editor view.
            </param>
            <param name="includeInPaymentSelection">
            The include in shipment quotations.
            </param>
            <param name="requiresCustomer">
            A value indicating whether or not this payment method must be used with a logged in customer (vaulted transactions)
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="authorizeEditorView">
            The authorize Editor View.
            </param>
            <param name="authorizeCaptureEditorView">
            The authorize capture editor view.
            </param>
            <param name="voidPaymentEditorView">
            The void payment editor view.
            </param>
            <param name="refundPaymentEditorView">
            The refund payment editor view.
            </param>
            <param name="capturePaymentEditorView">
            The capture payment editor view
            </param>
            <param name="includeInPaymentSelection">
            The include in shipment quotations.
            </param>
            <param name="requiresCustomer">
            A value indicating whether or not this payment method must be used with a logged in customer (vaulted transactions)
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.Title">
            <summary>
            Gets a title to be displayed in the back office if applicable.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.AuthorizeEditorView">
            <summary>
            Gets the authorize capture editor view.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.AuthorizeCaptureEditorView">
            <summary>
            Gets the authorize capture editor view.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.VoidPaymentEditorView">
            <summary>
            Gets the void payment editor view.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.RefundPaymentEditorView">
            <summary>
            Gets the refund payment editor view.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.CapturePaymentEditorView">
            <summary>
            Gets the capture payment editor view.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.IncludeInPaymentSelection">
            <summary>
            Gets a value indicating whether or not the payment method should be used when quoting shipments.
            If false, it is assumed that the payment method is to be used programmatically for some other purpose.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodAttribute.RequiresCustomer">
            <summary>
            Gets a value indicating whether or not this payment method must be used with a logged in customer (vaulted transactions)
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.PaymentOperationData">
            <summary>
            The payment operation event data.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentOperationData.Payment">
            <summary>
            Gets or sets the payment.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayMethod">
            <summary>
            Represents a CashPaymentMethod
            </summary>    
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayMethod.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.IPaymentMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayMethod"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="paymentMethod">
            The payment method.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayMethod.PerformAuthorizePayment(NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Does the actual work of creating and processing the payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="args">Any arguments required to process the payment. (Maybe a username, password or some API Key)</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayMethod.PerformAuthorizeCapturePayment(NKart.Core.Models.IInvoice,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            The perform authorize capture payment.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="amount">
            The amount.
            </param>
            <param name="args">
            The args.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayMethod.PerformCapturePayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Does the actual work of capturing a payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="payment">the <see cref="T:NKart.Core.Models.IPayment"/></param>
            <param name="amount">The amount</param>
            <param name="args">Any arguments required to process the payment. (Maybe a username, password or some API Key)</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayMethod.PerformRefundPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Does the actual work of refunding the payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="amount">The amount of the payment to be refunded</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayProvider">
            <summary>
            Represents a CashPaymentGatewayProvider
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayProvider.AvailableResources">
            <summary>
            The available resources.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayProvider.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.IGatewayProviderSettings,Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayProvider"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="gatewayProviderSettings">
            The gateway provider settings.
            </param>
            <param name="runtimeCacheProvider">
            The runtime cache provider.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayProvider.CreatePaymentMethod(System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </summary>
            <param name="name">The name of the payment method</param>
            <param name="description">The description of the payment method</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayProvider.CreatePaymentMethod(NKart.Core.Gateways.IGatewayResource,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </summary>
            <param name="gatewayResource">The <see cref="T:NKart.Core.Gateways.IGatewayResource"/> implemented by this method</param>
            <param name="name">The name of the payment method</param>
            <param name="description">The description of the payment method</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayProvider.GetPaymentGatewayMethodByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> by it's unique 'key'
            </summary>
            <param name="paymentMethodKey">The key of the <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayProvider.GetPaymentGatewayMethodByPaymentCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> by it's payment code
            </summary>
            <param name="paymentCode">The payment code of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.Cash.CashPaymentGatewayProvider.ListResourcesOffered">
            <summary>
            Returns a collection of all possible gateway methods associated with this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.IGatewayResource"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.Cash.ICashPaymentGatewayMethod">
            <summary>
            Marker interface for a CashPaymentGatewayMethod
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.Cash.ICashPaymentGatewayProvider">
            <summary>
            Marker interface for a CashPaymentGatewayProvider
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.PaymentResult">
            <summary>
            Represents a Result
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentResult.#ctor(Umbraco.Core.Attempt{NKart.Core.Models.IPayment},NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentResult"/> class.
            </summary>
            <param name="payment">
            The payment.
            </param>
            <param name="invoice">
            The invoice.
            </param>
            <param name="approveOrderCreation">
            The approve order creation.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentResult.#ctor(Umbraco.Core.Attempt{NKart.Core.Models.IPayment},NKart.Core.Models.IInvoice,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentResult"/> class.
            </summary>
            <param name="payment">
            The payment.
            </param>
            <param name="invoice">
            The invoice.
            </param>
            <param name="approveOrderCreation">
            The approve order creation.
            </param>
            <param name="redirectUrl">
            The redirect URL.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentResult.Payment">
            <summary>
            Gets the Result
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentResult.Invoice">
            <summary>
            Gets the invoice.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentResult.ApproveOrderCreation">
            <summary>
            Gets a value indicating whether or not an order should be generated
            as a result of this payment
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentResult.RedirectUrl">
            <summary>
            Gets the redirect URL.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.ProcessorArgumentCollection">
            <summary>
            The processor argument collection.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase">
            <summary>
            Represents a base GatewayPaymentMethod 
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase._gatewayProviderService">
            <summary>
            The _gateway provider service.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase._paymentMethod">
            <summary>
            The _payment method.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.IPaymentMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="paymentMethod">
            The payment method.
            </param>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.Authorizing">
            <summary>
            The authorizing event handler.  Fires before an authorization attempt.
            </summary>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.Capturing">
            <summary>
            The capturing event handler.  Fires before an authorize capture or capture attempt.
            </summary>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.AuthorizeCapturing">
            <summary>
            The authorize capturing event handler.  Fires after an authorize / capture attempt
            </summary>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.Voiding">
            <summary>
            The voiding event handler.  Fires before an void attempt.
            </summary>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.Refunding">
            <summary>
            The refunding event handler.  Fires before an refund attempt.
            </summary>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.AuthorizeAttempted">
            <summary>
            The authorize attempted event handler. Fires after an authorize attempt.
            </summary>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.CaptureAttempted">
            <summary>
            The capture attempted event handler.  Fires after a capture attempt
            </summary>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.AuthorizeCaptureAttempted">
            <summary>
            The authorize capture attempted event handler.  Fires after an authorize / capture attempt
            </summary>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.VoidAttempted">
            <summary>
            The void attempted event handler. Fires after a void attempt
            </summary>
        </member>
        <member name="E:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.RefundAttempted">
            <summary>
            The refund attempted event handler.  Fires after a refund attempt
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.PaymentMethod">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.GatewayProviderService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IGatewayProviderService"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.AuthorizePayment(NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Processes a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be paid</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.AuthorizeCapturePayment(NKart.Core.Models.IInvoice,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="invoice">The invoice to be paid</param>
            <param name="amount">The amount of the payment to the invoice</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.CapturePayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be paid</param>
            <param name="payment">The payment to capture</param>
            <param name="amount">The amount of the payment to be captured</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.RefundPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="amount">The amount to be refunded</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.VoidPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice associated with the payment to be voided</param>
            <param name="payment">The payment to be voided</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.PerformAuthorizePayment(NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Does the actual work of creating and authorizing the payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="args">Any arguments required to process the payment. (Maybe a username, password or some API Key)</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.PerformAuthorizeCapturePayment(NKart.Core.Models.IInvoice,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Doe the actual work of Authorizes and Captures a Payment
            </summary>
            <param name="invoice">The invoice to be paid</param>
            <param name="amount">The amount of the payment to the invoice</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.PerformCapturePayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Does the actual work of capturing a payment
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="payment">The payment to be captured</param>
            <param name="amount">The amount of the payment to be captured</param>
            <param name="args">Any arguments required to process the payment. (Maybe a username, password or some API Key)</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.PerformRefundPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Does the actual work of refunding the payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="amount">The amount of the payment to be refunded</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.PerformVoidPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Does the actual work of voiding a payment
            </summary>
            <param name="invoice">The invoice to which the payment is associated</param>
            <param name="payment">The payment to be voided</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.CalculateTotalOwed(NKart.Core.Models.IInvoice)">
            <summary>
            The calculate total owed.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <returns>
            The <see cref="T:System.Decimal"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.AssertPaymentApplied(NKart.Core.Gateways.Payment.IPaymentResult,NKart.Core.Models.IInvoice)">
            <summary>
            Provides the assertion that the payment is applied to the invoice
            </summary>
            <param name="response">
            The response.
            </param>
            <param name="invoice">
            The invoice.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayMethodBase.AssertInvoiceStatus(NKart.Core.Models.IInvoice)">
            <summary>
            Validates the invoice status is correct after a payment request
            </summary>
            <param name="invoice">
            The invoice.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod">
            <summary>
            Defines a GatewayPaymentMethod
            </summary>
            <remarks>
            
            There will be a breaking change when we expose customers as we will want to require
            a couple of additional methods - eg.
            
            ProcessPayment(ICustomer customer, decimal amount) - which would add a customer credit (an unapplied payment)
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayMethod.AuthorizePayment(NKart.Core.Models.IInvoice,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be payed</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayMethod.AuthorizeCapturePayment(NKart.Core.Models.IInvoice,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="invoice">The invoice to be payed</param>
            <param name="amount">The amount of the payment to the invoice</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayMethod.CapturePayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Captures a payment for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The invoice to be payed</param>
            <param name="payment">The</param>
            <param name="amount">The amount to the payment to be captured</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayMethod.RefundPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,System.Decimal,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Refunds a payment
            </summary>
            <param name="invoice">The invoice to be the payment was applied</param>
            <param name="payment">The payment to be refunded</param>
            <param name="amount">The amount of the payment to be refunded</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayMethod.VoidPayment(NKart.Core.Models.IInvoice,NKart.Core.Models.IPayment,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Voids a payment
            </summary>
            <param name="invoice">The invoice assoicated with the payment to be voided</param>
            <param name="payment">The payment to be voided</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.IPaymentGatewayMethod.PaymentMethod">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.IPaymentResult">
            <summary>
            Defines a PaymentResult
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.IPaymentResult.Payment">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IPayment"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.IPaymentResult.Invoice">
            <summary>
            Gets the invoice
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.IPaymentResult.ApproveOrderCreation">
            <summary>
            Gets a value indicating whether or not the sales preparation should generate the <see cref="T:NKart.Core.Models.IOrder"/> and <see cref="T:NKart.Core.Models.IShipment"/>(s)
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.IPaymentResult.RedirectUrl">
            <summary>
            Gets the redirect url.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.IPaymentContext">
            <summary>
            Defines the Payment Context
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentContext.GetPaymentGatewayMethods">
            <summary>
            Gets a list of all possible Payment Methods
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>s</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentContext.GetPaymentGatewayMethodByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> by its unique key
            </summary>
            <param name="paymentMethodKey">The Key of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.IPaymentGatewayProvider">
            <summary>
            Defines a payment gateway provider
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayProvider.CreatePaymentMethod(NKart.Core.Gateways.IGatewayResource,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </summary>
            <param name="gatewayResource">The <see cref="T:NKart.Core.Gateways.IGatewayResource"/> implemented by this method</param>
            <param name="name">The name of the payment method</param>
            <param name="description">The description of the payment method</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayProvider.SavePaymentMethod(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayProvider.DeletePaymentMethod(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to delete</param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayProvider.GetPaymentGatewayMethodByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> by it's unique 'key'
            </summary>
            <param name="paymentMethodKey">The key of the <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.IPaymentGatewayProvider.GetPaymentGatewayMethodByPaymentCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> by it's payment code
            </summary>
            <param name="paymentCode">The payment code of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.IPaymentGatewayProvider.PaymentMethods">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IPaymentMethod"/>s associated with this provider
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.PaymentContext">
            <summary>
            Represents the Payment Context
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentContext.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Gateways.IGatewayProviderResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentContext"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="resolver">
            The resolver.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentContext.GetProviderByMethodKey(System.Guid)">
            <summary>
            Returns an instance of an 'active' GatewayProvider associated with a GatewayMethod based given the unique Key (GUID) of the GatewayMethod
            </summary>
            <param name="gatewayMethodKey">The unique key (GUID) of the <see cref="T:NKart.Core.Gateways.IGatewayMethod"/></param>
            <returns>An instantiated GatewayProvider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentContext.GetPaymentGatewayMethods">
            <summary>
            Gets a list of all possible Payment Methods
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>s</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentContext.GetPaymentGatewayMethodByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> by its unique key
            </summary>
            <param name="paymentMethodKey">The Key of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.Payment.PaymentGatewayProviderBase">
            <summary>
            Represents an abstract PaymentGatewayProvider
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayProviderBase.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.IGatewayProviderSettings,Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Payment.PaymentGatewayProviderBase"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="gatewayProviderSettings">
            The gateway provider settings.
            </param>
            <param name="runtimeCacheProvider">
            The runtime cache provider.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayProviderBase.CreatePaymentMethod(NKart.Core.Gateways.IGatewayResource,System.String,System.String)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </summary>
            <param name="gatewayResource">The <see cref="T:NKart.Core.Gateways.IGatewayResource"/> implemented by this method</param>
            <param name="name">The name of the payment method</param>
            <param name="description">The description of the payment method</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayProviderBase.SavePaymentMethod(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayProviderBase.DeletePaymentMethod(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to delete</param>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayProviderBase.GetPaymentGatewayMethodByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> by it's unique 'key'
            </summary>
            <param name="paymentMethodKey">The key of the <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Payment.PaymentGatewayProviderBase.GetPaymentGatewayMethodByPaymentCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> by it's payment code
            </summary>
            <param name="paymentCode">The payment code of the <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/></returns>
        </member>
        <member name="P:NKart.Core.Gateways.Payment.PaymentGatewayProviderBase.PaymentMethods">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.IPaymentMethod"/>s associated with this provider
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.IProductTaxCalculationResult">
            <summary>
            Defines the ProductTaxCalculationResult.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.IProductTaxCalculationResult.PriceResult">
            <summary>
            Gets the price result.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.IProductTaxCalculationResult.SalePriceResult">
            <summary>
            Gets the sale price result.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.ITaxationByProductMethod">
            <summary>
            Defines a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> that can be used for product based taxation.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationByProductMethod.CalculateTaxForProduct(NKart.Core.Models.IProductVariantDataModifierData)">
            <summary>
            Calculates taxes for a product.
            </summary>
            <param name="product">
            The <see cref="T:NKart.Core.Models.IProductVariantDataModifierData"/>.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.ITaxationByProductProvider">
            <summary>
            Marker interface for a TaxationProvider that can tax by product
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.ProductTaxCalculationResult">
            <summary>
            The product tax calculation result.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ProductTaxCalculationResult.#ctor(System.String,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.ProductTaxCalculationResult"/> class.
            </summary>
            <param name="taxMethodName">
            The tax method name
            </param>
            <param name="originalPrice">
            The original price.
            </param>
            <param name="modifiedPrice">
            The modified price.
            </param>
            <param name="originalSalePrice">
            The original sale price.
            </param>
            <param name="modifiedSalePrice">
            The modified sale price.
            </param>
            <param name="baseTaxRate">
            The base tax rate
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ProductTaxCalculationResult.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:NKart.Core.Gateways.Taxation.ProductTaxCalculationResult"/> class from being created.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ProductTaxCalculationResult.PriceResult">
            <summary>
            Gets the price result.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ProductTaxCalculationResult.SalePriceResult">
            <summary>
            Gets the sale price result.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ProductTaxCalculationResult.GetEmptyResult">
            <summary>
            Gets an empty ProductTaxCalculationResult.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.IProductTaxCalculationResult"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.TaxationApplication">
            <summary>
            The taxation application.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxationApplication.Invoice">
            <summary>
            The invoice - US
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxationApplication.Product">
            <summary>
            The product - e.g. VAT
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxationGatewayProvider">
            <summary>
            Represents the CountryTaxRateTaxationGatewayProvider.  
            </summary>
            <remarks>
            
            This is Merchello's default TaxationGatewayProvider
            
            </remarks> 
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxationGatewayProvider.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.IGatewayProviderSettings,Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxationGatewayProvider"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="gatewayProviderSettings">
            The gateway provider settings.
            </param>
            <param name="runtimeCacheProvider">
            The runtime cache provider.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxationGatewayProvider.CreateTaxMethod(System.String,System.Decimal)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/>
            </summary>
            <param name="countryCode">The two letter ISO Country Code</param>
            <param name="taxPercentageRate">The decimal percentage tax rate</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxationGatewayProvider.GetGatewayTaxMethodByCountryCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.ITaxMethod"/> by it's unique 'key' (GUID)
            </summary>
            <param name="countryCode">The two char ISO country code</param>
            <returns><see cref="T:NKart.Core.Models.ITaxMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxationGatewayProvider.GetTaxationByProductMethod(System.Guid)">
            <summary>
            Gets the FixRateTaxationGatewayMethod.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationByProductMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxationGatewayProvider.GetAllGatewayTaxMethods">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Models.ITaxMethod"/> associated with this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxationGatewayProvider.ListResourcesOffered">
            <summary>
            Returns a collection of all possible gateway methods associated with this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.IGatewayResource"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxCalculationStrategy">
            <summary>
            The fixed rate tax calculation strategy.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxCalculationStrategy._taxMethod">
            <summary>
            The tax method.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxCalculationStrategy.#ctor(NKart.Core.Models.IInvoice,NKart.Core.Models.IAddress,NKart.Core.Models.ITaxMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxCalculationStrategy"/> class.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="taxAddress">
            The tax address.
            </param>
            <param name="taxMethod">
            The tax method.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxCalculationStrategy.CalculateTaxesForInvoice">
            <summary>
            Computes the invoice tax result
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixedRateTaxCalculationStrategy.AdjustedRate(System.Decimal,NKart.Core.Models.ITaxProvince,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Adjusts the rate of the quote based on the province 
            </summary>
            <param name="baseRate">The base (unadjusted) rate</param>
            <param name="province">The <see cref="T:NKart.Core.Models.ITaxProvince"/> associated with the <see cref="T:NKart.Core.Models.ITaxMethod"/></param>
            <param name="extendedData">The <see cref="T:NKart.Core.Models.ExtendedDataCollection"/></param>
            <returns>The tax adjustment</returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.FixedRate.FixRateTaxationGatewayMethod">
            <summary>
            The fix rate taxation gateway method.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixRateTaxationGatewayMethod.#ctor(NKart.Core.Models.ITaxMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.FixedRate.FixRateTaxationGatewayMethod"/> class.
            </summary>
            <param name="taxMethod">
            The tax method.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixRateTaxationGatewayMethod.CalculateTaxForInvoice(NKart.Core.Models.IInvoice,NKart.Core.Models.IAddress)">
            <summary>
            The calculate tax for invoice.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="taxAddress">
            The tax address.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.FixedRate.FixRateTaxationGatewayMethod.CalculateTaxForProduct(NKart.Core.Models.IProductVariantDataModifierData)">
            <summary>
            Calculates taxes for a product.
            </summary>
            <param name="product">
            The <see cref="T:NKart.Core.Models.IProductVariantDataModifierData"/>.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.FixedRate.IFixedRateTaxationGatewayMethod">
            <summary>
            Marker interface for the FixRateTaxMethod
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.FixedRate.IFixedRateTaxationGatewayProvider">
            <summary>
            Marker interface the FixedRateTaxationGatewayProvider
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.TaxationGatewayMethodBase">
            <summary>
            Represents the abstract GatewayTaxMethod
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxationGatewayMethodBase._taxMethod">
            <summary>
            The tax method.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayMethodBase.#ctor(NKart.Core.Models.ITaxMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.TaxationGatewayMethodBase"/> class.
            </summary>
            <param name="taxMethod">
            The tax method.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxationGatewayMethodBase.TaxMethod">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayMethodBase.CalculateTaxForInvoice(NKart.Core.Models.IInvoice)">
            <summary>
            Calculates the tax amount for an invoice
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/></returns>
            <remarks>
            
            Assumes the billing address of the invoice will be used for the taxation address
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayMethodBase.CalculateTaxForInvoice(NKart.Core.Models.IInvoice,NKart.Core.Models.IAddress)">
            <summary>
            Calculates the tax amount for an invoice
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/></param>
            <param name="taxAddress">The <see cref="T:NKart.Core.Models.IAddress"/> to base taxation rates.  Either origin or destination address.</param>
            <returns><see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayMethodBase.CalculateTaxForInvoice(NKart.Core.Gateways.Taxation.ITaxCalculationStrategy)">
            <summary>
            Calculates the tax amount for an invoice
            </summary>
            <param name="strategy">The strategy to use when calculating the tax amount</param>
            <returns><see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod">
            <summary>
            Defines the abstract GatewayTaxMethod
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod.TaxMethod">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod.CalculateTaxForInvoice(NKart.Core.Models.IInvoice)">
            <summary>
            Calculates the tax amount for an invoice
            </summary>
            <param name="invoice">
            The <see cref="T:NKart.Core.Models.IInvoice"/>
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>
            </returns>
            <remarks>
            
            Assumes the billing address of the invoice will be used for the taxation address
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod.CalculateTaxForInvoice(NKart.Core.Models.IInvoice,NKart.Core.Models.IAddress)">
            <summary>
            Calculates the tax amount for an invoice
            </summary>
            <param name="invoice">
            The <see cref="T:NKart.Core.Models.IInvoice"/>
            </param>
            <param name="taxAddress">
            The <see cref="T:NKart.Core.Models.IAddress"/> to base taxation rates.  Either origin or destination address.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod.CalculateTaxForInvoice(NKart.Core.Gateways.Taxation.ITaxCalculationStrategy)">
            <summary>
            Calculates the tax amount for an invoice
            </summary>
            <param name="strategy">
            The strategy to use when calculating the tax amount
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.TaxCalculationResult">
            <summary>
            Represents an invoice tax calculation result
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxCalculationResult.#ctor(System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.TaxCalculationResult"/> class.
            </summary>
            <param name="taxRate">
            The tax rate.
            </param>
            <param name="taxAmount">
            The tax amount.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxCalculationResult.#ctor(System.String,System.Decimal,System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.TaxCalculationResult"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="taxRate">
            The tax rate.
            </param>
            <param name="taxAmount">
            The tax amount.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxCalculationResult.#ctor(System.String,System.Decimal,System.Decimal,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.TaxCalculationResult"/> class.
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="taxRate">
            The tax rate.
            </param>
            <param name="taxAmount">
            The tax amount.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxCalculationResult.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxCalculationResult.TaxRate">
            <summary>
            Gets the tax rate.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxCalculationResult.TaxAmount">
            <summary>
            Gets or sets the tax amount.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxCalculationResult.ExtendedData">
            <summary>
            Gets the extended data.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.TaxableLineItemVisitor">
            <summary>
            A visitor class to identify taxable line items.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxableLineItemVisitor._lineItems">
            <summary>
            The line items identified as taxable.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxableLineItemVisitor._taxRate">
            <summary>
            The tax rate to be applied to the line item.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxableLineItemVisitor.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.TaxableLineItemVisitor"/> class.
            </summary>
            <param name="taxRate">
            The tax rate.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxableLineItemVisitor.TaxableLineItems">
            <summary>
            Gets the line items identified as taxable line items
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxableLineItemVisitor.Visit(NKart.Core.Models.ILineItem)">
            <summary>
            The visit.
            </summary>
            <param name="lineItem">
            The line item.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult">
            <summary>
            Defines an invoice tax calculation result
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ITaxCalculationResult.Name">
            <summary>
            Gets the name of the Tax Method
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ITaxCalculationResult.TaxRate">
            <summary>
            Gets the tax used in the tax calculation
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ITaxCalculationResult.TaxAmount">
            <summary>
            Gets or sets the calculated tax amount
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ITaxCalculationResult.ExtendedData">
            <summary>
            Gets the extended data collection to store any additional information returned by the Tax Provider.
            Ex. may include an itemization of Country, State, Local / Municipal taxes
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.TaxCalculationStrategyBase">
            <summary>
            Defines an invoice taxation strategy base class
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxCalculationStrategyBase._invoice">
            <summary>
            The invoice.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxCalculationStrategyBase._taxAddress">
            <summary>
            The tax address.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxCalculationStrategyBase.#ctor(NKart.Core.Models.IInvoice,NKart.Core.Models.IAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.TaxCalculationStrategyBase"/> class.
            </summary>
            <param name="invoice">
            The invoice.
            </param>
            <param name="taxAddress">
            The tax address.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxCalculationStrategyBase.Invoice">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxCalculationStrategyBase.TaxAddress">
            <summary>
            Gets the tax address
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxCalculationStrategyBase.CalculateTaxesForInvoice">
            <summary>
            Computes the invoice tax result
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.ITaxationContext">
            <summary>
            Defines the Taxation context
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ITaxationContext.ProductPricingEnabled">
            <summary>
            Gets a value indicating whether product pricing enabled.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ITaxationContext.TaxationApplication">
            <summary>
            Gets the taxation application.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ITaxationContext.ProductPricingTaxMethod">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Taxation.ITaxationByProductMethod"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationContext.CalculateTaxesForInvoice(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Calculates taxes for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to tax</param>
            <param name="quoteOnly">A value indicating whether or not the taxes should be calculated as a quote</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/></returns>
            <remarks>
            
            This assumes that the tax rate is assoicated with the invoice's billing address
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationContext.CalculateTaxesForInvoice(NKart.Core.Models.IInvoice,NKart.Core.Models.IAddress,System.Boolean)">
            <summary>
            Calculates taxes for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">
            The <see cref="T:NKart.Core.Models.IInvoice"/> to tax
            </param>
            <param name="taxAddress">
            The address to base the taxation calculation - generally country and region
            </param>
            <param name="quoteOnly">
            A value indicating whether or not the taxes should be calculated as a quote
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationContext.CalculateTaxesForProduct(NKart.Core.Models.IProductVariantDataModifierData)">
            <summary>
            The calculate taxes for a product.
            </summary>
            <param name="product">
            The product.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationContext.GetTaxMethodForTaxAddress(NKart.Core.Models.IAddress)">
            <summary>
            Gets the tax method for a given tax address
            </summary>
            <param name="taxAddress">
            The tax address
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationContext.GetTaxMethodForCountryCode(System.String)">
            <summary>
            Gets the tax method for country code.
            </summary>
            <param name="countryCode">
            The country code.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.ITaxationGatewayProvider">
            <summary>
            Defines a taxation gateway provider
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.ITaxationGatewayProvider.TaxMethods">
            <summary>
            Gets a collection of all available <see cref="T:NKart.Core.Models.ITaxMethod"/>s assoicated with this provider
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationGatewayProvider.CreateTaxMethod(System.String)">
            <summary>
            Attempts to create a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> for a given provider and country.  If the provider already 
            defines a tax rate for the country, the creation fails.
            </summary>
            <param name="countryCode">
            The two character ISO country code
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationGatewayProvider.CreateTaxMethod(System.String,System.Decimal)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/>
            </summary>
            <param name="countryCode">The two letter ISO Country Code</param>
            <param name="taxPercentageRate">The decimal percentage tax rate</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationGatewayProvider.SaveTaxMethod(NKart.Core.Gateways.Taxation.ITaxationGatewayMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/>
            </summary>
            <param name="taxationGatewayMethod">The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationGatewayProvider.DeleteTaxMethod(NKart.Core.Gateways.Taxation.ITaxationGatewayMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/>
            </summary>
            <param name="method">The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationGatewayProvider.GetGatewayTaxMethodByCountryCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> by it's unique 'key' (Guid)
            </summary>
            <param name="countryCode">The two char ISO country code</param>
            <returns><see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxationGatewayProvider.GetAllGatewayTaxMethods">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> associated with this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.TaxationContext">
            <summary>
            Represents the TaxationContext
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxationContext._storeSettingService">
            <summary>
            The store setting service.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxationContext._taxByProductMethod">
            <summary>
            The _tax by product method.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxationContext._taxMethodNotQueried">
            <summary>
            The _tax method not set.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxationContext._taxationApplication">
            <summary>
            The <see cref="P:NKart.Core.Gateways.Taxation.TaxationContext.TaxationApplication"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Services.IStoreSettingService,NKart.Core.Gateways.IGatewayProviderResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.TaxationContext"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="storeSettingService">
            The <see cref="T:NKart.Core.Services.IStoreSettingService"/>
            </param>
            <param name="resolver">
            The resolver.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxationContext.ProductPricingEnabled">
            <summary>
            Gets a value indicating whether product pricing enabled.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxationContext.TaxationApplication">
            <summary>
            Gets or sets the taxation application.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxationContext.ProductPricingTaxMethod">
            <summary>
            Gets the product pricing tax method.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxationContext.TaxApplicationInitialized">
            <summary>
            Gets or sets a value indicating whether store settings query for the tax application has
            been initialized.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.GetProviderByMethodKey(System.Guid)">
            <summary>
            Returns an instance of an 'active' GatewayProvider associated with a GatewayMethod based given the unique Key (GUID) of the GatewayMethod
            </summary>
            <param name="gatewayMethodKey">The unique key (GUID) of the <see cref="T:NKart.Core.Gateways.IGatewayMethod"/></param>
            <returns>An instantiated GatewayProvider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.CalculateTaxesForInvoice(NKart.Core.Models.IInvoice,System.Boolean)">
            <summary>
            Calculates taxes for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to tax</param>
            <param name="quoteOnly">
            An optional parameter indicating that the tax calculation should be an estimate.
            This is useful for some 3rd party tax APIs
            </param>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/></returns>
            <remarks>
            
            This assumes that the tax rate is associated with the invoice's billing address
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.CalculateTaxesForInvoice(NKart.Core.Models.IInvoice,NKart.Core.Models.IAddress,System.Boolean)">
            <summary>
            Calculates taxes for the <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <param name="invoice">
            The <see cref="T:NKart.Core.Models.IInvoice"/> to tax
            </param>
            <param name="taxAddress">
            The address to base the taxation calculation
            </param>
            <param name="quoteOnly">
            An optional parameter indicating that the tax calculation should be an estimate.
            This is useful for some 3rd party tax APIs
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.CalculateTaxesForProduct(NKart.Core.Models.IProductVariantDataModifierData)">
            <summary>
            Calculates taxes based on a product.
            </summary>
            <param name="product">
            The product.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.GetTaxMethodForTaxAddress(NKart.Core.Models.IAddress)">
            <summary>
            Gets the tax method for a given tax address
            </summary>
            <param name="taxAddress">
            The tax address
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.GetTaxMethodForCountryCode(System.String)">
            <summary>
            Gets the tax method for country code.
            </summary>
            <param name="countryCode">
            The country code.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.ClearProductPricingMethod">
            <summary>
            Resets the product pricing method to null so that it can be required.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.GetTaxationByProductMethod">
            <summary>
            The get taxation by product method.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationByProductMethod"/>.
            </returns>
            <exception cref="T:System.NullReferenceException">
            Throws a null reference exception if a provider cannot be resolved
            </exception>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationContext.SetTaxApplicationSetting">
            <summary>
            The set tax application setting.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase">
            <summary>
            Defines a base taxation gateway provider
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase._taxMethods">
            <summary>
            The _tax methods.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.IGatewayProviderSettings,Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="gatewayProviderSettings">
            The gateway provider settings.
            </param>
            <param name="runtimeCacheProvider">
            The runtime cache provider.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.TaxMethods">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.ITaxMethod"/> associated with this provider
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.CreateTaxMethod(System.String)">
            <summary>
            Attempts to create a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> for a given provider and country.  If the provider already 
            defines a tax rate for the country, the creation fails.
            </summary>
            <param name="countryCode">
            The two character ISO country code
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.CreateTaxMethod(System.String,System.Decimal)">
            <summary>
            Creates a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/>
            </summary>
            <param name="countryCode">The two letter ISO Country Code</param>
            <param name="taxPercentageRate">The decimal percentage tax rate</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.SaveTaxMethod(NKart.Core.Gateways.Taxation.ITaxationGatewayMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/>
            </summary>
            <param name="taxationGatewayMethod">The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.DeleteTaxMethod(NKart.Core.Gateways.Taxation.ITaxationGatewayMethod)">
            <summary>
            Deletes a <see cref="T:NKart.Core.Models.ITaxMethod"/>
            </summary>
            <param name="taxationGatewayMethod">The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> to be deleted</param>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.GetGatewayTaxMethodByCountryCode(System.String)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> by it's unique 'key' (GUID)
            </summary>
            <param name="countryCode">The two char ISO country code</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.GetAllGatewayTaxMethods">
            <summary>
            Gets a collection of all <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> associated with this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Taxation.ITaxationGatewayMethod"/> </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.FindTaxMethodForCountryCode(System.String)">
            <summary>
            The find tax method for country code.
            </summary>
            <param name="countryCode">
            The country code.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ITaxMethod"/>.
            </returns>
            <remarks>
            Accounts for the special case ELSE country
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.TaxationGatewayProviderBase.DeleteAllTaxMethods">
            <summary>
            Deletes all <see cref="T:NKart.Core.Models.ITaxMethod"/>s associated with the provider
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Taxation.ITaxCalculationStrategy">
            <summary>
            Defines a taxation strategy
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Taxation.ITaxCalculationStrategy.CalculateTaxesForInvoice">
            <summary>
            Computes the invoice tax result
            </summary>
            <returns>The <see cref="T:NKart.Core.Gateways.Taxation.ITaxCalculationResult"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.GatewayEvents">
            <summary>
            The gateway events.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayEvents.ApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            The Umbraco Application Started handler.
            </summary>
            <param name="umbracoApplication">
            The umbraco application.
            </param>
            <param name="applicationContext">
            The application context.
            </param>
            <remarks>
            Merchello is boot strapped in Application Starting so the GatewayProviderResolver should be good to go at this point.
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayEvents.NotificationMessageServiceOnSaved(NKart.Core.Services.INotificationMessageService,Umbraco.Core.Events.SaveEventArgs{NKart.Core.Models.INotificationMessage})">
            <summary>
            Clears messages from NotificationMonitors cache.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="saveEventArgs">
            The save event args.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayEvents.CreateOrder(NKart.Core.Gateways.Payment.IPaymentResult)">
            <summary>
            Creates an order if approved
            </summary>
            <param name="result">
            The result.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayEvents.PaymentGatewayMethodBaseOnCaptureAttempted(NKart.Core.Gateways.Payment.PaymentGatewayMethodBase,NKart.Core.Events.PaymentAttemptEventArgs{NKart.Core.Gateways.Payment.IPaymentResult})">
            <summary>
            Handles the capture attempted event
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The payment attempt event args.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayEvents.PaymentGatewayMethodBaseOnAuthorizeCaptureAttempted(NKart.Core.Gateways.Payment.PaymentGatewayMethodBase,NKart.Core.Events.PaymentAttemptEventArgs{NKart.Core.Gateways.Payment.IPaymentResult})">
            <summary>
            Handles the authorize capture attempted event
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The payment attempt event args.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayEvents.PaymentGatewayMethodBaseOnAuthorizeAttempted(NKart.Core.Gateways.Payment.PaymentGatewayMethodBase,NKart.Core.Events.PaymentAttemptEventArgs{NKart.Core.Gateways.Payment.IPaymentResult})">
            <summary>
            Handles the authorize attempted event
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The payment attempt event args.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayEvents.WarehouseCatalogServiceDeleted(NKart.Core.Services.IWarehouseCatalogService,Umbraco.Core.Events.DeleteEventArgs{NKart.Core.Models.IWarehouseCatalog})">
            <summary>
            The warehouse catalog service deleted.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="deleteEventArgs">
            The delete event args.
            </param>
            <remarks>
            The repository will delete the ship countries and the ship methods but we need to clean up any stored in memory
            </remarks>
        </member>
        <member name="T:NKart.Core.Gateways.GatewayMethodUiAttribute">
            <summary>
            The gateway method UI attribute.
            </summary>
            <remarks>
            Intended to be used to provide context to front end designers during method selection.  
            
            Initial use case is for payment methods and credit card forms and notification methods for data entry.
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayMethodUiAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.GatewayMethodUiAttribute"/> class.
            </summary>
            <param name="alias">
            The alias.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayMethodUiAttribute.Alias">
            <summary>
            Gets the alias.
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.GatewayMethodEditorAttribute">
            <summary>
            The gateway method editor attribute.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayMethodEditorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.GatewayMethodEditorAttribute"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="editorView">
            The editor view.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayMethodEditorAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.GatewayMethodEditorAttribute"/> class.
            </summary>
            <param name="title">
            The title.
            </param>
            <param name="description">
            The description.
            </param>
            <param name="editorView">
            The editor view.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayMethodEditorAttribute.Title">
            <summary>
            Gets the name of the gateway provider editor title  
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayMethodEditorAttribute.Description">
            <summary>
            Gets the description of the gateway provider editor 
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayMethodEditorAttribute.EditorView">
            <summary>
            Gets the relative path to the editor view html
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.GatewayProviderActivationAttribute">
            <summary>
            An attribute used to decorate gateway providers to be resolved and "activated/deactivated"
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderActivationAttribute.Key">
            <summary>
            The unique 'Key' for the GatewayProvider.  This is important to assert that the same provider cannot be registered more than once. 
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderActivationAttribute.Name">
            <summary>
            The name of the gateway provider.  This typically shows up in the back office UI
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderActivationAttribute.Description">
            <summary>
            The description of the gateway provider.  
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderEditorAttribute.Title">
            <summary>
            The name of the gateway provider editor title  
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderEditorAttribute.Description">
            <summary>
            The description of the gateway provider editor 
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderEditorAttribute.EditorView">
            <summary>
            The relative path to the editor view html
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.GatewayProviderResolver">
            <summary>
            The gateway provider resolver.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayProviderResolver._lock">
            <summary>
            The lock.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayProviderResolver._activatedProviderSettingsCache">
            <summary>
            Stores a list of <see cref="T:NKart.Core.Models.GatewayProviderSettings"/> in the singleton for quick reference
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayProviderResolver._gatewayProviderService">
            <summary>
            The gateway provider service.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayProviderResolver._runtimeCache">
            <summary>
            The runtime cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type},NKart.Core.Services.IGatewayProviderService,Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.GatewayProviderResolver"/> class.
            </summary>
            <param name="values">
            The values.
            </param>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="runtimeCache">
            The runtime cache.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.GetProviderByKey``1(System.Guid,System.Boolean)">
            <summary>
            Instantiates a GatewayProvider given its registered Key
            </summary>
            <typeparam name="T">The Type of the GatewayProvider.  Must inherit from GatewayProviderBase</typeparam>
            <param name="gatewayProviderKey">The Gateway Provider Key</param>
            <param name="activatedOnly">Search only activated providers</param>
            <returns>An instantiated GatewayProvider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.GetActivatedProviders">
            <summary>
            Gets a collection of all "activated" providers regardless of type
            </summary>
            <returns>
            The collection of GatewayProviderBase.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.GetAllProviders">
            <summary>
            Gets a collection of all providers regardless of type
            </summary>
            <returns>
            The collection of gateway providers.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.GetAllProviders``1">
            <summary>
            Gets a collection of 
            </summary>
            <typeparam name="T">The type of GatewayProvider</typeparam>
            <returns>The collection of gateway providers</returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.GetActivatedProviders``1">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>s by type
            </summary>
            <typeparam name="T">
            The type of gateway provider
            </typeparam>
            <returns>
            The collection of gateway providers.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.RefreshCache">
            <summary>
            Refreshes the provider cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.GetGatewayProviderType(System.Type)">
            <summary>
            Maps the type of T to a <see cref="T:NKart.Core.GatewayProviderType"/>
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            Returns a <see cref="T:NKart.Core.GatewayProviderType"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.GetWriteLock">
            <summary>
            Returns a WriteLock to use when modifying collections
            </summary>
            <returns>Gets the write lock</returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderResolver.CreateInstance(NKart.Core.Models.IGatewayProviderSettings)">
            <summary>
            The create instance.
            </summary>
            <param name="providerSettings">
            The provider settings.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.IGatewayProviderResolver">
            <summary>
            Defines the GatewayProviderResolver.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderResolver.GetActivatedProviders``1">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>s by type
            </summary>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Gateways.GatewayProviderBase"/>
            </typeparam>
            <returns>
            The collection of <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>s
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderResolver.GetActivatedProviders">
            <summary>
            Gets a collection of all "activated" providers regardless of type
            </summary>
            <returns>
            The collection of all "activated" providers.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderResolver.GetAllProviders">
            <summary>
            Gets a collection of all providers regardless of type
            </summary>
            <returns>
            The collection of all providers.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderResolver.GetAllProviders``1">
            <summary>
            Gets a collection of inactive (not saved) <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> by type
            </summary>
            <typeparam name="T">
            The type of <see cref="T:NKart.Core.Gateways.GatewayProviderBase"/>
            </typeparam>
            <returns>
            The collection of inactive (not saved) <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderResolver.GetProviderByKey``1(System.Guid,System.Boolean)">
            <summary>
            Instantiates a GatewayProvider given its registered Key
            </summary>
            <typeparam name="T">The Type of the GatewayProvider.  Must inherit from GatewayProviderBase</typeparam>
            <param name="gatewayProviderKey">The gateway provider key</param>
            <param name="activatedOnly">Search only activated providers</param>
            <returns>An instantiated GatewayProvider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderResolver.RefreshCache">
            <summary>
            Refreshes the <see cref="T:NKart.Core.Gateways.GatewayProviderBase"/> cache
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.IGatewayMethod">
            <summary>
            Marker interface for GatewayMethods
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShipmentLineItemVisitor">
            <summary>
            Visitor class that calculates 
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShipmentLineItemVisitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShipmentLineItemVisitor"/> class.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShipmentLineItemVisitor.TotalWeight">
            <summary>
            Gets a value the TotalWeight from ExtendedData
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShipmentLineItemVisitor.TotalPrice">
            <summary>
            Gets a value the TotalPrice form ExtendedData
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShipmentLineItemVisitor.UseOnSalePriceIfOnSale">
            <summary>
            Gets or sets a value indicating whether or not to use the OnSale price in the total price calculation
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShipmentLineItemVisitor.Visit(NKart.Core.Models.ILineItem)">
            <summary>
            Visits the line item.
            </summary>
            <param name="lineItem">
            The line item.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod">
            <summary>
            Defines the rate table ship method
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod._quoteType">
            <summary>
            The quote type.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.#ctor(NKart.Core.Gateways.IGatewayResource,NKart.Core.Models.IShipMethod,NKart.Core.Models.IShipCountry)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod"/> class.
            </summary>
            <param name="gatewayResource">
            The gateway resource.
            </param>
            <param name="shipMethod">
            The ship method.
            </param>
            <param name="shipCountry">
            The ship country.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.#ctor(NKart.Core.Gateways.IGatewayResource,NKart.Core.Models.IShipMethod,NKart.Core.Models.IShipCountry,NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod"/> class.
            </summary>
            <param name="gatewayResource">
            The gateway resource.
            </param>
            <param name="shipMethod">
            The ship method.
            </param>
            <param name="shipCountry">
            The ship country.
            </param>
            <param name="rateTable">
            The rate table.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.QuoteType">
            <summary>
            The quote type
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.QuoteType.VaryByWeight">
            <summary>
            Indicates the quote is based shipment weight
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.QuoteType.VaryByPrice">
            <summary>
            Indicates the quote is based on total shipment price
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.RateTable">
            <summary>
            Gets the rate table
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.RateTableType">
            <summary>
            Gets the quote type
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.QuoteShipment(NKart.Core.Models.IShipment)">
            <summary>
            The quote shipment.
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.CalculateVaryByWeight(NKart.Core.Models.IShipment,System.Decimal,NKart.Core.Models.Interfaces.IShipProvince)">
            <summary>
            Calculates the rate based on the total weight of the items in the shipment
            </summary>
            <param name="shipment">The associated <see cref="T:NKart.Core.Models.IShipment"/></param>
            <param name="totalWeight">The total weight of the items in the shipment</param>
            <param name="province">The <see cref="T:NKart.Core.Models.Interfaces.IShipProvince"/> associated with the shipment destination.  Used for rate adjustments</param>
            <returns>Returns an <see cref="T:Umbraco.Core.Attempt"/> to quote a rate using 'this' ship method</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.CalculateVaryByPrice(NKart.Core.Models.IShipment,System.Decimal,NKart.Core.Models.Interfaces.IShipProvince)">
            <summary>
            Calculates the rate based on the total shipment item price
            </summary>
            <param name="shipment">The associated <see cref="T:NKart.Core.Models.IShipment"/></param>
            <param name="totalPrice">The total price of the items in the shipment</param>
            <param name="province">The <see cref="T:NKart.Core.Models.Interfaces.IShipProvince"/> associated with the shipment destination.  Used for rate adjustments</param>
            <returns>Returns an <see cref="T:Umbraco.Core.Attempt"/> to quote a rate using 'this' ship method</returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayProvider">
            <summary>
            Defines the RateTableLookupGateway
            </summary>
            <remarks>
            
            This is Merchello's default ShippingGatewayProvider
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayProvider.CreateShipMethod(NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.QuoteType,NKart.Core.Models.IShipCountry,System.String)">
            <summary>
            Creates an instance of a <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod"/>
            </summary>
            <param name="quoteType">
            The quote Type.
            </param>
            <param name="shipCountry">
            The ship Country.
            </param>
            <param name="name">
            The name.
            </param>
            <remarks>
            
            This method is really specific to the RateTableShippingGateway due to the odd fact that additional shipmethods can be created 
            rather than defined up front.  
            
            </remarks>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> created
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayProvider.CreateShippingGatewayMethod(NKart.Core.Gateways.IGatewayResource,NKart.Core.Models.IShipCountry,System.String)">
            <summary>
            Creates an instance of a <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod"/>
            </summary>
            <param name="gatewayResource">
            The gateway Resource.
            </param>
            <param name="shipCountry">
            The ship Country.
            </param>
            <param name="name">
            The name.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> created
            </returns>
            <remarks>
            
            GatewayShipMethods (in general) should be unique with respect to <see cref="T:NKart.Core.Models.IShipCountry"/> and <see cref="T:NKart.Core.Gateways.IGatewayResource"/>.  However, this is a
            a provider is sort of a unique case, sense we want to be able to add as many ship methods with rate tables as needed in order to facilitate 
            tiered rate tables for various ship methods without requiring a carrier based shipping provider.
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayProvider.SaveShippingGatewayMethod(NKart.Core.Gateways.Shipping.IShippingGatewayMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod"/> 
            </summary>
            <param name="shippingGatewayMethod">The <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayProvider.ListResourcesOffered">
            <summary>
            Returns a collection of all possible gateway methods associated with this provider
            </summary>
            <returns>
            Returns the collection of <see cref="T:NKart.Core.Gateways.IGatewayResource"/> defined by this provider
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayProvider.GetAllShippingGatewayMethods(NKart.Core.Models.IShipCountry)">
            <summary>
            Returns a collection of ship methods assigned for this specific provider configuration (associated with the ShipCountry)
            </summary>
            <param name="shipCountry">
            The ship Country.
            </param>
            <returns>
            Returns a collection of all <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/>s associated with the ship country
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.FixedRate.IFixedRateShippingGatewayMethod">
            <summary>
            Defines the rate table ship method
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.IFixedRateShippingGatewayMethod.RateTable">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable"/> for this ship method
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.IFixedRateShippingGatewayMethod.RateTableType">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.FixedRateShippingGatewayMethod.QuoteType"/> for this ship method
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.FixedRate.IFixedRateShippingGatewayProvider">
            <summary>
            Marker interface for a Fixed Rate Shipping Gateway Provider
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable">
            <summary>
            The ShippingFixedRateTable interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable.ShipMethodKey">
            <summary>
            Gets the associated ShipMethodKey
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable.Rows">
            <summary>
            Gets the rows of the rate table
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable.AddRow(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Adds a rate tier row to the ship rate table
            </summary>
            <param name="rangeLow">The lowest qualifying value defining the range</param>
            <param name="rangeHigh">The highest qualifying value defining the range</param>
            <param name="rate">The rate or cost assoicated with the range</param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable.DeleteRow(NKart.Core.Models.IShipRateTier)">
            <summary>
            Deletes a rate tier row from the ship rate table
            </summary>
            <param name="shipRateTier">
            The ship Rate Tier.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable.Save">
            <summary>
            Saves the rate table to the database
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable.FindRate(System.Decimal)">
            <summary>
            Gets the decimal rate associated with the range
            </summary>
            <param name="rangeValue">The value within a range used to determine which rate to return</param>
            <returns>A decimal rate</returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable">
            <summary>
            The shipping fixed rate table.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable._shipRateTiers">
            <summary>
            The ship rate tiers.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable._shipMethodKey">
            <summary>
            The ship method key.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable"/> class.
            </summary>
            <param name="shipMethodKey">
            The ship method key.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.#ctor(System.Guid,System.Collections.Generic.IEnumerable{NKart.Core.Models.IShipRateTier})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable"/> class.
            </summary>
            <param name="shipMethodKey">
            The ship method key.
            </param>
            <param name="rows">
            The rows.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.ShipMethodKey">
            <summary>
            Gets the 'unique' ShipMethodKey of the ship method associated with the <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.Rows">
            <summary>
            Gets the rows of the rate table
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.IsTest">
            <summary>
            Gets or sets a value indicating whether is test.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.AddRow(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            Adds a rate tier row to the ship rate table
            </summary>
            <param name="rangeLow">The lowest qualifying value defining the range</param>
            <param name="rangeHigh">The highest qualifying value defining the range</param>
            <param name="rate">The rate or cost assoicated with the range</param>
            <remarks>
            Requires a call to Save() to persist
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.Save">
            <summary>
            Persists the rate table to the database and refreshes the runtime cache
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.FindRate(System.Decimal)">
            <summary>
            Gets the decimal rate associated with the range
            </summary>
            <param name="rangeValue">The value within a range used to determine which rate to return</param>
            <returns>A decimal rate or zero (0) if not found</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.DeleteRow(NKart.Core.Models.IShipRateTier)">
            <summary>
            Deletes a row
            </summary>
            <param name="shipRateTier">
            The ship Rate Tier.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.GetShipRateTable(NKart.Core.Services.IGatewayProviderService,Umbraco.Core.Cache.IRuntimeCacheProvider,System.Guid)">
            <summary>
            The get ship rate table.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="runtimeCacheProvider">
            The runtime cache provider.
            </param>
            <param name="shipMethodKey">
            The ship method key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.Save(NKart.Core.Services.IGatewayProviderService,Umbraco.Core.Cache.IRuntimeCacheProvider,NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable)">
            <summary>
            The save.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="cache">
            The cache.
            </param>
            <param name="rateTable">
            The rate table.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.DeleteRow(NKart.Core.Services.IGatewayProviderService,Umbraco.Core.Cache.IRuntimeCacheProvider,NKart.Core.Gateways.Shipping.FixedRate.IShippingFixedRateTable,NKart.Core.Models.IShipRateTier)">
            <summary>
            The delete row.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="cache">
            The cache.
            </param>
            <param name="rateTable">
            The rate table.
            </param>
            <param name="shipRateTier">
            The ship rate tier.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.AddRow(NKart.Core.Models.IShipRateTier)">
            <summary>
            Adds a rate tier row to the ship rate table
            </summary>
            <param name="shipRateTier">
            The ship Rate Tier.
            </param>
            <remarks>
            Requires a call to Save() to persist
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.FixedRate.ShippingFixedRateTable.ValidateRateTier(NKart.Core.Models.IShipRateTier@)">
            <summary>
            Asserts the ranges in the rate tier are low to high, non zero and not equal.
            </summary>
            <param name="shipRateTier">
            The ship Rate Tier.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.DefaultShipmentRateQuoteStrategy">
            <summary>
            Represents the default Shipment Rate Quoting Strategy
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.DefaultShipmentRateQuoteStrategy.#ctor(NKart.Core.Models.IShipment,NKart.Core.Gateways.Shipping.IShippingGatewayMethod[],Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.DefaultShipmentRateQuoteStrategy"/> class.
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="shippingGatewayMethods">
            The shipping gateway methods.
            </param>
            <param name="runtimeCache">
            The runtime cache.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.DefaultShipmentRateQuoteStrategy.GetShipmentRateQuotes(System.Boolean)">
            <summary>
            Quotes all available ship methods
            </summary>
            <param name="tryGetCached">
            If set true the strategy will try to get a quote from cache
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase">
            <summary>
            Defines a an abstract gateway ship method
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase._shipMethod">
            <summary>
            The ship method.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase._gatewayResource">
            <summary>
            The gateway resource.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase._shipCountry">
            <summary>
            The ship country.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase.#ctor(NKart.Core.Gateways.IGatewayResource,NKart.Core.Models.IShipMethod,NKart.Core.Models.IShipCountry)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase"/> class.
            </summary>
            <param name="gatewayResource">
            The gateway resource.
            </param>
            <param name="shipMethod">
            The ship method.
            </param>
            <param name="shipCountry">
            The ship country.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase.ShipMethod">
            <summary>
            Gets the ship method
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase.ShipCountry">
            <summary>
            Gets the ship country
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase.GatewayResource">
            <summary>
            Gets the gateway resource
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase.QuoteShipment(NKart.Core.Models.IShipment)">
            <summary>
            Returns a rate quote for a given shipment
            </summary>
            <param name="shipment">
            The shipment
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase.AdjustedRate(System.Decimal,NKart.Core.Models.Interfaces.IShipProvince)">
            <summary>
            Adjusts the rate of the quote based on the province Associated with the ShipMethod
            </summary>
            <param name="baseRate">
            The base (unadjusted) rate
            </param>
            <param name="province">
            The <see cref="T:NKart.Core.Models.Interfaces.IShipProvince"/> associated with the ShipMethod
            </param>
            <returns>
            The adjusted rate.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod">
            <summary>
            Defines a ShippingGatewayMethod.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.IShippingGatewayMethod.ShipMethod">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IShipMethod"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.IShippingGatewayMethod.GatewayResource">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.IGatewayResource"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingGatewayMethod.QuoteShipment(NKart.Core.Models.IShipment)">
            <summary>
            Returns a rate quote for a given shipment
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <returns>
            The shipment rate quote <see cref="T:Umbraco.Core.Attempt`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote">
            <summary>
            Defines a shipment rate quote
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.IShipmentRateQuote.Shipment">
            <summary>
            The <see cref="T:NKart.Core.Models.IShipment"/> associated with this rate quote
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.IShipmentRateQuote.ShipMethod">
            <summary>
            The <see cref="T:NKart.Core.Models.IShipMethod"/> used to obtain the quote
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.IShipmentRateQuote.Rate">
            <summary>
            The calculated quoted rate for the shipment
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.IShippingGatewayProvider">
            <summary>
            Defines the base shipping gateway provider
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.IShippingGatewayProvider.ShipMethods">
            <summary>
            Gets a collection of all available <see cref="T:NKart.Core.Models.IShipMethod"/>s associated with this provider
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingGatewayProvider.CreateShippingGatewayMethod(NKart.Core.Gateways.IGatewayResource,NKart.Core.Models.IShipCountry,System.String)">
            <summary>
            Creates an instance of a ship method (T) without persisting it to the database
            </summary>
            <param name="gatewayResource">
            The gateway Resource.
            </param>
            <param name="shipCountry">
            The ship Country.
            </param>
            <param name="name">
            The name of the method
            </param>
            <returns>
            The newly created <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/>
            </returns>
            <remarks>
            ShipMethods should be unique with respect to <see cref="T:NKart.Core.Models.IShipCountry"/> and <see cref="T:NKart.Core.Gateways.IGatewayResource"/>
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingGatewayProvider.SaveShippingGatewayMethod(NKart.Core.Gateways.Shipping.IShippingGatewayMethod)">
            <summary>
            Saves a shipmethod
            </summary>
            <param name="shippingGatewayMethod">
            The <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> to be saved
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingGatewayProvider.GetAllShippingGatewayMethods(NKart.Core.Models.IShipCountry)">
            <summary>
            Returns a collection of ship methods assigned for this specific provider configuration (associated with the ShipCountry)
            </summary>
            <param name="shipCountry">
            The ship Country.
            </param>
            <returns>
            A collection of all <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/>s for a given <see cref="T:NKart.Core.Models.IShipCountry"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingGatewayProvider.DeleteShippingGatewayMethod(NKart.Core.Gateways.Shipping.IShippingGatewayMethod)">
            <summary>
            Deletes an Active ShipMethod
            </summary>
            <param name="shippingGatewayMethod">
            The <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> to be deleted
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingGatewayProvider.GetShippingGatewayMethodsForShipment(NKart.Core.Models.IShipment)">
            <summary>
            Returns a collection of available <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> associated by this provider for a given shipment
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/> that was shipped using the method attempting to return</param>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingGatewayProvider.QuoteShippingGatewayMethodsForShipment(NKart.Core.Models.IShipment,System.Boolean)">
            <summary>
            Returns a collection of all available <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for a given shipment
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/> to be quoted</param>
            <param name="tryGetCached">
            The try Get Cached.
            </param>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingGatewayProvider.QuoteShippingGatewayMethodsForShipment(NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase,System.Boolean)">
            <summary>
            Returns a collection of all available <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for a given shipment
            </summary>
            <param name="strategy">
            The quotation strategy
            </param>
            <param name="tryGetCached">
            The try Get Cached.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase">
            <summary>
            Represents a Shipment Rate Quote Strategy
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase._shipment">
            <summary>
            The shipment.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase._shippingGatewayMethods">
            <summary>
            The shipping gateway methods.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase._runtimeCache">
            <summary>
            The runtime cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase.#ctor(NKart.Core.Models.IShipment,NKart.Core.Gateways.Shipping.IShippingGatewayMethod[],Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase"/> class.
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="shippingGatewayMethods">
            The shipping gateway methods.
            </param>
            <param name="runtimeCache">
            The runtime cache.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase.ShippingGatewayMethods">
            <summary>
            Gets the collection of <see cref="T:NKart.Core.Gateways.Shipping.ShippingGatewayMethodBase"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase.Shipment">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IShipment"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase.RuntimeCache">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Cache.IRuntimeCacheProvider"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase.GetShipmentRateQuotes(System.Boolean)">
            <summary>
            Quotes all available ship methods
            </summary>
            <param name="tryGetCached">
            If set true the strategy will try to get a quote from cache
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase.GetShipmentRateQuoteCacheKey(NKart.Core.Models.IShipment,NKart.Core.Gateways.Shipping.IShippingGatewayMethod)">
            <summary>
            Creates a cache key for caching <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="shippingGatewayMethod">
            The shipping Gateway Method.
            </param>
            <returns>
            The cache key.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase.TryGetCachedShipmentRateQuote(NKart.Core.Models.IShipment,NKart.Core.Gateways.Shipping.IShippingGatewayMethod)">
            <summary>
            Returns the cached <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> if it exists
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="shippingGatewayMethod">
            The shipping Gateway Method.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.IShippingContext">
            <summary>
            Defines a shipping context
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingContext.GetShipRateQuotesForShipment(NKart.Core.Models.IShipment,System.Boolean)">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> that are available for the <see cref="T:NKart.Core.Models.IShipment"/>
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/> to quote</param>
            <param name="tryGetCached">
            If set true the strategy will try to get a quote from cache
            </param>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingContext.GetAllowedShipmentDestinationCountries">
            <summary>
            Returns a list of all countries that can be assigned to a shipment
            </summary>
            <returns>A collection of all <see cref="T:NKart.Core.Models.ICountry"/> that have been identified as allowable shipping destinations</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShippingContext.GetGatewayProvidersByShipCountry(NKart.Core.Models.IShipCountry)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase"/> by ship country
            </summary>
            <param name="shipCountry">The <see cref="T:NKart.Core.Models.IShipCountry"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayProvider"/>s associated with the ship country</returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.ShippingContext">
            <summary>
            Represents the ShippingContext
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.ShippingContext._storeSettingService">
            <summary>
            The store setting service.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingContext.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Services.IStoreSettingService,NKart.Core.Gateways.IGatewayProviderResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.ShippingContext"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
            <param name="resolver">
            The resolver.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingContext.GetProviderByMethodKey(System.Guid)">
            <summary>
            Returns an instance of an 'active' GatewayProvider associated with a GatewayMethod based given the unique Key (GUID) of the GatewayMethod
            </summary>
            <param name="gatewayMethodKey">The unique key (GUID) of the <see cref="T:NKart.Core.Gateways.IGatewayMethod"/></param>
            <returns>An instantiated GatewayProvider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingContext.GetShipRateQuotesForShipment(NKart.Core.Models.IShipment,System.Boolean)">
            <summary>
            Returns a collection of all <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> that are available for the <see cref="T:NKart.Core.Models.IShipment"/>
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/> to quote</param>
            <param name="tryGetCached">
            If set true the strategy will try to get a quote from cache
            </param>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingContext.GetAllowedShipmentDestinationCountries">
            <summary>
            Returns a list of all countries that can be assigned to a shipment
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Models.ICountry"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingContext.GetGatewayProvidersByShipCountry(NKart.Core.Models.IShipCountry)">
            <summary>
            Resolves all active shipping gateway providers for a given <see cref="T:NKart.Core.Models.IShipCountry"/>
            </summary>
            <param name="shipCountry">
            The ship Country.
            </param>
            <returns>
            A collection of all active shipping gateway providers
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.ShipmentRateQuote">
            <summary>
            Represents a shipment rate quote
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShipmentRateQuote.#ctor(NKart.Core.Models.IShipment,NKart.Core.Models.IShipMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.ShipmentRateQuote"/> class.
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="shipMethod">
            The ship method.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShipmentRateQuote.#ctor(NKart.Core.Models.IShipment,NKart.Core.Models.IShipMethod,NKart.Core.Models.ExtendedDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.ShipmentRateQuote"/> class.
            </summary>
            <param name="shipment">
            The shipment.
            </param>
            <param name="shipMethod">
            The ship method.
            </param>
            <param name="extendedData">
            The extended data.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShipmentRateQuote.Shipment">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IShipment"/> associated with this rate quote
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShipmentRateQuote.ShipMethod">
            <summary>
            Gets the ShipMethod used to quote the rate
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShipmentRateQuote.Rate">
            <summary>
            Gets or sets the rate quoted by the ShipMethod
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShipmentRateQuote.ExtendedData">
            <summary>
            Gets the extended data collection to store any additional information returned from
            a carrier based shipping.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShipmentRateQuote.Initialize">
            <summary>
            Initializes values
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase">
            <summary>
            Defines the Shipping Gateway abstract class
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase._shipMethods">
            <summary>
            The ship methods.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.IGatewayProviderSettings,Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="gatewayProviderSettings">
            The gateway provider settings.
            </param>
            <param name="runtimeCacheProvider">
            The runtime cache provider.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.ShipMethods">
            <summary>
            Gets or sets the collection of all <see cref="T:NKart.Core.Models.IShipMethod"/> assoicated with this provider
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.CreateShippingGatewayMethod(NKart.Core.Gateways.IGatewayResource,NKart.Core.Models.IShipCountry,System.String)">
            <summary>
            Creates an instance of a ship method (T) without persisting it to the database
            </summary>
            <param name="gatewayResource">
            The gateway Resource.
            </param>
            <param name="shipCountry">
            The ship Country.
            </param>
            <param name="name">
            The name.
            </param>
            <returns>
            The newly created <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/>
            </returns>
            <remarks>
            
            ShipMethods should be unique with respect to <see cref="T:NKart.Core.Models.IShipCountry"/> and <see cref="T:NKart.Core.Gateways.IGatewayResource"/>
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.SaveShippingGatewayMethod(NKart.Core.Gateways.Shipping.IShippingGatewayMethod)">
            <summary>
            Saves a shipmethod
            </summary>
            <param name="shippingGatewayMethod">The <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.GetAllShippingGatewayMethods(NKart.Core.Models.IShipCountry)">
            <summary>
            Returns a collection of ship methods assigned for this specific provider configuration (associated with the ShipCountry)
            </summary>
            <param name="shipCountry">
            The ship Country.
            </param>
            <returns>
            A collection of all <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> for shipCountry
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.GetShippingGatewayMethod(System.Guid,System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> by it's <see cref="T:NKart.Core.Models.IShipMethod"/> key
            </summary>
            <param name="shipMethodKey">The <see cref="T:NKart.Core.Models.IShipMethod"/> key</param>
            <param name="shipCountrKey">The <see cref="T:NKart.Core.Models.IShipCountry"/> ky</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.GetAllShippingGatewayMethodsForShipCountry(System.Guid)">
            <summary>
            Returns a collection of ship methods assigned for this specific provider configuration (associated with the ShipCountry)
            </summary>
            <param name="shipCountryKey">The key for the <see cref="T:NKart.Core.Models.IShipCountry"/></param>
            <returns>
            A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.DeleteShippingGatewayMethod(NKart.Core.Gateways.Shipping.IShippingGatewayMethod)">
            <summary>
            Deletes an Active ShipMethod
            </summary>
            <param name="shippingGatewayMethod">The shipping gateway method</param>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.GetShippingGatewayMethodsForShipment(NKart.Core.Models.IShipment)">
            <summary>
            Returns a collection of available <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> associated by this provider for a given shipment
            </summary>
            <param name="shipment">the <see cref="T:NKart.Core.Models.IShipment"/></param>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.QuoteShippingGatewayMethodsForShipment(NKart.Core.Models.IShipment,System.Boolean)">
            <summary>
            Returns a collection of all available <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for a given shipment
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/></param>
            <param name="tryGetCached">
            If set true the strategy will try to get a quote from cache
            </param>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.QuoteShipMethodForShipment(NKart.Core.Models.IShipment,NKart.Core.Gateways.Shipping.IShippingGatewayMethod,System.Boolean)">
            <summary>
            Quotes a single GatewayShipMethod for a shipment rate
            </summary>
            <param name="shipment">The <see cref="T:NKart.Core.Models.IShipment"/> used to generate the rate quote</param>
            <param name="shippingGatewayMethod">The <see cref="T:NKart.Core.Gateways.Shipping.IShippingGatewayMethod"/> used to generate the rate quote</param>
            <param name="tryGetCached">
            If set true the strategy will try to get a quote from cache
            </param>
            <returns>The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/></returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.QuoteShippingGatewayMethodsForShipment(NKart.Core.Gateways.Shipping.ShipmentRateQuoteStrategyBase,System.Boolean)">
            <summary>
            Returns a collection of all available <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> for a given shipment
            </summary>
            <param name="strategy">
            The quotation strategy
            </param>
            <param name="tryGetCached">
            If set true the strategy will try to get a quote from cache
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.ResetShipMethods">
            <summary>
            The reset ship methods.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.ShippingGatewayProviderBase.DeleteAllActiveShipMethods(NKart.Core.Models.IShipCountry)">
            <summary>
            Deletes all active shipMethods
            </summary>
            <param name="shipCountry">
            The ship Country.
            </param>
            <remarks>
            Used for testing
            </remarks>
        </member>
        <member name="T:NKart.Core.Gateways.Shipping.IShipmentRateQuoteStrategy">
            <summary>
            Defines the shipment rate quote strategy
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.Shipping.IShipmentRateQuoteStrategy.GetShipmentRateQuotes(System.Boolean)">
            <summary>
            Quotes all available ship methods
            </summary>
            <param name="tryGetCached">
            The try Get Cached.
            </param>
            <returns>
            A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.GatewayContext">
            <summary>
            Represents the GatewayContext.  Provides access to <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>s
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayContext._gatewayProviderService">
            <summary>
            The gateway provider service.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayContext._resolver">
            <summary>
            The gateway provider resolver.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayContext._notification">
            <summary>
            The notification context.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayContext._payment">
            <summary>
            The payment context.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayContext._shipping">
            <summary>
            The shipping context.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayContext._taxation">
            <summary>
            The taxation context.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayContext.#ctor(NKart.Core.Services.IServiceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.GatewayContext"/> class.
            </summary>
            <param name="serviceContext">
            The service context.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayContext.#ctor(NKart.Core.Services.IServiceContext,NKart.Core.Gateways.IGatewayProviderResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.GatewayContext"/> class.
            </summary>
            <param name="serviceContext">
            The service context.
            </param>
            <param name="resolver">
            The resolver.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayContext.Payment">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Payment.IPaymentContext"/>
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throws an exception if the <see cref="T:NKart.Core.Gateways.Payment.PaymentContext"/> is null
            </exception>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayContext.Notification">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Notification.INotificationContext"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throws an exception if the <see cref="T:NKart.Core.Gateways.Notification.NotificationContext"/> is null
            </exception>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayContext.Shipping">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Shipping.IShippingContext"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throws an exception if the <see cref="T:NKart.Core.Gateways.Shipping.ShippingContext"/> is null
            </exception>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayContext.Taxation">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Taxation.ITaxationContext"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Throws an exception if the <see cref="T:NKart.Core.Gateways.Taxation.TaxationContext"/> is null
            </exception>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayContext.DeactivateProvider(NKart.Core.Gateways.GatewayProviderBase)">
            <summary>
            For testing
            </summary>
            <param name="provider">
            The provider.
            </param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayContext.BuildGatewayContext(NKart.Core.Services.IGatewayProviderService,NKart.Core.Services.IStoreSettingService)">
            <summary>
            The build gateway context.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="T:NKart.Core.Gateways.GatewayProviderBase">
            <summary>
            Defines the GatewayBase
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayProviderBase._gatewayProviderSettings">
            <summary>
            The gateway provider settings.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayProviderBase._gatewayProviderService">
            <summary>
            The gateway provider service.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayProviderBase._runtimeCache">
            <summary>
            The runtime cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderBase.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Models.IGatewayProviderSettings,Umbraco.Core.Cache.IRuntimeCacheProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.GatewayProviderBase"/> class.
            </summary>
            <param name="gatewayProviderService">The <see cref="T:NKart.Core.Services.IGatewayProviderService"/></param>
            <param name="gatewayProviderSettings">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/></param>
            <param name="runtimeCacheProvider">Umbraco's <see cref="T:Umbraco.Core.Cache.IRuntimeCacheProvider"/></param>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderBase.Key">
            <summary>
            Gets the unique Key that will be used
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderBase.GatewayProviderService">
            <summary>
            Gets the <see cref="T:NKart.Core.Services.IGatewayProviderService"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderBase.GatewayProviderSettings">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderBase.ExtendedData">
            <summary>
            Gets the ExtendedData collection from the <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderBase.Activated">
            <summary>
            Gets a value indicating whether or not this provider is "activated"
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderBase.RuntimeCache">
            <summary>
            Gets the RuntimeCache
            </summary>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderBase.ListResourcesOffered">
            <summary>
            Returns a collection of all possible gateway methods associated with this provider
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.IGatewayResource"/></returns>
        </member>
        <member name="T:NKart.Core.Gateways.IGatewayContext">
            <summary>
            Defines the GatewayContext
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.IGatewayContext.Payment">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Payment.IPaymentContext"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.IGatewayContext.Notification">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Notification.INotificationContext"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.IGatewayContext.Shipping">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Shipping.IShippingContext"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.IGatewayContext.Taxation">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.Taxation.ITaxationContext"/>
            </summary>
        </member>
        <member name="T:NKart.Core.Gateways.GatewayProviderTypedContextBase`1">
            <summary>
            Base class for GatewayContext objects
            </summary>
            <typeparam name="T">
            The type of the gateway provider
            </typeparam>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayProviderTypedContextBase`1._gatewayProviderService">
            <summary>
            The gateway provider service.
            </summary>
        </member>
        <member name="F:NKart.Core.Gateways.GatewayProviderTypedContextBase`1._resolver">
            <summary>
            The resolver.
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.#ctor(NKart.Core.Services.IGatewayProviderService,NKart.Core.Gateways.IGatewayProviderResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Gateways.GatewayProviderTypedContextBase`1"/> class.
            </summary>
            <param name="gatewayProviderService">
            The gateway provider service.
            </param>
            <param name="resolver">
            The resolver.
            </param>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.GatewayProviderResolver">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.IGatewayProviderResolver"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.GatewayProviderService">
            <summary>
            Gets the GatewayProviderService
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.GetAllActivatedProviders">
            <summary>
            Lists all activated <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <returns>A collection of all "activated" GatewayProvider of the particular type T</returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.GetAllProviders">
            <summary>
            Lists all available providers.  This list includes providers that are just resolved and not configured
            </summary>
            <returns>A collection of all GatewayProviders</returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.GetProviderByKey(System.Guid,System.Boolean)">
            <summary>
            Instantiates a GatewayProvider given its registered Key
            </summary>
            <param name="gatewayProviderKey">
            The gateway provider key
            </param>
            <param name="activatedOnly">
            Search only activated providers
            </param>
            <returns>
            An instantiated GatewayProvider
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.GetProviderByMethodKey(System.Guid)">
            <summary>
            Returns an instance of an 'active' GatewayProvider associated with a GatewayMethod based given the unique Key (GUID) of the GatewayMethod
            </summary>
            <param name="gatewayMethodKey">The unique key (GUID) of the <see cref="T:NKart.Core.Gateways.IGatewayMethod"/></param>
            <returns>An instantiated GatewayProvider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.CreateInstance(System.Guid)">
            <summary>
            Creates an instance GatewayProvider given its registered Key
            </summary>
            <param name="gatewayProviderKey">
            The gateway Provider Key.
            </param>
            <returns>
            An instance of the gateway provider.
            </returns>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.ActivateProvider(NKart.Core.Gateways.GatewayProviderBase)">
            <summary>
            Activates a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="provider">The GatewayProvider to be activated</param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.ActivateProvider(NKart.Core.Models.IGatewayProviderSettings)">
            <summary>
            Activates a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="gatewayProviderSettings">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> to be activated</param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.DeactivateProvider(NKart.Core.Gateways.GatewayProviderBase)">
            <summary>
            Deactivates a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="provider">The GatewayProvider to be deactivated</param>
        </member>
        <member name="M:NKart.Core.Gateways.GatewayProviderTypedContextBase`1.DeactivateProvider(NKart.Core.Models.IGatewayProviderSettings)">
            <summary>
            Deactivates a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="gatewayProviderSettings">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> to be deactivated</param>
        </member>
        <member name="T:NKart.Core.Gateways.IProvider">
            <summary>
            Marker interface for Providers 
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.IProvider.Key">
            <summary>
            Gets the unique key for the gateway.  
            Used by Merchello in the GatewayProvider's installation/configuration
            </summary>
        </member>
        <member name="M:NKart.Core.Gateways.IProvider.ListResourcesOffered">
            <summary>
            Returns a collection of all possible gateway methods associated with this provider
            </summary>
            <returns>
            A collection of <see cref="T:NKart.Core.Gateways.IGatewayResource"/>
            </returns>
        </member>
        <member name="T:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1">
            <summary>
            Defines a GatewayContext for a specific provider type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1.GetAllActivatedProviders">
            <summary>
            Lists all available <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <returns>A collection of all GatewayProvider of the particular type T</returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1.GetAllProviders">
            <summary>
            Lists all available providers.  This list includes providers that are just resolved and not configured
            </summary>
            <returns>A collection of all Gatewayprovider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1.GetProviderByKey(System.Guid,System.Boolean)">
            <summary>
            Instantiates a GatewayProvider given its registered Key
            </summary>
            <typeparam name="T">The Type of the GatewayProvider.  Must inherit from GatewayProviderBase</typeparam>
            <param name="gatewayProviderKey"></param>
            <param name="activatedOnly">Search only activated providers</param>
            <returns>An instantiated GatewayProvider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1.GetProviderByMethodKey(System.Guid)">
            <summary>
            Returns an instance of an 'active' GatewayProvider associated with a GatewayMethod based given the unique Key (Guid) of the GatewayMethod
            </summary>
            <param name="gatewayMethodKey">The unique key (Guid) of the <see cref="T:NKart.Core.Gateways.IGatewayMethod"/></param>
            <returns>An instantiated GatewayProvider</returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1.CreateInstance(System.Guid)">
            <summary>
            Obsolete method
            </summary>
            <param name="gatewayProviderKey"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1.ActivateProvider(NKart.Core.Gateways.GatewayProviderBase)">
            <summary>
            Activates a GatewayProvider
            </summary>
            <param name="provider">The GatewayProvider</param>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1.ActivateProvider(NKart.Core.Models.IGatewayProviderSettings)">
            <summary>
            Activates a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="gatewayProviderSettings">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> to be activated</param>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1.DeactivateProvider(NKart.Core.Gateways.GatewayProviderBase)">
            <summary>
            Activates a GatewayProvider
            </summary>
            <param name="provider">The GatewayProvider</param>
        </member>
        <member name="M:NKart.Core.Gateways.IGatewayProviderTypedContextBase`1.DeactivateProvider(NKart.Core.Models.IGatewayProviderSettings)">
            <summary>
            Deactivates a <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/>
            </summary>
            <param name="gatewayProviderSettings">The <see cref="T:NKart.Core.Models.IGatewayProviderSettings"/> to be deactivated</param>
        </member>
        <member name="T:NKart.Core.Gateways.GatewayResource">
            <summary>
            Defines a GatewayMethod 
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayResource.ServiceCode">
            <summary>
            The unique provider service code or 'alias' for the gateway method.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.GatewayResource.Name">
            <summary>
            The descriptive name of the Gateway Method
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.IGatewayResource.ServiceCode">
            <summary>
            The unique provider service code or 'alias' for the gateway method.
            </summary>
        </member>
        <member name="P:NKart.Core.Gateways.IGatewayResource.Name">
            <summary>
            The descriptive name of the Gateway Method
            </summary>
        </member>
        <member name="T:NKart.Core.JsonHelper">
            <summary>
            Utility to help with JSON serialization.
            </summary>
        </member>
        <member name="M:NKart.Core.JsonHelper.IsJsonObject(System.Object)">
            <summary>
            Simple check to guess if a property value is a JSON string
            </summary>
            <param name="propVal">
            The prop val.
            </param>
            <returns>
            The guess.
            </returns>
        </member>
        <member name="T:NKart.Core.MandateWrapperExtensions">
            <summary>
            Wraps Mandate with some common parameter checks
            </summary>
        </member>
        <member name="M:NKart.Core.MandateWrapperExtensions.ParameterNotEmptyGuid(System.Guid,System.String)">
            <summary>
            Mandates a GUID is not empty
            </summary>
            <param name="value">
            The GUID value.
            </param>
            <param name="parameterName">
            The parameter name.
            </param>
        </member>
        <member name="T:NKart.Core.Marketing.Constraints.OfferConstraintComponentBase">
            <summary>
            The offer constraint component base.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Constraints.OfferConstraintComponentBase.#ctor(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Constraints.OfferConstraintComponentBase"/> class.
            </summary>
            <param name="definition">
            The definition.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Constraints.OfferConstraintComponentBase.ComponentType">
            <summary>
            Gets the component type.
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Constraints.ProductConstraintData">
            <summary>
            The product constraint data.
            </summary>
            <remarks>
            Used when working with data stored in the <see cref="!:ProductSelectionFilterConstraint"/>
            </remarks>
        </member>
        <member name="P:NKart.Core.Marketing.Constraints.ProductConstraintData.ProductKey">
            <summary>
            Gets or sets the product key.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Constraints.ProductConstraintData.VariantKeys">
            <summary>
            Gets or sets the collection of product variant keys.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Constraints.ProductConstraintData.SpecifiedVariants">
            <summary>
            Gets or sets a value indicating whether specific variants were specified.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Constraints.ProductConstraintData.Exclude">
            <summary>
            Gets or sets a value indicating whether the product should be excluded.
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Constraints.ProductConstraintDataExtensions">
            <summary>
            The product constraint data extensions.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Constraints.ProductConstraintDataExtensions.GetUiDisplayText(System.Collections.Generic.IEnumerable{NKart.Core.Marketing.Constraints.ProductConstraintData})">
            <summary>
            Gets display text for the back office UI.
            </summary>
            <param name="constraints">
            The constraints.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Constraints.ProductConstraintDataExtensions.GetUiDisplayText(System.Collections.Generic.IEnumerable{NKart.Core.Marketing.Constraints.ProductConstraintData},NKart.Core.IMerchelloContext)">
            <summary>
            Gets display text for the back office UI.
            </summary>
            <param name="constraints">
            The constraints.
            </param>
            <param name="mc">
            The mc.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Constraints.OfferConstraintComponentBase`1">
            <summary>
            A base class for offer constraints
            </summary>
            <typeparam name="T">
            The type of object to return
            </typeparam>
        </member>
        <member name="M:NKart.Core.Marketing.Constraints.OfferConstraintComponentBase`1.#ctor(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Constraints.OfferConstraintComponentBase`1"/> class. 
            </summary>
            <param name="definition">
            The <see cref="T:NKart.Core.Marketing.Offer.OfferComponentDefinition"/>.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Constraints.OfferConstraintComponentBase`1.TypeGrouping">
            <summary>
            Gets the Type of object this group uses to validate constraints.
            The to which this component can be grouped with
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Constraints.OfferConstraintComponentBase`1.TryApply(`0,NKart.Core.Models.ICustomerBase)">
            <summary>
            Validates the constraint against the <see cref="T:NKart.Core.Models.ILineItemContainer"/>
            </summary>
            <param name="value">
            The value to object to which the constraint is to be applied.
            </param>
            <param name="customer">
            The <see cref="T:NKart.Core.Models.ICustomerBase"/>.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt`1"/> indicating whether or not the constraint can be enforced.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Constraints.IOfferConstraintComponent`1">
            <summary>
            Defines a Discount Constraint.
            </summary>
            <typeparam name="T">
            The type of object to attempt to return
            </typeparam>
        </member>
        <member name="M:NKart.Core.Marketing.Constraints.IOfferConstraintComponent`1.TryApply(`0,NKart.Core.Models.ICustomerBase)">
            <summary>
            Validates the constraint against the <see cref="T:NKart.Core.Models.ILineItemContainer"/>
            </summary>
            <param name="value">
            The value to object to which the constraint is to be applied.
            </param>
            <param name="customer">
            The <see cref="T:NKart.Core.Models.ICustomerBase"/>.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt`1"/> indicating whether or not the constraint can be enforced.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.IOfferRedemptionResult`1">
            <summary>
            The result that is in an attempt to apply a offer to a sale.
            </summary>
            <typeparam name="TAward">
            The type of award
            </typeparam>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferRedemptionResult`1.Success">
            <summary>
            Gets or sets a value indicating whether or not the offer application was successful.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferRedemptionResult`1.Award">
            <summary>
            Gets or sets the award.
            </summary>
            <remarks>
            Can be null on exception
            </remarks>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferRedemptionResult`1.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferRedemptionResult`1.Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferRedemptionResult`1.AddMessage(System.String)">
            <summary>
            Adds a message.
            </summary>
            <param name="msg">
            The message.
            </param>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferRedemptionResult`1.AddMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a collection of messages.
            </summary>
            <param name="messages">
            The messages.
            </param>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.IOfferResult`2">
            <summary>
            Defines an OfferResult.
            </summary>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of award
            </typeparam>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferResult`2.Award">
            <summary>
            Gets or sets the award.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferResult`2.ValidatedAgainst">
            <summary>
            Gets or sets the validated against.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferResult`2.Customer">
            <summary>
            Gets or sets the customer.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferResult`2.Messages">
            <summary>
            Gets or sets the messages.
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferComponentType">
            <summary>
            The offer component type.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentType.Constraint">
            <summary>
            Identifies a constraint
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentType.Reward">
            <summary>
            Identifies a reward
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentType.Custom">
            <summary>
            Identifies a custom component type
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.IOfferManagerBase`1">
            <summary>
            Defines an Offer provider responsible for manage .
            </summary>
            <typeparam name="TOffer">
            The type of the Offer this provider is responsible for managing
            </typeparam>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferManagerBase`1.GetByKey(System.Guid)">
            <summary>
            Gets an offer by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="!:TOffer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferManagerBase`1.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="!:TOffer"/> by their unique keys
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferManagerBase`1.GetByOfferCode(System.String,NKart.Core.Models.ICustomerBase)">
            <summary>
            Gets an offer by it's offer code.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferManagerBase`1.GetByOfferCode``2(System.String,NKart.Core.Models.ICustomerBase)">
            <summary>
            Gets an offer by it's offer code.
            </summary>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of offer award
            </typeparam>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="customer">The customer</param>
            <returns>
            The <see cref="!:TOffer"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.IOfferProviderResolver">
            <summary>
            Defines the OfferProviderResolver
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferProviderResolver.GetByKey(System.Guid)">
            <summary>
            The a <see cref="T:NKart.Core.Marketing.Offer.IOfferProvider"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Marketing.Offer.IOfferProvider"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferProviderResolver.GetOfferProviders">
            <summary>
            The get offer providers.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferProviderResolver.GetOfferProvider``1">
            <summary>
            Gets an offer provider by it's type T.
            </summary>
            <typeparam name="T">
            The type of offer provider
            </typeparam>
            <returns>
            The instantiated offer provider
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferComponentConfiguration">
            <summary>
            A intermediate class used in the serialization and deserialization of <see cref="T:NKart.Core.Marketing.Offer.OfferComponentDefinition"/>s.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentConfiguration.OfferSettingsKey">
            <summary>
            Gets or sets the offer settings key.
            </summary>
            <remarks>
            Useful in constraint / award attempts
            </remarks>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentConfiguration.OfferCode">
            <summary>
            Gets or sets the offer code.
            </summary>
            <remarks>
            Useful in constraint / award attempts
            </remarks>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentConfiguration.ComponentKey">
            <summary>
            Gets or sets the component key.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentConfiguration.TypeFullName">
            <summary>
            Gets or sets the type name.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentConfiguration.Values">
            <summary>
            Gets or sets the values.
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferComponentBase">
            <summary>
            Base class for offer constraints.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentBase._definition">
            <summary>
            The <see cref="P:NKart.Core.Marketing.Offer.OfferComponentBase.OfferComponentDefinition"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentBase.#ctor(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentBase"/> class.
            </summary>
            <param name="definition">
            The <see cref="P:NKart.Core.Marketing.Offer.OfferComponentBase.OfferComponentDefinition"/>.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentBase.OfferSettingsKey">
            <summary>
            Gets the offer settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentBase.OfferCode">
            <summary>
            Gets the offer code.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentBase.ComponentType">
            <summary>
            Gets the component type.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentBase.RequiresConfiguration">
            <summary>
            Gets a value indicating whether this component requires configuration.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentBase.DisplayConfigurationFormat">
            <summary>
            Gets the display configuration format.
            This text is used by the back office UI to display configured values
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentBase.TypeGrouping">
            <summary>
            Gets the Type to which this component can be grouped with
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentBase.OfferComponentDefinition">
            <summary>
            Gets the <see cref="P:NKart.Core.Marketing.Offer.OfferComponentBase.OfferComponentDefinition"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentBase.GetConfigurationValue(System.String)">
            <summary>
            Gets a value from the extended data configuration.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferComponentDefinition">
            <summary>
            The constraint settings.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentDefinition.#ctor(NKart.Core.Marketing.Offer.OfferComponentConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentDefinition"/> class.
            </summary>
            <param name="configuration">
            The configuration.
            </param>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentDefinition"/> class.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentDefinition.OfferSettingsKey">
            <summary>
            Gets or sets the offer settings key.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentDefinition.OfferCode">
            <summary>
            Gets or sets the offer code.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentDefinition.ComponentKey">
            <summary>
            Gets or sets the component key.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentDefinition.TypeFullName">
            <summary>
            Gets the component type name.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentDefinition.ExtendedData">
            <summary>
            Gets or sets the <see cref="T:NKart.Core.Models.ExtendedDataCollection"/>.
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferComponentResolver">
            <summary>
            Represents a discount constraint resolver.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentResolver._instanceTypes">
            <summary>
            The instance types.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentResolver._offerProviderResolver">
            <summary>
            The <see cref="T:NKart.Core.Marketing.Offer.OfferProviderResolver"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentResolver"/> class.
            </summary>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type},NKart.Core.Marketing.Offer.IOfferProviderResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentResolver"/> class.
            </summary>
            <param name="values">
            The values.
            </param>
            <param name="offerProviderResolver">
            The offer provider resolver.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentResolver.InstanceTypes">
            <summary>
            Gets the instance types.
            </summary>
            <remarks>
            Used for testing
            </remarks>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentResolver.GetOfferComponentsByProviderKey(System.Guid)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Marketing.Offer.OfferComponentBase"/> by the provider key.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentResolver.GetOfferComponent(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            Gets an instantiated offer component by it's definition.
            </summary>
            <param name="definition">
            The definition.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Marketing.Offer.OfferComponentBase"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentResolver.GetOfferComponents(System.Collections.Generic.IEnumerable{NKart.Core.Marketing.Offer.OfferComponentDefinition})">
            <summary>
            Gets the collection of offer components.
            </summary>
            <param name="definitions">
            The definitions.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentResolver.GetTypeByComponentKey(System.Guid)">
            <summary>
            Finds a type by the key assigned in the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentAttribute"/>
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:System.Type"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentResolver.GetOfferComponent``1(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            The get offer component.
            </summary>
            <param name="definition">
            The definition.
            </param>
            <typeparam name="T">
            The type of component to be returned
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
            <remarks>
            TODO decide if this should be removed - probably be more useful if it did not require a definition
            and simply returned an new instantion of the type T
            </remarks>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentResolver.GetTypesRespectingRestriction(System.String)">
            <summary>
            The get types respecting restriction.
            </summary>
            <param name="restrictedTypeName">
            The restricted type name.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentResolver.CreateEmptyOfferComponentDefinition(System.Type)">
            <summary>
            Creates an empty component.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Marketing.Offer.OfferComponentDefinition"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferComponentCategory">
            <summary>
            The discount constraint category.
            </summary>        
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentCategory.Customer">
            <summary>
            Customer related
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentCategory.Product">
            <summary>
            Product related
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentCategory.Shipping">
            <summary>
            Shipping related
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferComponentCategory.Sale">
            <summary>
            Sale related
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferComponentAttribute">
            <summary>
            Used to decorate Discount Rule classes that require a back office Angular dialog for additional configuration.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentAttribute"/> class.
            </summary>
            <param name="key">
            The required key (GUID).  This should be a new GUID to represent this class.
            </param>
            <param name="name">
            The name of the component.
            </param>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentAttribute"/> class.
            </summary>
            <param name="key">
            The required key (GUID).  This should be a new GUID to represent this class.
            </param>
            <param name="name">
            The name of the component.
            </param>
            <param name="description">
            A description of the component.
            </param>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentAttribute"/> class.
            </summary>
            <param name="key">
            The required key (GUID).  This should be a new GUID to represent this class.
            </param>
            <param name="name">
            The name of the component.
            </param>
            <param name="description">
            A description of the component.
            </param>
            <param name="editorView">
            The editor view for the component
            </param>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferComponentAttribute.#ctor(System.String,System.String,System.String,System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferComponentAttribute"/> class.
            </summary>
            <param name="key">
            The required key (GUID).  This should be a new GUID to represent this class.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="description">
            A description of the component.
            </param>
            <param name="editorView">
            The editor view.  If set the back office will assume that a dialog should be added to associate additional configuration values with the component.
            </param>
            <param name="restrictToType">
            Restricts usage of the component to a particular type of <see cref="T:NKart.Core.Marketing.Offer.OfferComponentBase"/>.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentAttribute.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentAttribute.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentAttribute.EditorView">
            <summary>
            Gets or sets the editor view.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferComponentAttribute.RestrictToType">
            <summary>
            Gets or sets the restrict to type.
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.IOfferComponentResolver">
            <summary>
            Defines the OfferComponentResolver.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferComponentResolver.GetOfferComponentsByProviderKey(System.Guid)">
            <summary>
            Gets the collection of <see cref="T:NKart.Core.Marketing.Offer.OfferComponentBase"/> that can be associated with a provider.
            </summary>
            <param name="providerKey">
            The provider key.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferComponentResolver.GetOfferComponent(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            Gets a <see cref="T:NKart.Core.Marketing.Offer.OfferComponentBase"/> by it's definition
            </summary>
            <param name="definition">
            The definition.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Marketing.Offer.OfferComponentBase"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOfferComponentResolver.GetOfferComponents(System.Collections.Generic.IEnumerable{NKart.Core.Marketing.Offer.OfferComponentDefinition})">
            <summary>
            Returns a collection of all resolved <see cref="T:NKart.Core.Marketing.Constraints.IOfferConstraintComponent`1"/> given a collection of definition.
            </summary>
            <param name="definitions">
            The definition.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferBase">
            <summary>
            A base for Offer classes
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferBase._componentResolver">
            <summary>
            The offer component resolver.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferBase._offerProcessorFactory">
            <summary>
            The offer chain resolver.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferBase._offerProcessor">
            <summary>
            The offer processor.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferBase._components">
            <summary>
            The resolved offer components.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.#ctor(NKart.Core.Models.Interfaces.IOfferSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferBase"/> class.
            </summary>
            <param name="settings">
            The <see cref="T:NKart.Core.Models.Interfaces.IOfferSettings"/>.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.Key">
            <summary>
            Gets the key.
            </summary>
            <remarks>
            This is actually a reference to the OfferSettings key
            </remarks>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.OfferProviderKey">
            <summary>
            Gets or sets the offer provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.OfferCode">
            <summary>
            Gets or sets the offer code.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.OfferStartsDate">
            <summary>
            Gets or sets the offer starts date.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.OfferEndsDate">
            <summary>
            Gets or sets the offer ends date.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.Active">
            <summary>
            Gets or sets a value indicating whether the offer is active.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.Settings">
            <summary>
            Gets the settings.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.Constraints">
            <summary>
            Gets the collection constraints.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.Reward">
            <summary>
            Gets the offer reward.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.OfferProcessor">
            <summary>
            Gets the offer processor.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferBase.ResolvedComponents">
            <summary>
            Gets the resolved components.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.TryApplyConstraints``2(System.Object,NKart.Core.Models.ICustomerBase)">
            <summary>
            Attempts to apply the constraints against the offer.
            </summary>
            <param name="validatedAgainst">
            The validated against.
            </param>
            <param name="customer">
            The customer.
            </param>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of offer award
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.TryToAward``2(System.Object,NKart.Core.Models.ICustomerBase,System.Boolean)">
            <summary>
            Attempts to award the reward defined by the offer
            </summary>
            <param name="validatedAgainst">
            An object passed to the offer constraints.
            </param>
            <param name="customer">
            The customer.
            </param>
            <param name="applyConstraints">
            Optional parameter indicating whether or not to apply constraints before attempting to award the reward.
            Defaults to true.
            </param>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of offer award
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.TryApplyConstraints(System.Object,NKart.Core.Models.ICustomerBase)">
            <summary>
            Tries to apply the constraints
            </summary>
            <param name="validatedAgainst">
            The validated against.
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.TryToAward``2(NKart.Core.Models.ICustomerBase,System.Boolean)">
            <summary>
            Attempts to award the reward defined by the offer
            </summary>
            <param name="customer">
            The customer.
            </param>
            <param name="applyConstraints">
            Optional parameter indicating whether or not to apply constraints before attempting to award the reward.
            Defaults to true.
            </param>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of offer award
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.TryToAward(System.Object,NKart.Core.Models.ICustomerBase,System.Boolean)">
            <summary>
            Attempts to award the reward defined by the offer
            </summary>
            <param name="validatedAgainst">
            The constrain by.
            </param>
            <param name="customer">
            The customer.
            </param>
            <param name="applyConstraints">
            Optional parameter indicating whether or not to apply constraints before attempting to award the reward.
            Defaults to true.
            </param>
            <returns>
            
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.EnsureOfferIsValid``2(NKart.Core.Models.ICustomerBase)">
            <summary>
            The ensure offer is valid.
            </summary>
            <param name="customer">
            The customer.
            </param>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of award
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.PopulateConstraintOfferResult(NKart.Core.Marketing.Offer.IOfferResult{System.Object,System.Object},Umbraco.Core.Attempt{System.Object})">
            <summary>
            The populate constraint offer result.
            </summary>
            <param name="seed">
            The seed.
            </param>
            <param name="constraintAttempt">
            The constraint attempt.
            </param>
            <returns>
            The offer result.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.EnsureValidOffer(NKart.Core.Marketing.Offer.IOfferResult{System.Object,System.Object})">
            <summary>
            Ensures the offer is valid.
            </summary>
            <param name="seed">
            The seed.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferBase.Initialize">
            <summary>
            The initialize.
            </summary>
            <exception cref="T:System.Exception">
            Throws an exception if the offer component resolver has not been instantiated
            </exception>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.IOffer">
            <summary>
            Marker interface for an offer.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOffer.Key">
            <summary>
            Gets the key.
            </summary>
            <remarks>
            This is actually a reference to the OfferSettings key
            </remarks>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOffer.OfferProviderKey">
            <summary>
            Gets or sets the offer provider key.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOffer.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOffer.OfferCode">
            <summary>
            Gets or sets the offer code.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOffer.OfferStartsDate">
            <summary>
            Gets or sets the offer starts date.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOffer.OfferEndsDate">
            <summary>
            Gets or sets the offer ends date.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOffer.Active">
            <summary>
            Gets or sets a value indicating whether the offer is active.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOffer.TryApplyConstraints``2(System.Object,NKart.Core.Models.ICustomerBase)">
            <summary>
            Attempts to apply the constraints against the offer.
            </summary>
            <param name="validatedAgainst">
            The validated against.
            </param>
            <param name="customer">
            The customer.
            </param>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of offer award
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.IOffer.TryToAward``2(System.Object,NKart.Core.Models.ICustomerBase,System.Boolean)">
            <summary>
            Attempts to award the reward defined by the offer
            </summary>
            <param name="validatedAgainst">
            An object passed to the offer constraints.
            </param>
            <param name="customer">
            The customer.
            </param>
            <param name="applyConstraints">
            Optional parameter indicating whether or not to apply constraints before attempting to award the reward.
            Defaults to true.
            </param>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of offer award
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.IOfferProvider">
            <summary>
            The DiscountOfferProvider interface.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferProvider.Key">
            <summary>
            Gets the key.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.IOfferProvider.ManagesTypeName">
            <summary>
            Gets the name of the type this provider manages.
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferManagerBase`1">
            <summary>
            A base class to be implemented by resolved OfferProviders.
            </summary>
            <typeparam name="TOffer">
            The type of the offer to be managed
            </typeparam>
            <remarks>
            This is used in provider resolution
            </remarks>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferManagerBase`1._offerSettingsService">
            <summary>
            The <see cref="T:NKart.Core.Services.IOfferSettingsService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferManagerBase`1.#ctor(NKart.Core.Services.IOfferSettingsService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferManagerBase`1"/> class.
            </summary>
            <param name="offerSettingsService">
            The <see cref="T:NKart.Core.Services.IOfferSettingsService"/>.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferManagerBase`1.Key">
            <summary>
            Gets the key.
            </summary>
            <remarks>
            This should be a unique GUID for each OfferProvider
            </remarks>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferManagerBase`1.ManagesTypeName">
            <summary>
            Gets the type name of type managed by this provider.
            </summary>
            <remarks>
            This is used by the UI when determining what restricted offer components (if any) can be assigned
            </remarks>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferManagerBase`1.GetByKey(System.Guid)">
            <summary>
            The get by key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="!:TOffer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferManagerBase`1.GetByKeys(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="!:TOffer"/> by their unique keys
            </summary>
            <param name="keys">
            The keys.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferManagerBase`1.GetByOfferCode(System.String,NKart.Core.Models.ICustomerBase)">
            <summary>
            Gets an offer by it's offer code (with manager defaults).
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferManagerBase`1.GetByOfferCode``2(System.String,NKart.Core.Models.ICustomerBase)">
            <summary>
            Gets an offer by it's offer code.
            </summary>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of award
            </typeparam>
            <param name="offerCode">
            The offer code.
            </param>
            <param name="customer">
            The customer
            </param>
            <returns>
            The <see cref="!:TOffer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferManagerBase`1.GetInstance(NKart.Core.Models.Interfaces.IOfferSettings)">
            <summary>
            Instantiates an offer given it's settings
            </summary>
            <param name="offerSettings">
            The offer settings.
            </param>
            <returns>
            The <see cref="!:TOffer"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferProviderResolver">
            <summary>
            Represents the OfferProviderResolver.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferProviderResolver._lock">
            <summary>
            The lock.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferProviderResolver._offerProviderCache">
            <summary>
            The activated gateway provider cache.
            </summary>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferProviderResolver._offerSettingsService">
            <summary>
            The <see cref="T:NKart.Core.Services.IOfferSettingsService"/>.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferProviderResolver.#ctor(System.Collections.Generic.IEnumerable{System.Type},NKart.Core.Services.IOfferSettingsService)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferProviderResolver"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="offerSettingsService">
            The offer settings service.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferProviderResolver.Values">
            <summary>
            Gets the collection of instantiated OfferProviders.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferProviderResolver.GetByKey(System.Guid)">
            <summary>
            Gets a <see cref="T:NKart.Core.Marketing.Offer.IOfferProvider"/> by it's unique key.
            </summary>
            <param name="key">
            The key.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Marketing.Offer.IOfferProvider"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferProviderResolver.GetOfferProviders">
            <summary>
            Same as Values
            </summary>
            <returns>
            <seealso cref="P:NKart.Core.Marketing.Offer.OfferProviderResolver.Values"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferProviderResolver.GetOfferProvider``1">
            <summary>
            Gets an instantiated provider by it's type
            </summary>
            <typeparam name="T">
            The type of the provider
            </typeparam>
            <returns>
            The <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferProviderResolver.BuildOfferProviderCache">
            <summary>
            Builds the provider cache.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferProviderResolver.AddOrUpdateCache(NKart.Core.Marketing.Offer.IOfferProvider)">
            <summary>
            The add or update cache.
            </summary>
            <param name="provider">
            The provider.
            </param>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1">
            <summary>
            A base class for offer redemption results.
            </summary>
            <typeparam name="TAward">
            The type of the offer award
            </typeparam>
        </member>
        <member name="F:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1._message">
            <summary>
            The list of messages.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1.#ctor(`0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1"/> class for success. 
            </summary>
            <param name="award">
            The award.
            </param>
            <param name="messages">
            The messages.
            </param>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1.#ctor(System.Exception,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1"/> class for fail. 
            </summary>
            <param name="exception">
            The exception.
            </param>
            <param name="messages">
            The messages.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1.Success">
            <summary>
            Gets or sets a value indicating whether or not the offer application was successful.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1.Award">
            <summary>
            Gets or sets the award.
            </summary>
            <remarks>
            Can be null on exception
            </remarks>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1.Messages">
            <summary>
            Gets the messages.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1.AddMessage(System.String)">
            <summary>
            Adds a message.
            </summary>
            <param name="msg">
            The message.
            </param>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.OfferRedemptionResultBase`1.AddMessage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a collection of messages.
            </summary>
            <param name="messages">
            The messages.
            </param>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.OfferResult`2">
            <summary>
            The offer reward result.
            </summary>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of Award
            </typeparam>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferResult`2.Award">
            <summary>
            Gets or sets the award.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferResult`2.ValidatedAgainst">
            <summary>
            Gets or sets the validated against.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferResult`2.Customer">
            <summary>
            Gets or sets the customer.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Offer.OfferResult`2.Messages">
            <summary>
            Gets or sets the messages.
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Offer.StringOperatorHelper">
            <summary>
            Helper class.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.StringOperatorHelper.TextForOperatorString(System.String)">
            <summary>
            The text for operator string.
            </summary>
            <param name="op">
            The op.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Marketing.Offer.StringOperatorHelper.Evaluate(System.Decimal,System.Decimal,System.String)">
            <summary>
            Constructs a conditional expression based on the string operator
            </summary>
            <param name="left">
            The left.
            </param>
            <param name="right">
            The right.
            </param>
            <param name="op">
            The op.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Rewards.OfferRewardComponentBase">
            <summary>
            The offer reward component base.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Rewards.OfferRewardComponentBase.#ctor(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Rewards.OfferRewardComponentBase"/> class.
            </summary>
            <param name="definition">
            The definition.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Rewards.OfferRewardComponentBase.ComponentType">
            <summary>
            Gets the component type.
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Rewards.OfferRewardComponentBase.RewardType">
            <summary>
            Gets the reward type.
            </summary>
        </member>
        <member name="T:NKart.Core.Marketing.Rewards.OfferRewardComponentBaseExtensions">
            <summary>
            The offer reward component base extensions.
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Rewards.OfferRewardComponentBaseExtensions.GetRewardLineItemName(NKart.Core.Marketing.Rewards.OfferRewardComponentBase)">
            <summary>
            The get reward line item name.
            </summary>
            <param name="reward">
            The reward.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Rewards.OfferRewardComponentBase`2">
            <summary>
            The reward base.
            </summary>
            <typeparam name="TConstraint">
            The type to be passed to the constraints collection to validate if the reward should be awarded
            </typeparam>
            <typeparam name="TReward">
            The type of award to be returned
            </typeparam>
        </member>
        <member name="M:NKart.Core.Marketing.Rewards.OfferRewardComponentBase`2.#ctor(NKart.Core.Marketing.Offer.OfferComponentDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Marketing.Rewards.OfferRewardComponentBase`2"/> class.
            </summary>
            <param name="definition">
            The definition.
            </param>
        </member>
        <member name="P:NKart.Core.Marketing.Rewards.OfferRewardComponentBase`2.TypeGrouping">
            <summary>
            Gets the Type of object this group uses to validate constraints.
            The to which this component can be grouped with
            </summary>
        </member>
        <member name="P:NKart.Core.Marketing.Rewards.OfferRewardComponentBase`2.RewardType">
            <summary>
            Gets the reward type.
            This is used by the OfferProcessorFactory
            </summary>
        </member>
        <member name="M:NKart.Core.Marketing.Rewards.OfferRewardComponentBase`2.TryAward(`0,NKart.Core.Models.ICustomerBase)">
            <summary>
            Awards the reward.
            </summary>
            <param name="validate">
            The object to pass to the constraints collection
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            A value indicating whether or not the awarding process was successful.
            </returns>
        </member>
        <member name="T:NKart.Core.Marketing.Rewards.IOfferRewardComponent`2">
            <summary>
            Defines a reward.
            </summary>
            <typeparam name="TConstraint">
            The type to be passed to the constraints collection to validate if the reward should be awarded
            </typeparam>
            <typeparam name="TReward">
            The type of award to be returned
            </typeparam>
        </member>
        <member name="M:NKart.Core.Marketing.Rewards.IOfferRewardComponent`2.TryAward(`0,NKart.Core.Models.ICustomerBase)">
            <summary>
            Awards the reward.
            </summary>
            <param name="validate">
            The object to pass to the constraints collection
            </param>
            <param name="customer">
            The customer.
            </param>
            <returns>
            A value indicating whether or not the awarding process was successful.
            </returns>
        </member>
        <member name="T:NKart.Core.Formatters.IPatternReplaceFormatter">
            <summary>
            Defines a PatternReplaceFormatter
            </summary>
        </member>
        <member name="M:NKart.Core.Formatters.IPatternReplaceFormatter.AddOrUpdateReplaceablePattern(NKart.Core.Formatters.IReplaceablePattern)">
            <summary>
            Adds a replaceable pattern to the formatter
            </summary>
            <param name="pattern">
            The <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/> to be added or updated within the formatter
            </param>
        </member>
        <member name="M:NKart.Core.Formatters.IPatternReplaceFormatter.AddOrUpdateReplaceablePattern(System.Collections.Generic.IEnumerable{NKart.Core.Formatters.IReplaceablePattern})">
            <summary>
            Adds collection a replaceable pattern to the formatter
            </summary>
            <param name="patterns">
            The <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/>s to be added or updated within the formatter
            </param>
        </member>
        <member name="M:NKart.Core.Formatters.IPatternReplaceFormatter.SetReplacement(System.String,System.String)">
            <summary>
            Sets (or resets) and existing patterns replacement value
            </summary>
            <param name="alias">The alias of the <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/> which replacement value is to be updated</param>
            <param name="replacement">The new "replacement" value</param>
        </member>
        <member name="M:NKart.Core.Formatters.IPatternReplaceFormatter.RemoveReplaceablePattern(NKart.Core.Formatters.IReplaceablePattern)">
            <summary>
            Removes a replaceable pattern from the formatter
            </summary>
            <param name="pattern">
            The <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/> to be added or updated within the formatter
            </param>
            <returns>
            The <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/> removed
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.IPatternReplaceFormatter.GetReplaceablePatternByAlias(System.String)">
            <summary>
            Gets a replaceable pattern from the formatter by it's unique alias
            </summary>
            <param name="alias">
            The unique alias of the pattern to be returned
            </param>
            <returns>
            The <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.IPatternReplaceFormatter.GetReplaceablePatternByPattern(System.String)">
            <summary>
            Gets a replaceable pattern from the formatter by the pattern to be replaced
            </summary>
            <param name="pattern">
            The pattern defined in the <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/> to be returned
            </param>
            <returns>
            The <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/>.
            </returns>
        </member>
        <member name="P:NKart.Core.Formatters.IReplaceablePattern.Alias">
            <summary>
            Gets the unique alias
            </summary>
        </member>
        <member name="P:NKart.Core.Formatters.IReplaceablePattern.Pattern">
            <summary>
            Gets or sets the pattern to be searched
            </summary>
        </member>
        <member name="P:NKart.Core.Formatters.IReplaceablePattern.Replacement">
            <summary>
            Gets or sets the replacement for the pattern
            </summary>
        </member>
        <member name="T:NKart.Core.Formatters.PatternReplaceFormatter">
            <summary>
            Represents a PatternReplaceFormatter
            </summary>
        </member>
        <member name="F:NKart.Core.Formatters.PatternReplaceFormatter.IterationStart">
            <summary>
            The iteration start.
            </summary>
        </member>
        <member name="F:NKart.Core.Formatters.PatternReplaceFormatter.IterationEnd">
            <summary>
            The iteration end.
            </summary>
        </member>
        <member name="F:NKart.Core.Formatters.PatternReplaceFormatter.IterationCap">
            <summary>
            The iteration cap.
            </summary>
        </member>
        <member name="F:NKart.Core.Formatters.PatternReplaceFormatter._patterns">
            <summary>
            The _patterns.
            </summary>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.#ctor(System.Collections.Generic.IDictionary{System.String,NKart.Core.Formatters.IReplaceablePattern})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Formatters.PatternReplaceFormatter"/> class.
            </summary>
            <param name="patterns">
            The patterns.
            </param>
        </member>
        <member name="P:NKart.Core.Formatters.PatternReplaceFormatter.Patterns">
            <summary>
            Gets the Patterns dictionary.  Used for testing
            </summary>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.Format(System.String)">
            <summary>
            Formats a message
            </summary>
            <param name="value">
            The value to be formatted
            </param>
            <returns>
            A formatted string
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.AddOrUpdateReplaceablePattern(NKart.Core.Formatters.IReplaceablePattern)">
            <summary>
            Adds or updates a replaceable pattern to the formatter
            </summary>
            <param name="pattern">
            The pattern.
            </param>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.AddOrUpdateReplaceablePattern(System.Collections.Generic.IEnumerable{NKart.Core.Formatters.IReplaceablePattern})">
            <summary>
            Adds or updates collection a replaceable pattern to the formatter
            </summary>
            <param name="patterns">
            The patterns.
            </param>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.SetReplacement(System.String,System.String)">
            <summary>
            Sets (or resets) and existing patterns replacement value
            </summary>
            <param name="alias">The alias of the <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/> which replacement value is to be updated</param>
            <param name="replacement">The new "replacement" value</param>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.RemoveReplaceablePattern(NKart.Core.Formatters.IReplaceablePattern)">
            <summary>
            Removes a replaceable pattern from the formatter
            </summary>
            <param name="pattern">
            The pattern.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.GetReplaceablePatternByAlias(System.String)">
            <summary>
            Gets a replaceable pattern from the formatter by it's unique alias
            </summary>
            <param name="alias">
            The alias.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.GetReplaceablePatternByPattern(System.String)">
            <summary>
            Gets a replaceable pattern from the formatter by the pattern to be replaced
            </summary>
            <param name="pattern">
            The pattern.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Formatters.IReplaceablePattern"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.GetPatternReplaceFormatter">
            <summary>
            Static constructor that pre populates values initial values from the Merchello Config
            </summary>
            <returns>
            Returns an instantiated an instance of the <see cref="T:NKart.Core.Formatters.PatternReplaceFormatter"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.ExplodeLineItemIterations(System.String)">
            <summary>
            Replaces the short hand line item iteration call with a flushed out repeated patterns that
            can be used in the search and replace operation.
            </summary>
            <param name="value">
            The value to be worked on
            </param>
            <returns>
            Returns a string based on the value passed with line item identifiers repeated and suffixed with indexes matching
            their respective index in the enumeration (ex. 0,1,2,3)
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.GetIterationIdentifier(System.String)">
            <summary>
            Utility method to get the "iteration identifier" ex.  IternationStart[Invoice.Items] - where "Invoice.Items" is considered
            the identifier
            </summary>
            <param name="value">
            The value inspect for the token
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.IterationMarker(System.String,System.Boolean)">
            <summary>
            Helper method to construct the starting and ending patterns for replacing iteration markers
            </summary>
            <param name="identifier">
            The identifier.
            </param>
            <param name="isStart">
            True or false indicatng whether or not the identifier is the start or end of the iteration to 
            be found.
            </param>
            <returns>
            The iteration marker
            </returns>
        </member>
        <member name="M:NKart.Core.Formatters.PatternReplaceFormatter.GetLineItemCount(System.String)">
            <summary>
            Gets the count of the line items based on a repeated pattern
            </summary>
            <param name="identifier">
            The identifier
            </param>
            <returns>
            The <see cref="T:System.Int32"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Formatters.ReplaceablePattern">
            <summary>
            Represents a replaceable pattern
            </summary>
        </member>
        <member name="P:NKart.Core.Formatters.ReplaceablePattern.Alias">
            <summary>
            Gets the unique alias of the pattern
            </summary>
        </member>
        <member name="P:NKart.Core.Formatters.ReplaceablePattern.Pattern">
            <summary>
            Gets or sets the patterned to be search for
            </summary>
        </member>
        <member name="P:NKart.Core.Formatters.ReplaceablePattern.Replacement">
            <summary>
            Gets or sets the replacement for the pattern
            </summary>
        </member>
        <member name="T:NKart.Core.Formatters.DefaultFormatter">
            <summary>
            Represents the default formatter
            </summary>
        </member>
        <member name="M:NKart.Core.Formatters.DefaultFormatter.Format(System.String)">
            <summary>
            Performs the formatting operation on the value 
            </summary>
            <param name="value">
            The string to be formatted
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Formatters.IFormatter">
            <summary>
            Defines the NotificationFormatter
            </summary>
        </member>
        <member name="M:NKart.Core.Formatters.IFormatter.Format(System.String)">
            <summary>
            Formats a message
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            A formatted string
            </returns>
        </member>
        <member name="T:NKart.Core.Notification">
            <summary>
            Utility class used to trigger notifications inline
            </summary>
        </member>
        <member name="M:NKart.Core.Notification.Trigger(System.String,NKart.Core.Observation.Topic)">
            <summary>
            Triggers a notification by it's alias
            </summary>
            <param name="alias">
            The alias of the trigger
            </param>
            <param name="topic">
            The trigger topic.
            </param>
        </member>
        <member name="M:NKart.Core.Notification.Trigger(System.String,System.Object,NKart.Core.Observation.Topic)">
            <summary>
            Triggers a notification by it's alias and includes a model to pass information to the message
            </summary>
            <param name="alias">
            The alias of the trigger
            </param>
            <param name="model">
            The model to be passed to the monitor
            </param>
            <param name="topic">
            The topic.
            </param>
        </member>
        <member name="M:NKart.Core.Notification.Trigger(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},NKart.Core.Observation.Topic)">
            <summary>
            Triggers a notification by it's alias and includes a model to pass information to the message
            </summary>
            <param name="alias">
            The alias of the trigger
            </param>
            <param name="model">
            The model to be passed to the monitor
            </param>
            <param name="contacts">
            An additional list of contacts
            </param>
            <param name="topic">
            The topic.
            </param>
        </member>
        <member name="M:NKart.Core.Notification.GetTrigger(System.String,NKart.Core.Observation.Topic)">
            <summary>
            Utility method used to get a collection of triggers from the resolver that match the alias passed
            </summary>
            <param name="alias">
            The alias to match when resolving the triggers
            </param>
            <param name="topic">
            The topic.
            </param>
            <returns>
            A collection of triggers
            </returns>
        </member>
        <member name="T:NKart.Core.NotificationExtensions">
            <summary>
            Notification related extension methods
            </summary>
        </member>
        <member name="M:NKart.Core.NotificationExtensions.Notify(NKart.Core.Gateways.Payment.IPaymentResult,System.String)">
            <summary>
            The notify extension method for <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/>
            </summary>
            <param name="result">
            The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/>
            </param>
            <param name="alias">
            The alias.
            </param>
            <remarks>
            This extension is intended for internal emails only.  To use to notify a customer,
            use the overloaded version and pass an array of contact addresses.
            </remarks>
        </member>
        <member name="M:NKart.Core.NotificationExtensions.Notify(NKart.Core.Gateways.Payment.IPaymentResult,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            The notify extension method for <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/>
            </summary>
            <param name="result">
            The result.
            </param>
            <param name="alias">
            The alias.
            </param>
            <param name="contacts">
            The contacts.
            </param>
        </member>
        <member name="T:NKart.Core.Observation.IMonitor">
            <summary>
            Marker interface for Monitor observers
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.IMonitor.ObservesType">
            <summary>
            The type being observed {T}
            </summary>
        </member>
        <member name="T:NKart.Core.Observation.IMonitorResolver">
            <summary>
            Defines the MonitorResolver
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.IMonitorResolver.GetAllMonitors``1">
            <summary>
            Gets the collection of all resovled <see cref="T:NKart.Core.Observation.IMonitor"/>s
            </summary>
            <typeparam name="T">The type of the <see cref="T:NKart.Core.Observation.IMonitor"/></typeparam>
        </member>
        <member name="M:NKart.Core.Observation.IMonitorResolver.GetAllMonitors">
            <summary>
            Gets the collection of all resovled <see cref="T:NKart.Core.Observation.IMonitor"/>s
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.IMonitorResolver.GetMonitors``1">
            <summary>
            Gets a <see cref="T:NKart.Core.Observation.IMonitor"/> from the resolver
            </summary>
            <returns>A <see cref="T:NKart.Core.Observation.IMonitor"/></returns>
        </member>
        <member name="M:NKart.Core.Observation.IMonitorResolver.GetMonitorByKey``1(System.Guid)">
            <summary>
            Get's a <see cref="T:NKart.Core.Observation.IMonitor"/> by it's attribute Key
            </summary>
            <typeparam name="T">The type of the <see cref="T:NKart.Core.Observation.IMonitor"/></typeparam>
            <param name="key">The key from the <see cref="T:NKart.Core.Observation.MonitorForAttribute"/> (Guid)</param>
            <returns>A <see cref="T:NKart.Core.Observation.IMonitor"/> of T</returns>
        </member>
        <member name="M:NKart.Core.Observation.IMonitorResolver.GetMonitorByKey(System.Guid)">
            <summary>
            Get's a <see cref="T:NKart.Core.Observation.IMonitor"/> by it's attribute Key
            </summary>
            <param name="key">The key from the <see cref="T:NKart.Core.Observation.MonitorForAttribute"/> (Guid)</param>
            <returns>A <see cref="T:NKart.Core.Observation.IMonitor"/> of T</returns>
        </member>
        <member name="M:NKart.Core.Observation.IMonitorResolver.GetMonitorsForTrigger(System.Type)">
            <summary>
            Gets a collection of all monitors for a particular observable trigger
            </summary>
            <param name="triggerType">The Type of the Trigger</param>
        </member>
        <member name="M:NKart.Core.Observation.IMonitorResolver.GetMonitorsForTrigger``1">
            <summary>
            Gets a collection of all monitors for a particular observable trigger
            </summary>
            <typeparam name="T">The Type of the Trigger</typeparam>
        </member>
        <member name="T:NKart.Core.Observation.ITrigger">
            <summary>
            Marker interface for Observable triggers
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.ITrigger.HasMonitors">
            <summary>
            True / false indicating whether or not this trigger is being monitored
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.ITrigger.MonitorCount">
            <summary>
            Returns the count of monitors
            </summary>
        </member>
        <member name="T:NKart.Core.Observation.MonitorBase`1">
            <summary>
            Defines a Base Monitor
            </summary>
            <typeparam name="T">
            The type of the monitor Model
            </typeparam>
        </member>
        <member name="P:NKart.Core.Observation.MonitorBase`1.ObservesType">
            <summary>
            Gets the obverves type of the monitor
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.MonitorBase`1.OnNext(`0)">
            <summary>
            Performs the action
            </summary>
            <param name="value">The model used in the monitor</param>
        </member>
        <member name="M:NKart.Core.Observation.MonitorBase`1.Subscribe(NKart.Core.Observation.ITriggerResolver)">
            <summary>
            Subscribes itself to a <see cref="T:NKart.Core.Observation.ITrigger"/>
            </summary>
            <param name="resolver">
            The <see cref="T:NKart.Core.Observation.ITriggerResolver"/> that resolves the trigger this monitor subscribes to
            </param>
            <returns>
            The <see cref="T:System.IDisposable"/> monitor
            </returns>
        </member>
        <member name="T:NKart.Core.Observation.MonitorResolver">
            <summary>
            Represents a MonitorResolver
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.MonitorResolver.Values">
            <summary>
            Gets the instantiated values of the resolved types
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.MonitorResolver.GetAllMonitors``1">
            <summary>
            Gets the collection of all resovled <see cref="T:NKart.Core.Observation.IMonitor"/>s
            </summary>
            <typeparam name="T">
            The type of monitor to resolve
            </typeparam>
            <returns>
            The collection of monitors.
            </returns>
        </member>
        <member name="M:NKart.Core.Observation.MonitorResolver.GetAllMonitors">
            <summary>
            Gets the collection of all resovled <see cref="T:NKart.Core.Observation.IMonitor"/>s
            </summary>
            <returns>
            A collection of <see cref="T:NKart.Core.Observation.IMonitor"/>
            </returns>
        </member>
        <member name="M:NKart.Core.Observation.MonitorResolver.GetMonitors``1">
            <summary>
            Gets a <see cref="T:NKart.Core.Observation.IMonitor"/> from the resolver
            </summary>
            <typeparam name="T">
            The type of monitor to resolve
            </typeparam>
            <returns>
            The collection of monitors resolved
            </returns>
        </member>
        <member name="M:NKart.Core.Observation.MonitorResolver.GetMonitorByKey``1(System.Guid)">
            <summary>
            Get's a <see cref="T:NKart.Core.Observation.IMonitor"/> by it's attribute Key
            </summary>
            <typeparam name="T">The type of the <see cref="T:NKart.Core.Observation.IMonitor"/></typeparam>
            <param name="key">The key from the <see cref="T:NKart.Core.Observation.MonitorForAttribute"/> (Guid)</param>
            <returns>A <see cref="T:NKart.Core.Observation.IMonitor"/> of T</returns>
        </member>
        <member name="M:NKart.Core.Observation.MonitorResolver.GetMonitorByKey(System.Guid)">
            <summary>
            Get's a <see cref="T:NKart.Core.Observation.IMonitor"/> by it's attribute Key
            </summary>
            <param name="key">The key from the <see cref="T:NKart.Core.Observation.MonitorForAttribute"/> (Guid)</param>
            <returns>A <see cref="T:NKart.Core.Observation.IMonitor"/> of T</returns>
        </member>
        <member name="M:NKart.Core.Observation.MonitorResolver.GetMonitorsForTrigger(System.Type)">
            <summary>
            Gets a collection of all monitors for a particular observable trigger
            </summary>
            <param name="triggerType">
            The Type of the Trigger
            </param>
            <returns>
            The collection of monitors resolved
            </returns>
        </member>
        <member name="M:NKart.Core.Observation.MonitorResolver.GetMonitorsForTrigger``1">
            <summary>
            Gets a collection of all monitors for a particular observable trigger
            </summary>
            <typeparam name="T">
            The Type of the Trigger
            </typeparam>
            <returns>
            The collection of monitors resolved
            </returns>
        </member>
        <member name="T:NKart.Core.Observation.Topic">
            <summary>
            The observable topic.
            </summary>
        </member>
        <member name="F:NKart.Core.Observation.Topic.Notifications">
            <summary>
            Designates notifications
            </summary>
        </member>
        <member name="F:NKart.Core.Observation.Topic.Custom">
            <summary>
            Desinates custom observation 
            </summary>
        </member>
        <member name="T:NKart.Core.Observation.TriggerForAttribute">
            <summary>
            Represents the TriggerForAttribute used to decorate <see cref="T:NKart.Core.Gateways.Notification.Triggering.INotificationTrigger"/>s
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.TriggerForAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Observation.TriggerForAttribute"/> class.
            </summary>
            <param name="alias">The alias</param>
        </member>
        <member name="M:NKart.Core.Observation.TriggerForAttribute.#ctor(System.String,NKart.Core.Observation.Topic)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Observation.TriggerForAttribute"/> class.
            </summary>
            <param name="alias">The alias</param>
            <param name="topic">The <see cref="P:NKart.Core.Observation.TriggerForAttribute.Topic"/></param>
        </member>
        <member name="M:NKart.Core.Observation.TriggerForAttribute.#ctor(System.String,NKart.Core.Observation.Topic,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Observation.TriggerForAttribute"/> class.
            </summary>
            <param name="alias">The alias</param>
            <param name="topic">The <see cref="P:NKart.Core.Observation.TriggerForAttribute.Topic"/></param>
            <param name="type">The type</param>
            <param name="handleEvent">The event to be handled</param>
        </member>
        <member name="P:NKart.Core.Observation.TriggerForAttribute.Alias">
            <summary>
            Gets the alias of the trigger
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.TriggerForAttribute.Topic">
            <summary>
            Gets the <see cref="P:NKart.Core.Observation.TriggerForAttribute.Topic"/> or category of the trigger
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.TriggerForAttribute.Type">
            <summary>
            Gets the type to define the event to be handled
            </summary>
            <remarks>
            Placeholder for "auto triggers" 
            </remarks>
        </member>
        <member name="P:NKart.Core.Observation.TriggerForAttribute.HandleEvent">
            <summary>
            Gets the name of the event to be handled
            </summary>
            <remarks>
            Placeholder for "auto triggers" 
            </remarks>
        </member>
        <member name="T:NKart.Core.Observation.MonitorForAttribute">
            <summary>
            Decorates notification monitors.
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.MonitorForAttribute.#ctor(System.String,System.Type,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Observation.MonitorForAttribute"/> class.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="observableTrigger">
            The observable trigger.
            </param>
            <param name="name">
            The name.
            </param>
            <param name="useCodeEditor">
            The use Code Editor.
            </param>
        </member>
        <member name="P:NKart.Core.Observation.MonitorForAttribute.ObservableTrigger">
            <summary>
            Gets the observable trigger
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.MonitorForAttribute.Key">
            <summary>
            Gets the mandatory key for the monitor
            </summary>        
        </member>
        <member name="P:NKart.Core.Observation.MonitorForAttribute.Name">
            <summary>
            Gets the name of the monitor
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.MonitorForAttribute.UseCodeEditor">
            <summary>
            Gets the route path.
            </summary>
        </member>
        <member name="T:NKart.Core.Observation.Unsubscriber`1">
            <summary>
            Utility class to dispose obversers
            </summary>
            <typeparam name="T">The type of the observer to be disposed</typeparam>
        </member>
        <member name="T:NKart.Core.Observation.IObservableTrigger`1">
            <summary>
            Marker interface for observable triggers
            </summary>
        </member>
        <member name="T:NKart.Core.Observation.TriggerResolver">
            <summary>
            Represents a TriggerResolver
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.TriggerResolver.CacheMapper(System.Type,NKart.Core.Observation.ITrigger)">
            <summary>
            Adds a key value pair to the dictionary
            </summary>        
            <param name="type">The trigger of the trigger</param>
            <param name="observableTrigger">The <see cref="T:NKart.Core.Observation.ITrigger"/> to cache</param>
        </member>
        <member name="M:NKart.Core.Observation.TriggerResolver.GetTriggersByArea(NKart.Core.Observation.Topic)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Observation.ITrigger"/> by the area defined in the attribute
            </summary>
            <param name="topic">The "area"</param>
            <returns>A <see cref="T:NKart.Core.Observation.ITrigger"/></returns>
        </member>
        <member name="M:NKart.Core.Observation.TriggerResolver.GetTriggersByAlias(System.String,NKart.Core.Observation.Topic)">
            <summary>
            Gets a collection <see cref="T:NKart.Core.Observation.ITrigger"/> from the resolver
            </summary>
            <returns>A <see cref="T:NKart.Core.Observation.ITrigger"/></returns>
        </member>
        <member name="M:NKart.Core.Observation.TriggerResolver.GetAllTriggers``1">
            <summary>
            Gets the collection of all resovled <see cref="T:NKart.Core.Observation.ITrigger"/>s of a particular type
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.TriggerResolver.GetAllTriggers">
            <summary>
            Gets the collection of all resovled <see cref="T:NKart.Core.Observation.ITrigger"/>s
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.TriggerResolver.GetTrigger``1">
            <summary>
            Gets a <see cref="T:NKart.Core.Observation.ITrigger"/> from the resolver
            </summary>
            <returns>A <see cref="T:NKart.Core.Observation.ITrigger"/></returns>
        </member>
        <member name="M:NKart.Core.Observation.TriggerResolver.GetTrigger(System.Type)">
            <summary>
            Gets a <see cref="T:NKart.Core.Observation.ITrigger"/> from the resolver
            </summary>
            <returns>A <see cref="T:NKart.Core.Observation.ITrigger"/></returns>
        </member>
        <member name="P:NKart.Core.Observation.TriggerResolver.Values">
            <summary>
            Gets the instantiated values of the resolved types
            </summary>
        </member>
        <member name="T:NKart.Core.Observation.ITriggerResolver">
            <summary>
            Defines a Trigger Resolver
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.ITriggerResolver.GetTriggersByArea(NKart.Core.Observation.Topic)">
            <summary>
            Gets a collection of <see cref="T:NKart.Core.Observation.ITrigger"/> by the area defined in the attribute
            </summary>
            <param name="topic">The "area"</param>
            <returns>A <see cref="T:NKart.Core.Observation.ITrigger"/></returns>
        </member>
        <member name="M:NKart.Core.Observation.ITriggerResolver.GetTriggersByAlias(System.String,NKart.Core.Observation.Topic)">
            <summary>
            Gets a collection <see cref="T:NKart.Core.Observation.ITrigger"/> from the resolver
            </summary>
            <returns>A <see cref="T:NKart.Core.Observation.ITrigger"/></returns>
            <remarks>
            
            By design there should only ever be one of these per alias, but someone might think
            of something we have'nt
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Observation.ITriggerResolver.GetAllTriggers``1">
            <summary>
            Gets the collection of all resovled <see cref="T:NKart.Core.Observation.ITrigger"/>s
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.ITriggerResolver.GetAllTriggers">
            <summary>
            Gets the collection of all resovled <see cref="T:NKart.Core.Observation.ITrigger"/>s
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.ITriggerResolver.GetTrigger``1">
            <summary>
            Gets a <see cref="T:NKart.Core.Observation.ITrigger"/> from the resolver
            </summary>
            <returns>A <see cref="T:NKart.Core.Observation.ITrigger"/></returns>
        </member>
        <member name="M:NKart.Core.Observation.ITriggerResolver.GetTrigger(System.Type)">
            <summary>
            Gets a <see cref="T:NKart.Core.Observation.ITrigger"/> from the resolver
            </summary>
            <returns>A <see cref="T:NKart.Core.Observation.ITrigger"/></returns>
        </member>
        <member name="T:NKart.Core.Observation.TriggerBase`1">
            <summary>
            Defines an <see cref="T:NKart.Core.Observation.TriggerBase`1"/> base class
            </summary>
            <typeparam name="T">The type of the model used by the trigger</typeparam>
        </member>
        <member name="F:NKart.Core.Observation.TriggerBase`1.Observers">
            <summary>
            Gets the collection of <see cref="T:System.IObserver`1"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.TriggerBase`1.HasMonitors">
            <summary>
            Gets a value indicating whether or not this trigger is being monitored
            </summary>
        </member>
        <member name="P:NKart.Core.Observation.TriggerBase`1.MonitorCount">
            <summary>
            Gets the number of monitor observing this trigger
            </summary>
        </member>
        <member name="M:NKart.Core.Observation.TriggerBase`1.Subscribe(System.IObserver{`0})">
            <summary>
            Subscribes an <see cref="T:System.IObserver`1"/>
            </summary>
            <param name="observer">The monitor</param>
            <returns>The disposable</returns>
        </member>
        <member name="M:NKart.Core.Observation.TriggerBase`1.WillWork``1(System.Object)">
            <summary>
            Returns true/false indicating whether or not the model passed "Will Work" for this trigger
            </summary>
            <param name="model">
            An object representing the model to be passed to the various Monitors
            </param>
            <typeparam name="TModel">The type of the input model</typeparam>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Observation.TriggerBase`1.GetUnsubscriber(System.IObserver{`0})">
            <summary>
            The get unsubscriber.
            </summary>
            <param name="observer">
            The observer.
            </param>
            <returns>
            The <see cref="T:System.IDisposable"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Observation.TriggerBase`1.NotifyMonitors(`0)">
            <summary>
            Notifiy all the monitors of the change
            </summary>
            <param name="monitorModel">The model/value to pass to each monitor</param>
        </member>
        <member name="T:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2">
            <summary>
            The base class for Merchello many-object resolvers.
            </summary>
            <typeparam name="TResolver">The type of the concrete resolver class.</typeparam>
            <typeparam name="TResolved">The type of the resolved objects.</typeparam>
            <remarks>
            Umbraco's internal Resolution class and other internal methods on the standard ManyObjectsResolverBase makes
            it difficult to test/control object resolution - so we went this route for the time being.
            </remarks>
        </member>
        <member name="F:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2._instanceTypes">
            <summary>
            The instance types.
            </summary>
        </member>
        <member name="F:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2._lock">
            <summary>
            The lock.
            </summary>
        </member>
        <member name="M:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2"/> class.
            </summary>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="P:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.InstanceTypes">
            <summary>
            Gets the list of types to create instances from.
            </summary>
        </member>
        <member name="P:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.Values">
            <summary>
            Gets the resolved object instances.
            </summary>
        </member>
        <member name="M:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.RemoveType(System.Type)">
            <summary>
            Removes a type.
            </summary>
            <param name="value">The type to remove.</param>
            <exception cref="T:System.InvalidOperationException">the resolver does not support removing types, or 
            the type is not a valid type for the resolver.</exception>
        </member>
        <member name="M:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.RemoveType``1">
            <summary>
            Removes a type.
            </summary>
            <typeparam name="T">The type to remove.</typeparam>
            <exception cref="T:System.InvalidOperationException">the resolver does not support removing types, or 
            the type is not a valid type for the resolver.</exception>
        </member>
        <member name="M:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.AddType(System.Type)">
            <summary>
            Adds a type.
            </summary>
            <param name="value">The type to add.</param>
            <remarks>The type is appended at the end of the list.</remarks>
            <exception cref="T:System.InvalidOperationException">the resolver does not support adding types, or 
            the type is not a valid type for the resolver, or the type is already in the collection of types.</exception>
        </member>
        <member name="M:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.AddType``1">
            <summary>
            Adds a type.
            </summary>
            <typeparam name="T">The type to add.</typeparam>
            <remarks>The type is appended at the end of the list.</remarks>
            <exception cref="T:System.InvalidOperationException">the resolver does not support adding types, or 
            the type is not a valid type for the resolver, or the type is already in the collection of types.</exception>
        </member>
        <member name="M:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.CreateInstances(System.Object[])">
            <summary>
            Creates the object instances for the types contained in the types collection.
            </summary>
            <param name="ctrArgs">
            The constructor args.
            </param>
            <returns>
            A list of objects of type <typeparamref name="TResolved"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates a single instance of TResolved
            </summary>
            <param name="type">
            The type.
            </param>
            <param name="ctrArgs">
            The constructor args.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.GetWriteLock">
            <summary>
            Returns a WriteLock to use when modifying collections
            </summary>
            <returns>Gets the write lock</returns>
        </member>
        <member name="M:NKart.Core.ObjectResolution.MerchelloManyObjectsResolverBase`2.AddTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Adds types.
            </summary>
            <param name="types">The types to add.</param>
            <remarks>The types are appended at the end of the list.</remarks>
            <exception cref="T:System.InvalidOperationException">the resolver does not support adding types, or 
            a type is not a valid type for the resolver, or a type is already in the collection of types.</exception>
        </member>
        <member name="T:NKart.Core.PathHelper">
            <summary>
            The path helper.
            </summary>
        </member>
        <member name="M:NKart.Core.PathHelper.SafeEncodeUrlSegments(System.String)">
            <summary>
            Encodes url segments.
            </summary>
            <param name="urlPath">
            The url path.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
            <seealso cref="!:https://github.com/Shandem/Articulate/blob/master/Articulate/StringExtensions.cs"/>
        </member>
        <member name="M:NKart.Core.PathHelper.ConvertToSlug(System.String)">
            <summary>
            The convert to slug.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.PathHelper.GetSearchableUrl(System.String)">
            <summary>
            The get searchable url.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.PathHelper.RemoveSpecialCharacters(System.String)">
            <summary>
            The remove special characters.
            </summary>
            <param name="input">
            The input.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.PathHelper.RemoveCharFromString(System.String,System.Char)">
            <summary>
            Remove charactor from a string
            </summary>
            <param name="input"></param>
            <param name="charItem"></param>
            <returns></returns>
        </member>
        <member name="T:NKart.Core.FormattingExtensions">
            <summary>
            The price extensions.
            </summary>
        </member>
        <member name="M:NKart.Core.FormattingExtensions.FormatAsStoreDate(System.DateTime)">
            <summary>
            The format as store date.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The store formatted date string.
            </returns>
        </member>
        <member name="M:NKart.Core.FormattingExtensions.FormatAsStoreDate(System.DateTime,NKart.Core.IMerchelloContext)">
            <summary>
            The format as store date.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <returns>
            The store formatted date string.
            </returns>
        </member>
        <member name="M:NKart.Core.FormattingExtensions.FormatAsPrice(System.Decimal,System.String)">
            <summary>
            Formats a price with a currency symbol.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="currencySymbol">
            The currency symbol.
            </param>
            <returns>
            The formatted price.
            </returns>
        </member>
        <member name="T:NKart.Core.Sales.SalePreparationBase">
            <summary>
            Represents an abstract SalesPreparation class responsible for temporarily persisting invoice and order information
            while it's being collected
            </summary>
        </member>
        <member name="F:NKart.Core.Sales.SalePreparationBase._itemCache">
            <summary>
            The item cache.
            </summary>
        </member>
        <member name="F:NKart.Core.Sales.SalePreparationBase._customer">
            <summary>
            The customer.
            </summary>
        </member>
        <member name="F:NKart.Core.Sales.SalePreparationBase._merchelloContext">
            <summary>
            The merchello context.
            </summary>
        </member>
        <member name="F:NKart.Core.Sales.SalePreparationBase._shippingTaxable">
            <summary>
            A value indicating whether or not shipping charges are taxable.
            </summary>
            <remarks>
            Determined by the global back office setting.
            </remarks>
        </member>
        <member name="F:NKart.Core.Sales.SalePreparationBase._offerCodeTempData">
            <summary>
            The offer code temp data.
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.#ctor(NKart.Core.IMerchelloContext,NKart.Core.Models.IItemCache,NKart.Core.Models.ICustomerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.Sales.SalePreparationBase"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
            <param name="itemCache">
            The item cache.
            </param>
            <param name="customer">
            The customer.
            </param>
        </member>
        <member name="E:NKart.Core.Sales.SalePreparationBase.InvoicePrepared">
            <summary>
            Occurs after an invoice has been prepared.
            </summary>
        </member>
        <member name="E:NKart.Core.Sales.SalePreparationBase.Finalizing">
            <summary>
            Occurs after a sale has been finalized.
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.RaiseCustomerEvents">
            <summary>
            Gets or sets a value indicating whether raise customer events.
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.Customer">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.ICustomerBase"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.MerchelloContext">
            <summary>
            Gets the <see cref="T:NKart.Core.IMerchelloContext"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.ItemCache">
            <summary>
            Gets the <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.ApplyTaxesToInvoice">
            <summary>
            Gets or sets a value indicating whether to apply taxes to invoice.
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.InvoiceNumberPrefix">
            <summary>
            Gets or sets a prefix to be prepended to an invoice number.
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.OfferCodes">
            <summary>
            Gets the offer codes.
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.RuntimeCache">
            <summary>
            Gets the <see cref="T:Umbraco.Core.Cache.IRuntimeCacheProvider"/>
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.Reset">
            <summary>
            Purges sales manager information
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.SaveBillToAddress(NKart.Core.Models.IAddress)">
            <summary>
            Saves the bill to address
            </summary>
            <param name="billToAddress">The billing <see cref="T:NKart.Core.Models.IAddress"/></param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.SaveShipToAddress(NKart.Core.Models.IAddress)">
            <summary>
            Saves the ship to address
            </summary>
            <param name="shipToAddress">The shipping <see cref="T:NKart.Core.Models.IAddress"/></param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.GetBillToAddress">
            <summary>
            Gets the bill to address
            </summary>
            <returns>Return the billing <see cref="T:NKart.Core.Models.IAddress"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.GetShipToAddress">
            <summary>
            Gets the bill to address
            </summary>
            <returns>Return the billing <see cref="T:NKart.Core.Models.IAddress"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.SaveShipmentRateQuote(NKart.Core.Gateways.Shipping.IShipmentRateQuote)">
            <summary>
            Saves a <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> as a shipment line item
            </summary>
            <param name="approvedShipmentRateQuote">
            The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> to be saved
            </param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.SaveShipmentRateQuote(System.Collections.Generic.IEnumerable{NKart.Core.Gateways.Shipping.IShipmentRateQuote})">
            <summary>
            Saves a collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s as shipment line items
            </summary>
            <param name="approvedShipmentRateQuotes">
            The collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s to be saved
            </param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.ClearShipmentRateQuotes">
            <summary>
            Clears all <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s previously saved
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.SavePaymentMethod(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.IPaymentMethod"/> to <see cref="T:NKart.Core.Models.ICustomerBase"/> extended data
            </summary>
            <param name="paymentMethod">
            The payment Method.
            </param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.GetPaymentMethod">
            <summary>
            Gets a <see cref="T:NKart.Core.Models.IPaymentMethod"/> from <see cref="T:NKart.Core.Models.ICustomerBase"/> extended data
            </summary>
            <returns>
            The previously saved <see cref="T:NKart.Core.Models.IPaymentMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.IsReadyToInvoice">
            <summary>
            True/false indicating whether or not the <see cref="T:NKart.Core.Sales.ISalePreparationBase"/> is ready to prepare an <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AddItem(NKart.Core.Models.ILineItem)">
            <summary>
            Adds a <see cref="T:NKart.Core.Models.ILineItem"/> to the collection of items
            </summary>
            <param name="lineItem">
            The line item.
            </param>
            <remarks>
            Intended for custom line item types
            http://issues.merchello.com/youtrack/issue/M-381
            </remarks>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.RemoveItem(NKart.Core.Models.ILineItem)">
            <summary>
            Removes a line item for the collection of items
            </summary>
            <param name="lineItem">
            The line item.
            </param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.PrepareInvoice">
            <summary>
            Generates an <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <returns>An <see cref="T:NKart.Core.Models.IInvoice"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.PrepareInvoice(NKart.Core.Builders.IBuilderChain{NKart.Core.Models.IInvoice})">
            <summary>
            Generates an <see cref="T:NKart.Core.Models.IInvoice"/> representing the bill for the current "checkout order"
            </summary>
            <param name="invoiceBuilder">The invoice builder class</param>
            <returns>An <see cref="T:NKart.Core.Models.IInvoice"/> that is not persisted to the database.</returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.GetPaymentGatewayMethods">
            <summary>
            Gets a list of all possible Payment Methods
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>s</returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AuthorizePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AuthorizePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AuthorizePayment(System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AuthorizePayment(System.Guid)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AuthorizeCapturePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AuthorizeCapturePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AuthorizeCapturePayment(System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AuthorizeCapturePayment(System.Guid)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.RemoveOfferCode(System.String)">
            <summary>
            Removes an offer code from the OfferCodes collection.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.ClearOfferCodes">
            <summary>
            Clears the offer codes collection.
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.TryApplyOffer``2(``0,System.String)">
            <summary>
            Attempts to apply an offer to the the checkout.
            </summary>
            <param name="validateAgainst">
            The object to validate against
            </param>
            <param name="offerCode">
            The offer code.
            </param>
            <typeparam name="TConstraint">
            The type of constraint
            </typeparam>
            <typeparam name="TAward">
            The type of award
            </typeparam>
            <returns>
            The <see cref="T:Umbraco.Core.Attempt"/>.
            </returns>
            <remarks>
            Custom offer types
            </remarks>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.Reset(NKart.Core.IMerchelloContext,System.Guid)">
            <summary>
            Purges sales manager information
            </summary>
            <param name="merchelloContext">
            The merchello Context.
            </param>
            <param name="entityKey">
            The entity Key.
            </param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.CloneItemCache">
            <summary>
            Gets a clone of the ItemCache
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.CloneItemCache(NKart.Core.Models.ILineItemContainer)">
            <summary>
            Clones a <see cref="T:NKart.Core.Models.ILineItemContainer"/> as <see cref="T:NKart.Core.Models.IItemCache"/>
            </summary>
            <param name="container">
            The container.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.CreateNewLineContainer(System.Collections.Generic.IEnumerable{NKart.Core.Models.ILineItem})">
            <summary>
            Creates a new <see cref="T:NKart.Core.Models.ILineItemContainer"/> with filtered items.
            </summary>
            <param name="filteredItems">
            The line items.
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.ILineItemContainer"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.GetItemCache(NKart.Core.IMerchelloContext,NKart.Core.Models.ICustomerBase,System.Guid)">
            <summary>
            Gets the checkout <see cref="T:NKart.Core.Models.IItemCache"/> for the <see cref="T:NKart.Core.Models.ICustomerBase"/>
            </summary>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>
            </param>
            <param name="customer">
            The customer associated with the checkout
            </param>
            <param name="versionKey">
            The version key for this <see cref="T:NKart.Core.Sales.SalePreparationBase"/>
            </param>
            <returns>
            The <see cref="T:NKart.Core.Models.IItemCache"/> associated with the customer checkout
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.SaveCustomer(NKart.Core.IMerchelloContext,NKart.Core.Models.ICustomerBase,System.Boolean)">
            <summary>
            Saves the current customer
            </summary>
            <param name="merchelloContext">
            The merchello Context.
            </param>
            <param name="customer">
            The customer.
            </param>
            <param name="raiseEvents">
            The raise Events.
            </param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.MakeCacheKey">
            <summary>
            Makes the 'unique' RuntimeCache Key for the RuntimeCache
            </summary>
            <returns>
            The <see cref="T:System.String"/> cache key
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.SaveOfferCode(System.String)">
            <summary>
            Saves offer code.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.Reset(NKart.Core.IMerchelloContext,NKart.Core.Models.ICustomerBase,System.Boolean)">
            <summary>
            Purges persisted checkout information
            </summary>
            <param name="merchelloContext">
            The merchello Context.
            </param>
            <param name="customer">
            The customer.
            </param>
            <param name="raiseEvents">
            The raise Events.
            </param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.MakeCacheKey(NKart.Core.Models.ICustomerBase,System.Guid)">
            <summary>
            Generates a unique cache key for runtime caching of the <see cref="T:NKart.Core.Sales.SalePreparationBase"/>
            </summary>
            <param name="customer">The <see cref="T:NKart.Core.Models.ICustomerBase"/> for which to generate the cache key</param>
            <param name="versionKey">The version key</param>
            <returns>The unique CacheKey string</returns>
            <remarks>
            
            CacheKey is assumed to be unique per customer and globally for CheckoutBase.  Therefore this will NOT be unique if 
            to different checkouts are happening for the same customer at the same time - we consider that an extreme edge case.
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.SaveOfferCodes">
            <summary>
            Saves the offer codes.
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.BuildOfferCodeList">
            <summary>
            Handles the instantiation of offer code queue.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.Queue`1"/> offer codes.
            </returns>
        </member>
        <member name="T:NKart.Core.Sales.SalePreparationBase.OfferCodeTempData">
            <summary>
            Class that gets serialized to customer's ExtendedDataCollection to save offer code queue data.
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.OfferCodeTempData.VersionKey">
            <summary>
            Gets or sets the version key to validate offer codes are validate with this preparation
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.SalePreparationBase.OfferCodeTempData.OfferCodes">
            <summary>
            Gets or sets the offer codes.
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.AddShipmentRateQuoteLineItem(NKart.Core.Gateways.Shipping.IShipmentRateQuote)">
            <summary>
            Maps the <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> to a <see cref="T:NKart.Core.Models.ILineItem"/> 
            </summary>
            <param name="shipmentRateQuote">The <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> to be added as a <see cref="T:NKart.Core.Models.ILineItem"/></param>
        </member>
        <member name="M:NKart.Core.Sales.SalePreparationBase.Initialize">
            <summary>
            Class initialization.
            </summary>
        </member>
        <member name="T:NKart.Core.Sales.ISalePreparationBase">
            <summary>
            Defines a sales preparation base class
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.ISalePreparationBase.ItemCache">
            <summary>
            Gets the item cache.
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.ISalePreparationBase.ApplyTaxesToInvoice">
            <summary>
            Gets or sets a value indicating whether to apply taxes to invoice.
            </summary>
        </member>
        <member name="P:NKart.Core.Sales.ISalePreparationBase.RaiseCustomerEvents">
            <summary>
            Gets or sets a value indicating whether raise customer events when saving customer data.
            </summary>
            <remarks>
            During certain checkout workflows, customer save events can fire often that can cause performance
            problems if there are a lot of event handlers handling the CustomerService.Save events.  This
            allows for a toggling the events on and off
            </remarks>
        </member>
        <member name="P:NKart.Core.Sales.ISalePreparationBase.InvoiceNumberPrefix">
            <summary>
            Gets or sets a prefix to be prepended to an invoice number.
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.Reset">
            <summary>
            Restarts the checkout process, deleting all persisted data
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.SaveBillToAddress(NKart.Core.Models.IAddress)">
            <summary>
            Saves the bill to address
            </summary>
            <param name="billToAddress">The billing <see cref="T:NKart.Core.Models.IAddress"/></param>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.SaveShipToAddress(NKart.Core.Models.IAddress)">
            <summary>
            Saves the ship to address
            </summary>
            <param name="shipToAddress">The shipping <see cref="T:NKart.Core.Models.IAddress"/></param>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.GetBillToAddress">
            <summary>
            Gets the bill to address
            </summary>
            <returns>Return the billing <see cref="T:NKart.Core.Models.IAddress"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.GetShipToAddress">
            <summary>
            Gets the ship to address
            </summary>
            <remarks>Returns the shipping <see cref="T:NKart.Core.Models.IAddress"/></remarks>
            <returns>A shipping <see cref="T:NKart.Core.Models.IAddress"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.SaveShipmentRateQuote(NKart.Core.Gateways.Shipping.IShipmentRateQuote)">
            <summary>
            Saves a single <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>
            </summary>
            <param name="approvedShipmentRateQuote">The selected <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> to be used when invoicing the order</param>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.SaveShipmentRateQuote(System.Collections.Generic.IEnumerable{NKart.Core.Gateways.Shipping.IShipmentRateQuote})">
            <summary>
            Saves a collection <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>
            </summary>
            <param name="approvedShipmentRateQuotes">
            A collection of <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/> to be saved
            </param>
            <remarks>
            
            This will be useful when multiple shipments are exposed
            
            </remarks>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.ClearShipmentRateQuotes">
            <summary>
            Clears all <see cref="T:NKart.Core.Gateways.Shipping.IShipmentRateQuote"/>s previously saved
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.SavePaymentMethod(NKart.Core.Models.IPaymentMethod)">
            <summary>
            Saves a <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <param name="paymentMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> to be saved</param>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.GetPaymentMethod">
            <summary>
            Gets the previously saved <see cref="T:NKart.Core.Models.IPaymentMethod"/>
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Models.IPaymentMethod"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.PrepareInvoice">
            <summary>
            Prepares an <see cref="T:NKart.Core.Models.IInvoice"/> representing the bill for the current "sale"
            </summary>
            <returns>An <see cref="T:NKart.Core.Models.IInvoice"/> that is not persisted to the database.</returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.PrepareInvoice(NKart.Core.Builders.IBuilderChain{NKart.Core.Models.IInvoice})">
            <summary>
            Generates an <see cref="T:NKart.Core.Models.IInvoice"/> representing the bill for the current "sale"
            </summary>
            <param name="invoiceBuilder">The invoice builder class</param>
            <returns>An <see cref="T:NKart.Core.Models.IInvoice"/> that is not persisted to the database.</returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.GetPaymentGatewayMethods">
            <summary>
            Gets a list of all possible Payment Methods
            </summary>
            <returns>A collection of <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/>s</returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.AuthorizePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to authorize a payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.AuthorizePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Gateways.Payment.IPaymentGatewayMethod"/> to use in processing the payment</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.AuthorizePayment(System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.AuthorizePayment(System.Guid)">
            <summary>
            Attempts to process a payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.AuthorizeCapturePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <param name="args">Additional arguments required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.AuthorizeCapturePayment(NKart.Core.Gateways.Payment.IPaymentGatewayMethod)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentGatewayMethod">The <see cref="T:NKart.Core.Models.IPaymentMethod"/></param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.AuthorizeCapturePayment(System.Guid,NKart.Core.Gateways.Payment.ProcessorArgumentCollection)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <param name="args">Additional arguements required by the payment processor</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.AuthorizeCapturePayment(System.Guid)">
            <summary>
            Authorizes and Captures a Payment
            </summary>
            <param name="paymentMethodKey">The <see cref="T:NKart.Core.Models.IPaymentMethod"/> key</param>
            <returns>A <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/></returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.IsReadyToInvoice">
            <summary>
            True/false indicating whether or not the <see cref="T:NKart.Core.Sales.ISalePreparationBase"/> is ready to prepare an <see cref="T:NKart.Core.Models.IInvoice"/>
            </summary>
            <returns>
            True or false indicating whether or not an invoice can be created
            </returns>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.AddItem(NKart.Core.Models.ILineItem)">
            <summary>
            Adds a <see cref="T:NKart.Core.Models.ILineItem"/> to the collection of items
            </summary>
            <param name="lineItem">
            The line item.
            </param>
            <remarks>
            Intended for custom line item types
            http://issues.merchello.com/youtrack/issue/M-381
            </remarks>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.RemoveItem(NKart.Core.Models.ILineItem)">
            <summary>
            Removes a line item for the collection of items
            </summary>
            <param name="lineItem">
            The line item.
            </param>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.RemoveOfferCode(System.String)">
            <summary>
            Removes an offer code from the OfferCodes collection.
            </summary>
            <param name="offerCode">
            The offer code.
            </param>
        </member>
        <member name="M:NKart.Core.Sales.ISalePreparationBase.ClearOfferCodes">
            <summary>
            Clears the offer codes collection.
            </summary>
        </member>
        <member name="T:NKart.Core.Sales.SalesPreparationEvents">
            <summary>
            Handles sales preparation events.
            </summary>
        </member>
        <member name="M:NKart.Core.Sales.SalesPreparationEvents.ApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
            The Umbraco application started event.
            </summary>
            <param name="umbracoApplication">
            The Umbraco application.
            </param>
            <param name="applicationContext">
            The Umbraco application context.
            </param>
        </member>
        <member name="M:NKart.Core.Sales.SalesPreparationEvents.SalePreparationBaseOnFinalizing(NKart.Core.Sales.SalePreparationBase,NKart.Core.Events.SalesPreparationEventArgs{NKart.Core.Gateways.Payment.IPaymentResult})">
            <summary>
            Handles the <see cref="T:NKart.Core.Sales.SalePreparationBase"/> finalizing event
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="args">
            The <see cref="T:NKart.Core.Gateways.Payment.IPaymentResult"/>
            </param>
        </member>
        <member name="T:NKart.Core.CloneHelper">
            <summary>
            Helper methods for cloning objects
            </summary>
        </member>
        <member name="M:NKart.Core.CloneHelper.DeepClone``1(``0)">
            <summary>
            Deep clone of an object
            </summary>
            <typeparam name="T">
            The type T of the object passed and returned
            </typeparam>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The a deep clone of object <see cref="!:T"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.BootManagerBase.OnMerchelloStarting(System.Object,System.EventArgs)">
            <summary>
            Developers can override this method to modify objects on startup
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments
            </param>
        </member>
        <member name="M:NKart.Core.BootManagerBase.OnMerchelloStarted(System.Object,System.EventArgs)">
            <summary>
            Developers can override this method to modify objects once the application has been started
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments
            </param>
        </member>
        <member name="M:NKart.Core.BootManagerBase.OnMerchelloInit">
            <summary>
            Called to raise the MerchelloInit event
            </summary>        
        </member>
        <member name="T:NKart.Core.IMerchelloContext">
            <summary>
            Defines the MerchelloContext
            </summary>
        </member>
        <member name="P:NKart.Core.IMerchelloContext.Cache">
            <summary>
            Gets the Umbraco <see cref="T:Umbraco.Core.CacheHelper"/>
            </summary>
        </member>
        <member name="P:NKart.Core.IMerchelloContext.Services">
            <summary>
            Gets the Merchello <see cref="T:NKart.Core.Services.IServiceContext"/>
            </summary>
        </member>
        <member name="P:NKart.Core.IMerchelloContext.Gateways">
            <summary>
            Gets the <see cref="T:NKart.Core.Gateways.IGatewayContext"/>
            </summary>
        </member>
        <member name="P:NKart.Core.IMerchelloContext.IsConfigured">
            <summary>
            Gets a value indicating whether or not the Merchello needs to be upgraded
            </summary>
            <remarks>
            Compares the binary version to that listed in the Merchello configuration to determine if the 
            package was upgraded
            </remarks>
        </member>
        <member name="T:NKart.Core.MerchelloBootstrapper">
            <summary>
            The merchello bootstrapper.
            </summary>
        </member>
        <member name="M:NKart.Core.MerchelloBootstrapper.Init(NKart.Core.BootManagerBase,Umbraco.Core.ApplicationContext)">
            <summary>
            The init.
            </summary>
            <param name="bootManager">
            The boot manager.
            </param>
            <param name="applicationContext"></param>
        </member>
        <member name="T:NKart.Core.CoreBootManager">
            <summary>
            Application boot strap for the Merchello Plugin which initializes all objects to be used in the Merchello Core
            </summary>
            <remarks>
            We needed our own boot strap to setup Merchello specific singletons
            </remarks>
        </member>
        <member name="F:NKart.Core.CoreBootManager._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:NKart.Core.CoreBootManager._sqlSyntaxProvider">
            <summary>
            The _sql syntax provider.
            </summary>
        </member>
        <member name="F:NKart.Core.CoreBootManager._timer">
            <summary>
            The timer.
            </summary>
        </member>
        <member name="F:NKart.Core.CoreBootManager._isComplete">
            <summary>
            The is complete.
            </summary>
        </member>
        <member name="F:NKart.Core.CoreBootManager._merchelloContext">
            <summary>
            The merchello context.
            </summary>
        </member>
        <member name="F:NKart.Core.CoreBootManager._unitOfWorkProvider">
            <summary>
            The peta poco unit of work provider.
            </summary>
        </member>
        <member name="M:NKart.Core.CoreBootManager.#ctor(Umbraco.Core.Logging.ILogger,Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.CoreBootManager"/> class.
            </summary>
            <param name="logger">
            The logger.
            </param>
            <param name="sqlSyntaxProvider">
            The <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/>.
            </param>
        </member>
        <member name="P:NKart.Core.CoreBootManager.IsStarted">
            <summary>
            Gets a value indicating whether Merchello is started.
            </summary>
        </member>
        <member name="P:NKart.Core.CoreBootManager.IsInitialized">
            <summary>
            Gets a value indicating whether Merchello is initialized.
            </summary>
        </member>
        <member name="P:NKart.Core.CoreBootManager.IsUnitTest">
            <summary>
            Gets or sets a value indicating whether or not this is a unit test
            </summary>
        </member>
        <member name="P:NKart.Core.CoreBootManager.Logger">
            <summary>
            Gets the logger.
            </summary>
        </member>
        <member name="P:NKart.Core.CoreBootManager.SqlSyntax">
            <summary>
            Gets the sql syntax.
            </summary>
        </member>
        <member name="M:NKart.Core.CoreBootManager.Initialize(Umbraco.Core.ApplicationContext)">
            <summary>
            The initialize.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.IBootManager"/>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Throws an exception if Merchello is already initialized
            </exception>
        </member>
        <member name="M:NKart.Core.CoreBootManager.Startup(System.Action{NKart.Core.MerchelloContext})">
            <summary>
            Fires after initialization and calls the callback to allow for customizations to occur
            </summary>
            <param name="afterStartup">
            The action to call after startup
            </param>
            <returns>
            The <see cref="T:NKart.Core.IBootManager"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.CoreBootManager.Complete(System.Action{NKart.Core.MerchelloContext})">
            <summary>
            Fires after startup and calls the callback once customizations are locked
            </summary>
            <param name="afterComplete">
            The after Complete.
            </param>
            <returns>
            The <see cref="T:NKart.Core.IBootManager"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.CoreBootManager.FinalizeBoot(Umbraco.Core.ApplicationContext)">
            <summary>
            Initializes resolvers that require accessing resolvers after resolution has been frozen.
            </summary>
            <remarks>
            Hack fix for M-1254.  Issue arose in Umbraco 7.5.6 when Umbraco Core bumped Resolution.Freeze (Resolution is an Umbraco singleton
            used by certain resolver base classes - Umbraco ResolutionBase) 
            </remarks>
        </member>
        <member name="M:NKart.Core.CoreBootManager.InitializeValueConverters(Umbraco.Core.ApplicationContext)">
            <summary>
            Initializes value converters.
            </summary>
        </member>
        <member name="M:NKart.Core.CoreBootManager.InitializeObserverSubscriptions">
            <summary>
            Responsible initializing observer subscriptions.
            </summary>
        </member>
        <member name="M:NKart.Core.CoreBootManager.CreateMerchelloContext(NKart.Core.Services.ServiceContext,Umbraco.Core.CacheHelper)">
            <summary>
            Creates the MerchelloPluginContext (singleton)
            </summary>
            <param name="serviceContext">The service context</param>
            <param name="cache">The cache helper</param>
            <remarks>
            Since we load fire our boot manager after Umbraco fires its "started" even, Merchello gets the benefit
            of allowing Umbraco to manage the various caching providers via the Umbraco CoreBootManager or WebBootManager
            depending on the context.
            </remarks>
        </member>
        <member name="M:NKart.Core.CoreBootManager.InitialCurrencyContext(NKart.Core.Services.IStoreSettingService)">
            <summary>
            Initializes the <see cref="T:NKart.Core.CurrencyContext"/>.
            </summary>
            <param name="storeSettingService">
            The store setting service.
            </param>
        </member>
        <member name="M:NKart.Core.CoreBootManager.InitializeLoggerResolver(NKart.Core.Logging.IMultiLogger)">
            <summary>
            Initializes the logger resolver.
            </summary>
            <param name="logger">
            The logger.
            </param>
        </member>
        <member name="M:NKart.Core.CoreBootManager.GetMultiLogger">
            <summary>
            Gets the <see cref="T:NKart.Core.Logging.MultiLogger"/>.
            </summary>
            <returns>
            The <see cref="T:NKart.Core.Logging.IMultiLogger"/>.
            </returns>
            <remarks>
            We need to do this outside of the resolver due to internal resolution "Freeze"
            </remarks>
        </member>
        <member name="M:NKart.Core.CoreBootManager.InitializeResolvers">
            <summary>
            Responsible for initializing resolvers.
            </summary>
        </member>
        <member name="M:NKart.Core.CoreBootManager.GetDatabase">
            <summary>
            Gets the database.
            </summary>
            <returns>
            The <see cref="T:Umbraco.Core.Persistence.Database"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.CoreBootManager.InitializeGatewayResolver(NKart.Core.Services.IServiceContext,Umbraco.Core.CacheHelper)">
            <summary>
            Responsible for the special case initialization of the gateway resolver.
            </summary>
            <param name="serviceContext">
            The service context.
            </param>
            <param name="cache">
            The cache.
            </param>
            <remarks>
            This is a special case due to the fact we need this singleton instantiated prior to 
            building the <see cref="T:NKart.Core.MerchelloContext"/>
            </remarks>
        </member>
        <member name="M:NKart.Core.CoreBootManager.InitializeEntityCollectionProviderResolver(NKart.Core.IMerchelloContext)">
            <summary>
            The initialize entity collection provider resolver.
            </summary>
            <param name="merchelloContext">
            The <see cref="T:NKart.Core.IMerchelloContext"/>.
            </param>
        </member>
        <member name="M:NKart.Core.CoreBootManager.SetUnitOfWorkProvider">
            <summary>
            Sets up unit of work provider.
            </summary>
        </member>
        <member name="T:NKart.Core.IBootManager">
            <summary>
            The BootManager interface.
            </summary>
        </member>
        <member name="M:NKart.Core.IBootManager.Initialize(Umbraco.Core.ApplicationContext)">
            <summary>
            Fires first in the Merchello application startup process before any customizations can occur
            </summary>
            <returns>
            The <see cref="T:NKart.Core.IBootManager"/>
            </returns>
        </member>
        <member name="M:NKart.Core.IBootManager.Startup(System.Action{NKart.Core.MerchelloContext})">
            <summary>
            Fires after initialization and calls the callback to allow for customizations to occur
            </summary>
            <param name="afterStartup">
            The after startup action
            </param>
            <returns>
            The <see cref="T:NKart.Core.IBootManager"/>
            </returns>
        </member>
        <member name="M:NKart.Core.IBootManager.Complete(System.Action{NKart.Core.MerchelloContext})">
            <summary>
            Fires after startup and calls the callback once customizations are locked
            </summary>
            <param name="afterComplete">
            The after complete action
            </param>
            <returns>
            The <see cref="T:NKart.Core.IBootManager"/>
            </returns>
        </member>
        <member name="T:NKart.Core.MerchelloContext">
            <summary>
            The MerchelloContext singleton
            </summary>
        </member>
        <member name="F:NKart.Core.MerchelloContext._disposalLocker">
            <summary>
            A disposal thread locker.
            </summary>
        </member>
        <member name="F:NKart.Core.MerchelloContext._services">
            <summary>
            The <see cref="T:NKart.Core.Services.IServiceContext"/>
            </summary>
        </member>
        <member name="F:NKart.Core.MerchelloContext._gateways">
            <summary>
            The <see cref="T:NKart.Core.Gateways.IGatewayContext"/>
            </summary>
        </member>
        <member name="F:NKart.Core.MerchelloContext._disposed">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:NKart.Core.MerchelloContext.#ctor(NKart.Core.Services.IServiceContext,NKart.Core.Gateways.IGatewayContext,Umbraco.Core.CacheHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.MerchelloContext"/> class.
            </summary>
            <param name="serviceContext">
            The service context.
            </param>
            <param name="gatewayContext">
            The gateway context.
            </param>
            <param name="cache">
            The cache.
            </param>
        </member>
        <member name="M:NKart.Core.MerchelloContext.#ctor(Umbraco.Core.CacheHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.MerchelloContext"/> class. 
            Creates a basic basic context
            </summary>
            <param name="cache">
            The <see cref="T:Umbraco.Core.CacheHelper"/>
            </param>
            <remarks>
            Used for testing
            </remarks>
        </member>
        <member name="P:NKart.Core.MerchelloContext.Current">
            <summary>
            Gets the singleton accessor
            </summary>
        </member>
        <member name="P:NKart.Core.MerchelloContext.HasCurrent">
            <summary>
            Gets a value indicating whether has current.
            </summary>
        </member>
        <member name="P:NKart.Core.MerchelloContext.Services">
            <summary>
            Gets the current ServiceContext
            </summary>
            <remarks>
            Internal set is generally only used for unit tests
            </remarks>
        </member>
        <member name="P:NKart.Core.MerchelloContext.Gateways">
            <summary>
            Gets the current GatewayContext
            </summary>
        </member>
        <member name="P:NKart.Core.MerchelloContext.Cache">
            <summary>
            Gets the application wide cache accessor
            </summary>
            <remarks>
            This is generally a short cut to the ApplicationContext.ApplicationCache
            </remarks>
        </member>
        <member name="P:NKart.Core.MerchelloContext.IsConfigured">
            <summary>
            Gets a value indicating whether or not the Merchello needs to be upgraded
            </summary>
            <remarks>
            Compares the binary version to that listed in the Merchello configuration to determine if the 
            package was upgraded
            </remarks>
        </member>
        <member name="P:NKart.Core.MerchelloContext.ConfigurationVersion">
            <summary>
            Gets the configuration version.
            </summary>
        </member>
        <member name="M:NKart.Core.MerchelloContext.Dispose">
            <summary>
            This will dispose and reset all resources used to run the Merchello
            </summary>
        </member>
        <member name="T:NKart.Core.RateAdjustmentType">
            <summary>
            Defines whether a rate adjustment should be a fixed numeric adjustment or calculated as a percentage
            </summary>
            <remarks>
            TODO this should be moved out of the Core namespace
            </remarks>
        </member>
        <member name="F:NKart.Core.RateAdjustmentType.Numeric">
            <summary>
            Represents a numeric rate adjustment
            </summary>
        </member>
        <member name="F:NKart.Core.RateAdjustmentType.Percentage">
            <summary>
            Represents a percentage rate adjustment
            </summary>
        </member>
        <member name="T:NKart.Core.SerializationHelper">
            <summary>
            Utility class to help in entity serialization
            </summary>
        </member>
        <member name="M:NKart.Core.SerializationHelper.SerializeToXml``1(``0)">
            <summary>
            Helper method to Serialize Xml using the DataContractSerializer
            </summary>
            <typeparam name="T">
            The type of the entity to serialize
            </typeparam>
            <param name="entity">
            The entity.
            </param>
            <returns>
            An Xml string
            </returns>
        </member>
        <member name="M:NKart.Core.SerializationHelper.DeserializeXml``1(System.String)">
            <summary>
            Helper method to Deserialize Xml using the DataContractSerializer
            </summary>
            <typeparam name="T">The type of entity to be deserialized</typeparam>
            <param name="xml">The xml string that represents the entity</param>
            <returns>
            An <see cref="T:Umbraco.Core.Attempt`1"/>.  A successful attempt with have an instantiated object T
            </returns>
        </member>
        <member name="M:NKart.Core.SerializationHelper.Deserialize``1(System.String)">
            <summary>
            Deserialize a string of XML to the specified object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toDeserialize"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.SerializationHelper.Serialize``1(``0)">
            <summary>
            Serialze object to Xml
            </summary>
            <typeparam name="T"></typeparam>
            <param name="toSerialize"></param>
            <returns></returns>
        </member>
        <member name="T:NKart.Core.StringExtensions">
            <summary>
            The string extensions.
            </summary>
        </member>
        <member name="M:NKart.Core.StringExtensions.EnsureForwardSlashes(System.String)">
            <summary>
            Replaces \ with / in a path.
            </summary>
            <param name="value">
            The value to replace backslashes.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.StringExtensions.EnsureBackSlashes(System.String)">
            <summary>
            Replaces \ with / in a path.
            </summary>
            <param name="value">
            The value to replace forward slashes.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.StringExtensions.EnsureStartsAndEndsWith(System.String,System.Char,System.Boolean)">
            <summary>
            Ensures a string both starts and ends with a character.
            </summary>
            <param name="input">
            The input string.
            </param>
            <param name="value">
            The char value to assert
            </param>
            <param name="removeTrailingSlash"></param>
            <returns>
            The asserted string.
            </returns>
        </member>
        <member name="M:NKart.Core.StringExtensions.EnsureNotEndsWith(System.String,System.Char)">
            <summary>
            Ensures a string does not end with a character.
            </summary>
            <param name="input">
            The input string.
            </param>
            <param name="value">
            The char value to assert
            </param>
            <returns>
            The asserted string.
            </returns>
        </member>
        <member name="M:NKart.Core.StringExtensions.EnsureNotStartsWith(System.String,System.Char)">
            <summary>
            Ensures a string does not start with a character.
            </summary>
            <param name="input">
            The input string.
            </param>
            <param name="value">
            The char value to assert
            </param>
            <returns>
            The asserted string.
            </returns>
        </member>
        <member name="M:NKart.Core.StringExtensions.EnsureNotStartsOrEndsWith(System.String,System.Char)">
            <summary>
            Ensures a string does not start or end with a character.
            </summary>
            <param name="input">
            The input string.
            </param>
            <param name="value">
            The char value to assert
            </param>
            <returns>
            The asserted string.
            </returns>
        </member>
        <member name="M:NKart.Core.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>Is null or white space.</summary>
            <param name="str">The str.</param>
            <returns>The is null or white space.</returns>
        </member>
        <member name="T:NKart.Core.CustomerType">
            <summary>
            The customer type.
            </summary>
        </member>
        <member name="T:NKart.Core.AddressType">
            <summary>
            The address type type field enumeration
            </summary>
        </member>
        <member name="T:NKart.Core.ItemCacheType">
            <summary>
            The item cache type.
            </summary>
        </member>
        <member name="T:NKart.Core.LineItemType">
            <summary>
            The line item type.
            </summary>
        </member>
        <member name="T:NKart.Core.PaymentMethodType">
            <summary>
            The payment method type.
            </summary>
        </member>
        <member name="T:NKart.Core.AppliedPaymentType">
            <summary>
            The applied payment type.
            </summary>
        </member>
        <member name="T:NKart.Core.EntityType">
            <summary>
            The entity type.
            </summary>
        </member>
        <member name="T:NKart.Core.GatewayProviderType">
            <summary>
            The gateway provider type.
            </summary>
        </member>
        <member name="T:NKart.Core.ProductType">
            <summary>
            The product type.
            </summary>
        </member>
        <member name="T:NKart.Core.ExpressionHelper">
            <summary>
            A set of helper methods for dealing with expressions
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetPropertyInfo``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="source">The source.</param>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetPropertyInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.PropertyInfo"/> object from an expression.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="!:Expression&lt;Action&lt;T&gt;&gt;"/> provided it refers to a method call.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="fromExpression"/> is null or cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetMethodInfo``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="TReturn">The return type of the method.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetMethodInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the method info.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetMethod(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to a method call.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo"/> or null if <paramref name="expression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MethodCallExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetMemberInfo``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="!:Expression&lt;Func&lt;T, TReturn&gt;&gt;"/> provided it refers to member access.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TReturn">The type of the return.</typeparam>
            <param name="fromExpression">From expression.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/> or null if <paramref name="fromExpression"/> cannot be converted to <see cref="T:System.Linq.Expressions.MemberExpression"/>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.IsMethodSignatureEqualTo(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
            <summary>
            Determines whether the MethodInfo is the same based on signature, not based on the equality operator or HashCode.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
              <c>true</c> if [is method signature equal to] [the specified left]; otherwise, <c>false</c>.
            </returns>
            <remarks>
            This is useful for comparing Expression methods that may contain different generic types
            </remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Gets a <see cref="T:System.Reflection.MemberInfo"/> from an <see cref="T:System.Linq.Expressions.Expression"/> provided it refers to member access.
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetStaticMethodInfo(System.Delegate)">
            <summary>
            Gets a <see cref="T:System.Reflection.MethodInfo"/> from a <see cref="T:System.Delegate"/>
            </summary>
            <param name="fromMethodGroup">From method group.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.IsMethod(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a method.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is method; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.IsMember(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a member.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is member; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.IsConstant(System.Linq.Expressions.Expression)">
            <summary>
            Determines whether the specified expression is a constant.
            </summary>
            <param name="expression">The expression.</param>
            <returns><c>true</c> if the specified expression is constant; otherwise, <c>false</c>.</returns>
            <remarks></remarks>
        </member>
        <member name="M:NKart.Core.ExpressionHelper.GetFirstValueFromArguments(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <summary>
            Gets the first value from the supplied arguments of an expression, for those arguments that can be cast to <see cref="T:System.Linq.Expressions.ConstantExpression"/>.
            </summary>
            <param name="arguments">The arguments.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:NKart.Core.LambdaExpressionCacheKey">
            <summary>
            Represents a simple <see cref="T:System.Linq.Expressions.LambdaExpression"/> in a form which is suitable for using as a dictionary key
            by exposing the return type, argument types and expression string form in a single concatenated string.
            </summary>
        </member>
        <member name="F:NKart.Core.LambdaExpressionCacheKey.ArgTypes">
            <summary>
            The argument type names of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:NKart.Core.LambdaExpressionCacheKey.ReturnType">
            <summary>
            The return type of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="F:NKart.Core.LambdaExpressionCacheKey.ExpressionAsString">
            <summary>
            The original string representation of the <see cref="T:System.Linq.Expressions.LambdaExpression"/>
            </summary>
        </member>
        <member name="M:NKart.Core.LambdaExpressionCacheKey.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:NKart.Core.LambdaExpressionCacheKey.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKart.Core.LambdaExpressionCacheKey.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:NKart.Core.TypeHelper">
            <summary>
            A utility class for type checking, this provides internal caching so that calls to these methods will be faster
            than doing a manual type check in c#
            </summary>
        </member>
        <member name="M:NKart.Core.TypeHelper.IsOverride(System.Reflection.MethodInfo)">
            <summary>
            Checks if the method is actually overriding a base method
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.TypeHelper.HasReferenceToAssemblyWithName(System.Reflection.Assembly,System.String)">
            <summary>
            checks if the assembly has a reference with the same name as the expected assembly name.
            </summary>
            <param name="assembly"></param>
            <param name="expectedAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.TypeHelper.IsNonStaticClass(System.Type)">
            <summary>
            Returns true if the type is a class and is not static
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.TypeHelper.IsStaticClass(System.Type)">
            <summary>
            Returns true if the type is a static class
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            In IL a static class is abstract and sealed
            see: http://stackoverflow.com/questions/1175888/determine-if-a-type-is-static
            </remarks>
        </member>
        <member name="M:NKart.Core.TypeHelper.GetLowestBaseType(System.Type[])">
            <summary>
            Finds a lowest base class amongst a collection of types
            </summary>
            <param name="types"></param>
            <returns></returns>
            <remarks>
            The term 'lowest' refers to the most base class of the type collection.
            If a base type is not found amongst the type collection then an invalid attempt is returned.
            </remarks>
        </member>
        <member name="M:NKart.Core.TypeHelper.IsTypeAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <param name="contract">The type of the contract.</param>
            <param name="implementation">The implementation.</param>
            <returns>
            	<c>true</c> if [is type assignable from] [the specified contract]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NKart.Core.TypeHelper.IsTypeAssignableFrom``1(System.Type)">
            <summary>
            Determines whether the type <paramref name="implementation"/> is assignable from the specified implementation <typeparamref name="TContract"/>,
            and caches the result across the application using a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>.
            </summary>
            <typeparam name="TContract">The type of the contract.</typeparam>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:NKart.Core.TypeHelper.IsValueType(System.Type)">
            <summary>
            A cached method to determine whether <paramref name="implementation"/> represents a value type.
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:NKart.Core.TypeHelper.IsImplicitValueType(System.Type)">
            <summary>
            A cached method to determine whether <paramref name="implementation"/> is an implied value type (<see cref="P:System.Type.IsValueType"/>, <see cref="P:System.Type.IsEnum"/> or a string).
            </summary>
            <param name="implementation">The implementation.</param>
        </member>
        <member name="M:NKart.Core.TypeHelper.GetProperty(System.Type,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a PropertyInfo from a type
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="mustRead"></param>
            <param name="mustWrite"></param>
            <param name="includeIndexed"></param>
            <param name="caseSensitive"> </param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.TypeHelper.GetPublicProperties(System.Type)">
            <summary>
            Returns all public properties including inherited properties even for interfaces
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>
            taken from http://stackoverflow.com/questions/358835/getproperties-to-return-all-properties-for-an-interface-inheritance-hierarchy
            </remarks>
        </member>
        <member name="M:NKart.Core.TypeHelper.CachedDiscoverableFields(System.Type)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.FieldInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <returns></returns>
        </member>
        <member name="M:NKart.Core.TypeHelper.CachedDiscoverableProperties(System.Type,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets (and caches) <see cref="T:System.Reflection.PropertyInfo"/> discoverable in the current <see cref="T:System.AppDomain"/> for a given <paramref name="type"/>.
            </summary>
            <param name="type">The source.</param>
            <param name="mustRead">true if the properties discovered are readable</param>
            <param name="mustWrite">true if the properties discovered are writable</param>
            <param name="includeIndexed">true if the properties discovered are indexable</param>
            <returns></returns>
        </member>
        <member name="T:NKart.Core.UmbracoApplicationEventHandler">
            <summary>
                Handles the Umbraco Application "Starting" and "Started" event and initiates the Merchello startup
            </summary>
        </member>
        <member name="M:NKart.Core.UmbracoApplicationEventHandler.ApplicationStarted(Umbraco.Core.UmbracoApplicationBase,Umbraco.Core.ApplicationContext)">
            <summary>
                The Umbraco Application Starting event.
            </summary>
            <param name="umbracoApplication">
                The umbraco application.
            </param>
            <param name="applicationContext">
                The application context.
            </param>
        </member>
        <member name="M:NKart.Core.UmbracoApplicationEventHandler.StoreSettingServiceSaved(NKart.Core.Services.IStoreSettingService,Umbraco.Core.Events.SaveEventArgs{NKart.Core.Models.IStoreSetting})">
            <summary>
                Resets the store currency.
            </summary>
            <param name="sender">
                The sender.
            </param>
            <param name="e">
                The save event args.
            </param>
        </member>
        <member name="T:NKart.Core.Validation.BankingValidationHelper">
            <summary>
            Represents BankingValidationHelper.
            </summary>
        </member>
        <member name="M:NKart.Core.Validation.BankingValidationHelper.IbanBanknrValid(System.String)">
            <summary>
            Validate an International Bank Account Number (IBAN)
            </summary>
            <param name="iban">International Bank Account Number (IBAN) to validate</param>
            <returns>[true|false] whether IBAN is valid or not</returns>
            <see>http://en.wikipedia.org/wiki/International_Bank_Account_Number</see>
            <see>http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</see>
            <see>http://en.wikipedia.org/wiki/ISO_7064</see>
            <example>See http://www.tbg5-finance.org/?ibandocs.shtml</example> 
        </member>
        <member name="T:NKart.Core.Validation.EmailValidationHelper">
            <summary>
            A validator for email addresses.
            </summary>
        </member>
        <member name="F:NKart.Core.Validation.EmailValidationHelper.invalid">
            <summary>
            A value indicating whether or not the current email is valid.
            </summary>
        </member>
        <member name="M:NKart.Core.Validation.EmailValidationHelper.IsValidEmail(System.String)">
            <summary>
            Validates whether or not a string is in a valid email format.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.Validation.EmailValidationHelper.DomainMapper(System.Text.RegularExpressions.Match)">
            <summary>
            Assists in domain mapping.
            </summary>
            <param name="match">
            The match.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.Validation.IBankingValidationHelper">
            <summary>
            Defines the BankingValidationHelper interface.
            </summary>
        </member>
        <member name="M:NKart.Core.Validation.IBankingValidationHelper.IbanBanknrValid(System.String)">
            <summary>
            Validate an International Bank Account Number (IBAN)
            </summary>
            <param name="iban">International Bank Account Number (IBAN) to validate</param>
            <returns>[true|false] whether IBAN is valid or not</returns>
            <see>http://en.wikipedia.org/wiki/International_Bank_Account_Number</see>
            <see>http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2</see>
            <see>http://en.wikipedia.org/wiki/ISO_7064</see>
            <example>See http://www.tbg5-finance.org/?ibandocs.shtml</example>               
        </member>
        <member name="T:NKart.Core.Validation.IEmailValidationHelper">
            <summary>
            A validator for email addresses.
            </summary>
        </member>
        <member name="M:NKart.Core.Validation.IEmailValidationHelper.IsValidEmail(System.String)">
            <summary>
            Validates whether or not a string is in a valid email format.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.ValueConverters.DetachedValuesConverter">
            <summary>
            A converter to assist in saving detached property data correctly.
            </summary>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConverter._instance">
            <summary>
            The singleton instance of the converter.
            </summary>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConverter._dataTypeService">
            <summary>
            The <see cref="T:Umbraco.Core.Services.IDataTypeService"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConverter._contentTypeService">
            <summary>
            The <see cref="T:Umbraco.Core.Services.ContentTypeService"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConverter._mediaService">
            <summary>
            The <see cref="T:Umbraco.Core.Services.MediaService"/>.
            </summary>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConverter._corrector">
            <summary>
            Internal class for correcting stored detached values.
            </summary>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConverter._ready">
            <summary>
            A value to indicate if the converter singleton is ready.
            </summary>
            <remarks>
            Can be removed eventually when Integration tests get refactored with an instantiated ApplicationContext but to
            </remarks>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.#ctor(Umbraco.Core.ApplicationContext,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.ValueConverters.DetachedValuesConverter"/> class.
            </summary>
            <param name="applicationContext">
            The <see cref="T:Umbraco.Core.ApplicationContext"/>.
            </param>
            <param name="values">
            The resolved DefaultValueCorrection types.
            </param>
        </member>
        <member name="P:NKart.Core.ValueConverters.DetachedValuesConverter.HasCurrent">
            <summary>
            Gets a value indicating whether has current.
            </summary>
        </member>
        <member name="P:NKart.Core.ValueConverters.DetachedValuesConverter.Current">
            <summary>
            Gets the current.
            </summary>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.VerifyPropertyExists(Umbraco.Core.Models.IContentType,System.String)">
            <summary>
            Verifies a property still exists on the content type.
            </summary>
            <param name="contentType">
            The content type.
            </param>
            <param name="propertyAlias">
            The property alias.
            </param>
            <returns>
            A value indicating whether or not the property exists.
            </returns>
            <remarks>
            In cases where the property has been removed, we don't want to store previously saved values.
            </remarks>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.Convert(Umbraco.Core.Models.IContentType,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},NKart.Core.ValueConverters.DetachedValuesConversionType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts the detached values collection to property values for various usages depending on type passed.
            </summary>
            <param name="contentType">
            The content type.
            </param>
            <param name="detachedContentValues">
            The detached content values.
            </param>
            <param name="conversionType">
            The conversion type.
            </param>
            <param name="additionalData">
            A dictionary of additional data (only used with DetachedValuesConversionType database).
            </param>
            <returns>
            The converted values.
            </returns>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.Convert(Umbraco.Core.Models.IContentType,System.Collections.Generic.KeyValuePair{System.String,System.String},NKart.Core.ValueConverters.DetachedValuesConversionType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Converts the detached value collection to property values for various usages depending on type passed.
            </summary>
            <param name="contentType">
            The content type.
            </param>
            <param name="dcv">
            The detached content value.
            </param>
            <param name="conversionType">
            The conversion type.
            </param>
            <param name="additionalData">
            A dictionary of additional data (only used with DetachedValuesConversionType database).
            </param>
            <returns>
            The converted values.
            </returns>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.ConvertDbForContent(Umbraco.Core.Models.PublishedContent.PublishedPropertyType,System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            The converts the stored value for content.
            </summary>
            <param name="publishedPropertyType">
            The published property type.
            </param>
            <param name="dcv">
            The detached content value.
            </param>
            <returns>
            The value for displaying in <see cref="T:Umbraco.Core.Models.IPublishedContent"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.GetContentTypeFromDetachedContentType(NKart.Core.Models.DetachedContent.IDetachedContentType)">
            <summary>
            Gets <see cref="T:Umbraco.Core.Models.IContentType"/> from <see cref="T:NKart.Core.Models.DetachedContent.IDetachedContentType"/>.
            </summary>
            <param name="detachedContentType">
            The detached content type.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Models.IContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.GetContentTypeByKey(System.Guid)">
            <summary>
            Gets <see cref="T:Umbraco.Core.Models.IContentType"/> by it's unique id.
            </summary>
            <param name="contentTypeKey">
            The content type key.
            </param>
            <returns>
            The <see cref="T:Umbraco.Core.Models.IContentType"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.ConvertEditorToDb(Umbraco.Core.Models.IContentType,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            A method to deserialize the values that has been saved by an editor
                        to an object to be stored in the database.
            </summary>
            <param name="contentType">
            The content type.
            </param>
            <param name="detachedContentValues">
            The detached content values.
            </param>
            <param name="additionalData">
            A dictionary of additional data ex. file uploads (only used with DetachedValuesConversionType database).
            </param>
            <returns>
            The converted values.
            </returns>
            <remarks>
            By default this will attempt to automatically convert the string value to the value type supplied by ValueType.
            
                        If overridden then the object returned must match the type supplied in the ValueType, otherwise persisting the
                        value to the DB will fail when it tries to validate the value type.
            
            </remarks>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.ConvertEditorToDb(Umbraco.Core.Models.IContentType,System.Collections.Generic.KeyValuePair{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            A method to deserialize the value that has been saved by an editor
                        to an object to be stored in the database.
            </summary>
            <param name="contentType">
            The content type.
            </param>
            <param name="dcv">
            The detached content value.
            </param>
            <param name="additionalData">
            The additional Data.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.ConvertDbToEditor(Umbraco.Core.Models.IContentType,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            A method used to format the database values to a value that can be used by the editor
            </summary>
            <param name="contentType">
            The content type.
            </param>
            <param name="detachedContentValues">
            The detached content value.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
            <remarks>
            The object returned will automatically be serialized into JSON notation. For most property editors
                        the value returned is probably just a string but in some cases a JSON structure will be returned.
            
            </remarks>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.ConvertDbToEditor(Umbraco.Core.Models.IContentType,System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            A method used to format the database value to a value that can be used by the editor.
            </summary>
            <param name="contentType">
            The content type.
            </param>
            <param name="dcv">
            The detached content value.
            </param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.TryFixLegacyValue(System.String)">
            <summary>
            The try fix legacy value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.ValueConverters.DetachedValuesConverter.DetachedValueCorrector">
            <summary>
            Allows for overriding stored detached values with corrections.
            </summary>
            <remarks>
            Generally used for legacy data types or handling problems with the way Merchello stores property data during JSON serialization
            </remarks>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConverter.DetachedValueCorrector._correctionCache">
            <summary>
            The cache of corrections.
            </summary>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.DetachedValueCorrector.#ctor(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.ValueConverters.DetachedValuesConverter.DetachedValueCorrector"/> class.
            </summary>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.DetachedValueCorrector.CorrectedValue(System.String,System.Object)">
            <summary>
            Applies the resolved correction if there are any.
            </summary>
            <param name="propertyEditorAlias">
            The property editor alias.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The corrected value <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.DetachedValueCorrector.BuildCache(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Builds the type cache.
            </summary>
            <param name="values">
            The values.
            </param>
        </member>
        <member name="M:NKart.Core.ValueConverters.DetachedValuesConverter.DetachedValueCorrector.AddOrUpdateCache(NKart.Core.ValueConverters.ValueCorrections.IDetachedValueCorrection)">
            <summary>
            Adds or updates a <see cref="T:NKart.Core.ValueConverters.ValueCorrections.IDetachedValueCorrection"/> instance to the concurrent cache.
            </summary>
            <param name="correction">
            The correction.
            </param>
        </member>
        <member name="T:NKart.Core.ValueConverters.DetachedValuesConversionType">
            <summary>
            Specifies the how the Detached Values should be converted.
            </summary>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConversionType.Db">
            <summary>
            Indicates conversion of value for saving to the database
            </summary>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConversionType.Editor">
            <summary>
            Indicates conversion of value for use in a back office editor
            </summary>
        </member>
        <member name="F:NKart.Core.ValueConverters.DetachedValuesConversionType.Content">
            <summary>
            Indicates conversion of a value as if it was retrieved from the should be used for <see cref="T:Umbraco.Core.Models.IPublishedContent"/>
            </summary>
        </member>
        <member name="T:NKart.Core.ValueConverters.ValueCorrections.DetachedValueCorrectionAttribute">
            <summary>
            An attribute to decorate DetachedValue to associated a correction class during resolution.
            </summary>
        </member>
        <member name="M:NKart.Core.ValueConverters.ValueCorrections.DetachedValueCorrectionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Core.ValueConverters.ValueCorrections.DetachedValueCorrectionAttribute"/> class.
            </summary>
            <param name="propertyEditorAlias">
            The property editor alias.
            </param>
        </member>
        <member name="P:NKart.Core.ValueConverters.ValueCorrections.DetachedValueCorrectionAttribute.PropertyEditorAlias">
            <summary>
            Gets the property editor alias.
            </summary>
        </member>
        <member name="T:NKart.Core.ValueConverters.ValueCorrections.DetachedValueCorrectionBase">
            <summary>
            A base class for detached value override objects.
            </summary>
        </member>
        <member name="M:NKart.Core.ValueConverters.ValueCorrections.DetachedValueCorrectionBase.ApplyCorrection(System.Object)">
            <summary>
            Applies the correction and returns the corrected value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.ValueConverters.ValueCorrections.IDetachedValueCorrection">
            <summary>
            Defines a property value converter override.
            </summary>
            <remarks>
            Generally used to correct discrepancies in values stored as detached content as a result of serialization to JSON 
            such as the multi-text string legacy property editor.
            
            </remarks>
        </member>
        <member name="M:NKart.Core.ValueConverters.ValueCorrections.IDetachedValueCorrection.ApplyCorrection(System.Object)">
            <summary>
            Overrides the object value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.ValueConverters.ValueCorrections.DecimalValueCorrection">
            <summary>
            Overrides the stored detached value for the Decimal property editor so that it 
            renders properly in the value converter.
            </summary>
        </member>
        <member name="T:NKart.Core.ValueConverters.ValueCorrections.NumericValueCorrection">
            <summary>
            Overrides the stored detached value for the numeric property editor so that it 
            renders properly in the value converter.
            </summary>
        </member>
        <member name="M:NKart.Core.ValueConverters.ValueCorrections.NumericValueCorrection.ApplyCorrection(System.Object)">
            <summary>
            Overrides the stored detached value to correct JSON serialized object value.
            </summary>
            <param name="value">
            The value stored by Merchello.
            </param>
            <returns>
            The corrected value <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.ValueConverters.ValueCorrections.RepeatableTextstringValueCorrection">
            <summary>
            Overrides the stored detached value for the multiple text string property editor so that it 
            renders properly in the value converter.
            </summary>
        </member>
        <member name="M:NKart.Core.ValueConverters.ValueCorrections.RepeatableTextstringValueCorrection.ApplyCorrection(System.Object)">
            <summary>
            Overrides the stored detached value to correct serialization issues with the required Environment NewLine.
            </summary>
            <param name="value">
            The value stored by Merchello.
            </param>
            <returns>
            The corrected value <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:NKart.Core.ValueConverters.ValueCorrections.RepeatableTextstringValueCorrection.EnsureValueNeedsCorrection(System.Object)">
            <summary>
            Ensure the value needs to be corrected.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:NKart.Core.ValueConverters.ValueCorrections.TrueFalseValueCorrection">
            <summary>
            Overrides the stored detached value for the True/False property editor so that it 
            renders properly in the value converter.
            </summary>
        </member>
        <member name="M:NKart.Core.ValueConverters.ValueCorrections.TrueFalseValueCorrection.ApplyCorrection(System.Object)">
            <summary>
            Overrides the stored detached value to correct JSON serialized object value.
            </summary>
            <param name="value">
            The value stored by Merchello.
            </param>
            <returns>
            The corrected value <see cref="T:System.Object"/>.
            </returns>
        </member>
    </members>
</doc>
