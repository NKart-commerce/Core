<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Merchello.Examine</name>
    </assembly>
    <members>
        <member name="T:NKart.Examine.DataServices.DataServiceBase">
            <summary>
            The data service base.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.DataServiceBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.DataServiceBase"/> class.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.DataServiceBase.DataServiceLogger">
            <summary>
            Gets the data service logger.
            </summary>
        </member>
        <member name="T:NKart.Examine.DataServices.CustomerDataService">
            <summary>
            The customer data service.
            </summary>
        </member>
        <member name="F:NKart.Examine.DataServices.CustomerDataService._merchelloContext">
            <summary>
            The merchello context.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.CustomerDataService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.CustomerDataService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.CustomerDataService.#ctor(NKart.Core.IMerchelloContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.CustomerDataService"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
        </member>
        <member name="M:NKart.Examine.DataServices.CustomerDataService.GetAll">
            <summary>
            Gets all customers
            </summary>
            <returns>
             The collection of all <see cref="T:NKart.Core.Models.ICustomer"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.DataServices.CustomerDataService.GetIndexFieldNames">
            <summary>
            Returns a list of all property names in the Merchello set being indexed
            </summary>
            <returns>
            The collection of all index field names.
            </returns>
        </member>
        <member name="T:NKart.Examine.DataServices.ICustomerDataService">
            <summary>
            Defines he CustomerDataService interface.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.ICustomerDataService.GetAll">
            <summary>
            Gets all customers
            </summary>
            <returns>
            The collection of all <see cref="T:NKart.Core.Models.ICustomer"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.DataServices.IInvoiceDataService">
            <summary>
            Defines an Invoice Data Service
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.IInvoiceDataService.GetAll">
            <summary>
            The get all.
            </summary>
            <returns>
            The collection of all <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.DataServices.InvoiceDataService">
            <summary>
            The invoice data service.
            </summary>
        </member>
        <member name="F:NKart.Examine.DataServices.InvoiceDataService._merchelloContext">
            <summary>
            The merchello context.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.InvoiceDataService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.InvoiceDataService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.InvoiceDataService.#ctor(NKart.Core.IMerchelloContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.InvoiceDataService"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
        </member>
        <member name="M:NKart.Examine.DataServices.InvoiceDataService.GetAll">
            <summary>
            The get all.
            </summary>
            <returns>
            The collection of all <see cref="T:NKart.Core.Models.IInvoice"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.DataServices.InvoiceDataService.GetIndexFieldNames">
            <summary>
            The get index field names.
            </summary>
            <returns>
            The collection of index field names.
            </returns>
        </member>
        <member name="T:NKart.Examine.DataServices.IOrderDataService">
            <summary>
            Defines the OrderDataService
            </summary>
        </member>
        <member name="T:NKart.Examine.DataServices.OrderDataService">
            <summary>
            The order data service.
            </summary>
        </member>
        <member name="F:NKart.Examine.DataServices.OrderDataService._merchelloContext">
            <summary>
            The merchello context.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.OrderDataService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.OrderDataService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.OrderDataService.#ctor(NKart.Core.IMerchelloContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.OrderDataService"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
        </member>
        <member name="M:NKart.Examine.DataServices.OrderDataService.GetAll">
            <summary>
            The get all.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.DataServices.OrderDataService.GetIndexFieldNames">
            <summary>
            The get index field names.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.DataServices.IDataService">
            <summary>
            The DataService interface.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.IDataService.ProductDataService">
            <summary>
            Gets the product data service.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.IDataService.InvoiceDataService">
            <summary>
            Gets the invoice data service.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.IDataService.OrderDataService">
            <summary>
            Gets the order data service.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.IDataService.CustomerDataService">
            <summary>
            Gets the customer data service.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.IDataService.LogService">
            <summary>
            Gets the log service.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.IDataService.MapPath(System.String)">
            <summary>
            The map path.
            </summary>
            <param name="virtualPath">
            The virtual path.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.DataServices.IIndexDataService">
            <summary>
            Defines an IndexDataService interface.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.IIndexDataService.GetIndexFieldNames">
            <summary>
            Returns a list of all property names in the Merchello set being indexed
            </summary>
            <returns>
            The collection of all index field names.
            </returns>
        </member>
        <member name="T:NKart.Examine.DataServices.IProductDataService">
            <summary>
            The ProductDataService interface.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.IProductDataService.GetAll">
            <summary>
            Gets all products
            </summary>
            <returns>
            The collection of all <see cref="T:NKart.Core.Models.IProduct"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.DataServices.MerchelloDataService">
            <summary>
            The merchello data service.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.MerchelloDataService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.MerchelloDataService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.MerchelloDataService.#ctor(NKart.Core.IMerchelloContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.MerchelloDataService"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
        </member>
        <member name="P:NKart.Examine.DataServices.MerchelloDataService.ProductDataService">
            <summary>
            Gets the product data service.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.MerchelloDataService.InvoiceDataService">
            <summary>
            Gets the invoice data service.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.MerchelloDataService.OrderDataService">
            <summary>
            Gets the order data service.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.MerchelloDataService.CustomerDataService">
            <summary>
            Gets the customer data service.
            </summary>
        </member>
        <member name="P:NKart.Examine.DataServices.MerchelloDataService.LogService">
            <summary>
            Gets the log service.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.MerchelloDataService.MapPath(System.String)">
            <summary>
            The map path.
            </summary>
            <param name="virtualPath">
            The virtual path.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.DataServices.ProductDataService">
            <summary>
            The product data service.
            </summary>
        </member>
        <member name="F:NKart.Examine.DataServices.ProductDataService._merchelloContext">
            <summary>
            The _merchello context.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.ProductDataService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.ProductDataService"/> class.
            </summary>
        </member>
        <member name="M:NKart.Examine.DataServices.ProductDataService.#ctor(NKart.Core.IMerchelloContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.DataServices.ProductDataService"/> class.
            </summary>
            <param name="merchelloContext">
            The merchello context.
            </param>
        </member>
        <member name="M:NKart.Examine.DataServices.ProductDataService.GetAll">
            <summary>
            The get all.
            </summary>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.DataServices.ProductDataService.GetIndexFieldNames">
            <summary>
            Returns a list of all property names in the Merchello set being indexed
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:NKart.Examine.LocalStorage.LocalTempStorageDirectory">
            <summary>
            Used to read data from local temp storage and write to both local storage and main storage
            </summary>    
        </member>
        <member name="P:NKart.Examine.LocalStorage.LocalTempStorageDirectory.Enabled">
            <summary>
            If initialization fails, it will be disabled and then this will just wrap the 'real directory'
            </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.FileExists(System.String)">
            <summary>Returns true if a file with the given name exists. </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.FileModified(System.String)">
            <summary>Returns the time the named file was last modified. </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.TouchFile(System.String)">
            <summary>Set the modified time of an existing file to now. </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.DeleteFile(System.String)">
            <summary>Removes an existing file in the directory. </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.FileLength(System.String)">
            <summary>Returns the length of a file in the directory. </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.CreateOutput(System.String)">
            <summary>
            Creates a new, empty file in the directory with the given name.
            Returns a stream writing this file. 
            </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.OpenInput(System.String)">
            <summary>
            Returns a stream reading an existing file.
            </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.OpenInput(System.String,System.Int32)">
            <summary>
            Creates an IndexInput for the file with the given name. 
            </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.Sync(System.String)">
            <summary>
            Ensure that any writes to this file are moved to
                        stable storage.  Lucene uses this to properly commit
                        changes to the index, to prevent a machine/OS crash
                        from corrupting the index. 
            </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageDirectory.GetLockID">
            <summary>
            Return a string identifier that uniquely differentiates
                        this Directory instance from other Directory instances.
                        This ID should be the same if two Directory instances
                        (even in different JVMs and/or on different machines)
                        are considered "the same index".  This is how locking
                        "scopes" to the right index.
            
            </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.LocalTempStorageIndexer.TryCreateWriterWithRetry(Lucene.Net.Store.Directory,Lucene.Net.Analysis.Analyzer)">
            <summary>
            Attempts to create an index writer, it will retry on failure 5 times and on the last time will try to forcefully unlock the index files
            </summary>
            <param name="baseLuceneDirectory"></param>
            <param name="analyzer"></param>
            <returns></returns>
        </member>
        <member name="T:NKart.Examine.LocalStorage.MultiIndexLock">
            <summary>
            Lock that wraps multiple locks
            </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.MultiIndexLock.Obtain">
            <summary>
            Attempts to obtain exclusive access and immediately return
                        upon success or failure.
            </summary>
            <returns>
            true iff exclusive access is obtained
            </returns>
        </member>
        <member name="M:NKart.Examine.LocalStorage.MultiIndexLock.Release">
            <summary>
            Releases exclusive access. 
            </summary>
        </member>
        <member name="M:NKart.Examine.LocalStorage.MultiIndexLock.IsLocked">
            <summary>
            Returns true if the resource is currently locked.  Note that one must
                        still call <see cref="M:Lucene.Net.Store.Lock.Obtain"/> before using the resource. 
            </summary>
        </member>
        <member name="T:NKart.Examine.LocalStorage.MultiIndexLockFactory">
            <summary>
            Lock factory that wraps multiple factories
            </summary>
        </member>
        <member name="T:NKart.Examine.SearchHelper">
            <summary>
            The search provider extension.
            </summary>
        </member>
        <member name="M:NKart.Examine.SearchHelper.BuildCriteria(System.String,System.String,System.String[])">
            <summary>
            Builds search criteria for a particular provider
            </summary>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="providerName">
            The provider name.
            </param>
            <param name="fields">
            The fields.
            </param>
            <returns>
            The <see cref="T:Examine.SearchCriteria.ISearchCriteria"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.SearchHelper.BuildQuery(System.String,Examine.SearchCriteria.ISearchCriteria,System.String[])">
            <summary>
            Assists in building search criteria
            </summary>
            <param name="searchString">The search term</param>
            <param name="criteria">ISearchCriteria</param>
            <param name="textFields">Fields in the index to search</param>
            <returns>The <see cref="T:Examine.SearchCriteria.ISearchCriteria"/></returns>    
            <remarks>// our.umbraco.org/forum/developers/extending-umbraco/19329-Search-multiple-fields-for-multiple-terms-with-examine?p=0</remarks>
        </member>
        <member name="M:NKart.Examine.SearchHelper.ToSearchTerms(System.String)">
            <summary>
            Breaks up a search string into multiple search terms.
            </summary>
            <param name="searchString">
            The search string.
            </param>
            <returns>
            The <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.SearchHelper.BuildCriteria(Examine.Providers.BaseSearchProvider,System.String,System.String[])">
            <summary>
            BaseSearchProvider extension to build search criteria
            </summary>
            <param name="provider">
            The provider.
            </param>
            <param name="searchTerm">
            The search term.
            </param>
            <param name="fields">
            The fields.
            </param>
            <returns>
            The <see cref="T:Examine.SearchCriteria.ISearchCriteria"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.Models.SearchTerm">
            <summary>
            Represents a search term.
            </summary>
        </member>
        <member name="P:NKart.Examine.Models.SearchTerm.Term">
            <summary>
            Gets or sets the term.
            </summary>
        </member>
        <member name="P:NKart.Examine.Models.SearchTerm.SearchTermType">
            <summary>
            Gets or sets the search term type.
            </summary>
        </member>
        <member name="T:NKart.Examine.Models.SearchTermType">
            <summary>
            Defines the type of a search term.
            </summary>
        </member>
        <member name="F:NKart.Examine.Models.SearchTermType.SingleWord">
            <summary>
            A single word term
            </summary>
        </member>
        <member name="F:NKart.Examine.Models.SearchTermType.MultiWord">
            <summary>
            A multi word term
            </summary>
        </member>
        <member name="T:NKart.Examine.Providers.BaseMerchelloIndexer">
            <summary>
            The base merchello indexer.
            </summary>
        </member>
        <member name="F:NKart.Examine.Providers.BaseMerchelloIndexer._logger">
            <summary>
            The <see cref="T:Umbraco.Core.Logging.ILogger"/>.
            </summary>
        </member>
        <member name="F:NKart.Examine.Providers.BaseMerchelloIndexer._sqlSyntaxProvider">
            <summary>
            The <see cref="T:Umbraco.Core.Persistence.SqlSyntax.ISqlSyntaxProvider"/>.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.Providers.BaseMerchelloIndexer"/> class.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.#ctor(Examine.IIndexCriteria,System.IO.DirectoryInfo,NKart.Examine.DataServices.IDataService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.Providers.BaseMerchelloIndexer"/> class. 
            The base merchello indexer.
            </summary>
            <param name="indexerData">
            The indexer Data.
            </param>
            <param name="indexPath">
            The index Path.
            </param>
            <param name="dataService">
            The data Service.
            </param>
            <param name="analyzer">
            The analyzer.
            </param>
            <param name="async">
            A value indicating whether or not to run asyncronously
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.#ctor(Examine.IIndexCriteria,Lucene.Net.Store.Directory,NKart.Examine.DataServices.IDataService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.Providers.BaseMerchelloIndexer"/> class.
            </summary>
            <param name="indexerData">
            The indexer data.
            </param>
            <param name="luceneDirectory">
            The lucene directory.
            </param>
            <param name="dataService">
            The data service.
            </param>
            <param name="analyzer">
            The analyzer.
            </param>
            <param name="async">
            The async.
            </param>
        </member>
        <member name="P:NKart.Examine.Providers.BaseMerchelloIndexer.EnableDefaultEventHandler">
            <summary>
            Gets or sets a value indicating whether the IndexingActionHandler will be run to keep the default index up to date.
            </summary>
        </member>
        <member name="P:NKart.Examine.Providers.BaseMerchelloIndexer.DataService">
            <summary>
            Gets or sets the data service used for retreiving and saving data
            </summary>
        </member>
        <member name="P:NKart.Examine.Providers.BaseMerchelloIndexer.SupportedTypes">
            <summary>
            Gets the supported indexable types
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Setup the properties for the indexer from the provider settings
            </summary>
            <param name="name">
            The name.
            </param>
            <param name="config">
            The config.
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.ReIndexNode(System.Xml.Linq.XElement,System.String)">
            <summary>
            Reindexes a node
            </summary>
            <param name="node">
            The node.
            </param>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.PerformIndexRebuild">
            <summary>
            Reindexes all supported types
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.OnIndexingError(Examine.IndexingErrorEventArgs)">
            <summary>
            The on indexing error.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.OnNodeIndexed(Examine.IndexedNodeEventArgs)">
            <summary>
            The on node indexed.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.OnIndexDeleted(Examine.DeleteIndexEventArgs)">
            <summary>
            The on index deleted.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.OnIndexOptimizing(System.EventArgs)">
            <summary>
            The on index optimizing.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.BaseMerchelloIndexer.OnDuplicateFieldWarning(System.Int32,System.String,System.String)">
            <summary>
            Called when a duplicate field is detected in the dictionary that is getting indexed.
            </summary>
            <param name="nodeId">
            The node Id.
            </param>
            <param name="indexSetName">
            The index Set Name.
            </param>
            <param name="fieldName">
            The field Name.
            </param>
        </member>
        <member name="F:NKart.Examine.Providers.BaseMerchelloIndexer._internalSearcherLocker">
            <summary>
            Used to aquire the internal searcher
            </summary>
        </member>
        <member name="T:NKart.Examine.Providers.CustomerIndexer">
            <summary>
            The customer indexer.
            </summary>
        </member>
        <member name="F:NKart.Examine.Providers.CustomerIndexer.IndexFieldPolicies">
            <summary>
            The index field policies.
            </summary>
        </member>
        <member name="P:NKart.Examine.Providers.CustomerIndexer.SupportedTypes">
            <summary>
            Gets the supported types.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.CustomerIndexer.RebuildIndex">
            <summary>
            Rebuilds the customer index
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.CustomerIndexer.AddCustomerToIndex(NKart.Core.Models.ICustomer)">
            <summary>
            Adds the customer to the index
            </summary>
            <param name="customer">The <see cref="T:NKart.Core.Models.ICustomer"/> to be indexed</param>
            <remarks>For testing</remarks>
        </member>
        <member name="M:NKart.Examine.Providers.CustomerIndexer.DeleteCustomerFromIndex(NKart.Core.Models.ICustomer)">
            <summary>
            Removes the customer from the index
            </summary>
            <param name="customer">The <see cref="T:NKart.Core.Models.ICustomer"/> to be removed from the index</param>
            <remarks>For testing</remarks>
        </member>
        <member name="M:NKart.Examine.Providers.CustomerIndexer.PerformIndexAll(System.String)">
            <summary>
            The perform index all.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.CustomerIndexer.GetIndexerData(Examine.LuceneEngine.Config.IndexSet)">
            <summary>
            Creates an IIndexCriteria object based on the indexSet passed in and our DataService
            </summary>
            <param name="indexSet">
            The index Set.
            </param>
            <remarks>
            If we cannot initialize we will pass back empty indexer data since we cannot read from the database
            </remarks>
            <returns>
            The <see cref="T:Examine.IIndexCriteria"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.Providers.CustomerIndexer.GetPolicy(System.String)">
            <summary>
            return the index policy for the field name passed in, if not found, return normal
            </summary>
            <param name="fieldName">
            The field Name.
            </param>
            <returns>
            The <see cref="T:Examine.LuceneEngine.FieldIndexTypes"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.Providers.OrderIndexer">
            <summary>
            The order indexer.
            </summary>
        </member>
        <member name="F:NKart.Examine.Providers.OrderIndexer.IndexFieldPolicies">
            <summary>
            The index field policies.
            </summary>
        </member>
        <member name="P:NKart.Examine.Providers.OrderIndexer.SupportedTypes">
            <summary>
            Gets the supported types.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.OrderIndexer.RebuildIndex">
            <summary>
            The rebuild index.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.OrderIndexer.AddOrderToIndex(NKart.Core.Models.IOrder)">
            <summary>
            Adds the order to the index
            </summary>
            <param name="order">
            The order.
            </param>
            <remarks>
            For testing
            </remarks>
        </member>
        <member name="M:NKart.Examine.Providers.OrderIndexer.DeleteOrderFromIndex(NKart.Core.Models.IOrder)">
            <summary>
            Removes the order from the index
            </summary>
            <param name="order">
            The order.
            </param>
            <remarks>
            For testing
            </remarks>
        </member>
        <member name="M:NKart.Examine.Providers.OrderIndexer.GetIndexerData(Examine.LuceneEngine.Config.IndexSet)">
            <summary>
            Creates an IIndexCriteria object based on the indexSet passed in and our DataService
            </summary>
            <param name="indexSet">
            The index Set.
            </param>
            <remarks>
            If we cannot initialize we will pass back empty indexer data since we cannot read from the database
            </remarks>
            <returns>
            The <see cref="T:Examine.IIndexCriteria"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.Providers.OrderIndexer.GetPolicy(System.String)">
            <summary>
            return the index policy for the field name passed in, if not found, return normal
            </summary>
            <param name="fieldName">
            The field Name.
            </param>
            <returns>
            The <see cref="T:Examine.LuceneEngine.FieldIndexTypes"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.Providers.OrderIndexer.PerformIndexAll(System.String)">
            <summary>
            The perform index all.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="T:NKart.Examine.Providers.InvoiceIndexer">
            <summary>
            The invoice indexer.
            </summary>
        </member>
        <member name="F:NKart.Examine.Providers.InvoiceIndexer.IndexFieldPolicies">
            <summary>
            The index field policies.
            </summary>
        </member>
        <member name="P:NKart.Examine.Providers.InvoiceIndexer.SupportedTypes">
            <summary>
            Gets the supported types.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.InvoiceIndexer.RebuildIndex">
            <summary>
            Rebuilds the invoice index
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.InvoiceIndexer.AddInvoiceToIndex(NKart.Core.Models.IInvoice)">
            <summary>
            Adds the invoice to the index
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to be indexed</param>
            <remarks>For testing</remarks>
        </member>
        <member name="M:NKart.Examine.Providers.InvoiceIndexer.DeleteInvoiceFromIndex(NKart.Core.Models.IInvoice)">
            <summary>
            Removes the invoice from the index
            </summary>
            <param name="invoice">The <see cref="T:NKart.Core.Models.IInvoice"/> to be removed from the index</param>
            <remarks>For testing</remarks>
        </member>
        <member name="M:NKart.Examine.Providers.InvoiceIndexer.PerformIndexAll(System.String)">
            <summary>
            The perform index all.
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.InvoiceIndexer.GetIndexerData(Examine.LuceneEngine.Config.IndexSet)">
            <summary>
            Creates an IIndexCriteria object based on the indexSet passed in and our DataService
            </summary>
            <param name="indexSet">
            The index Set.
            </param>
            <remarks>
            If we cannot initialize we will pass back empty indexer data since we cannot read from the database
            </remarks>
            <returns>
            The <see cref="T:Examine.IIndexCriteria"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.Providers.InvoiceIndexer.GetPolicy(System.String)">
            <summary>
            return the index policy for the field name passed in, if not found, return normal
            </summary>
            <param name="fieldName">
            The field Name.
            </param>
            <returns>
            The <see cref="T:Examine.LuceneEngine.FieldIndexTypes"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.Providers.ProductIndexer">
            <summary>
            The product indexer.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.ProductIndexer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.Providers.ProductIndexer"/> class.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.ProductIndexer.#ctor(Examine.IIndexCriteria,System.IO.DirectoryInfo,NKart.Examine.DataServices.IDataService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.Providers.ProductIndexer"/> class.
            </summary>
            <param name="indexerData">
            The indexer data.
            </param>
            <param name="indexPath">
            The index path.
            </param>
            <param name="dataService">
            The data service.
            </param>
            <param name="analyzer">
            The analyzer.
            </param>
            <param name="async">
            The async.
            </param>
        </member>
        <member name="M:NKart.Examine.Providers.ProductIndexer.#ctor(Examine.IIndexCriteria,Lucene.Net.Store.Directory,NKart.Examine.DataServices.IDataService,Lucene.Net.Analysis.Analyzer,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NKart.Examine.Providers.ProductIndexer"/> class.
            </summary>
            <param name="indexerData">
            The indexer data.
            </param>
            <param name="luceneDirectory">
            The lucene directory.
            </param>
            <param name="dataService">
            The data service.
            </param>
            <param name="analyzer">
            The analyzer.
            </param>
            <param name="async">
            The async.
            </param>
        </member>
        <member name="F:NKart.Examine.Providers.ProductIndexer.IndexFieldPolicies">
            <summary>
            The index field policies.
            </summary>
        </member>
        <member name="P:NKart.Examine.Providers.ProductIndexer.SupportedTypes">
            <summary>
            Gets the supported types.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.ProductIndexer.RebuildIndex">
            <summary>
            Completely rebuilds the index.
            </summary>
        </member>
        <member name="M:NKart.Examine.Providers.ProductIndexer.AddProductToIndex(NKart.Core.Models.IProduct)">
            <summary>
            Adds all variants for a given product to the index
            </summary>
            <param name="product">
            The product.
            </param>
            <remarks>
            For testing
            </remarks>
        </member>
        <member name="M:NKart.Examine.Providers.ProductIndexer.DeleteProductFromIndex(NKart.Core.Models.IProduct)">
            <summary>
            Removes all variants for a given product from the index
            </summary>
            <param name="product">
            The product.
            </param>
            <remarks>
            For testing
            </remarks>
        </member>
        <member name="M:NKart.Examine.Providers.ProductIndexer.GetIndexerData(Examine.LuceneEngine.Config.IndexSet)">
            <summary>
            Creates an IIndexCriteria object based on the indexSet passed in and our DataService
            </summary>
            <param name="indexSet">
            The index Set.
            </param>
            <remarks>
            If we cannot initialize we will pass back empty indexer data since we cannot read from the database
            </remarks>
            <returns>
            The <see cref="T:Examine.IIndexCriteria"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.Providers.ProductIndexer.GetPolicy(System.String)">
            <summary>
            return the index policy for the field name passed in, if not found, return normal
            </summary>
            <param name="fieldName">
            The field Name.
            </param>
            <returns>
            The <see cref="T:Examine.LuceneEngine.FieldIndexTypes"/>.
            </returns>
        </member>
        <member name="M:NKart.Examine.Providers.ProductIndexer.PerformIndexAll(System.String)">
            <summary>
            Adds all product variants to the index
            </summary>
            <param name="type">
            The type.
            </param>
        </member>
        <member name="T:NKart.Examine.IndexSetExtensions">
            <summary>
            Extension methods for IndexSet
            </summary>
        </member>
        <member name="F:NKart.Examine.IndexSetExtensions.Locker">
            <summary>
            The thread locker.
            </summary>
        </member>
        <member name="M:NKart.Examine.IndexSetExtensions.ToIndexCriteria(Examine.LuceneEngine.Config.IndexSet,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NKart.Examine.StaticField})">
            <summary>
            Creates an <see cref="T:Examine.IIndexCriteria"/>.
            </summary>
            <param name="set">
            The set.
            </param>
            <param name="indexFieldNames">
            The index field names.
            </param>
            <param name="indexFieldPolicies">
            The index field policies.
            </param>
            <returns>
            The <see cref="T:Examine.IIndexCriteria"/>.
            </returns>
        </member>
        <member name="T:NKart.Examine.IndexTypes">
            <summary>
            The index types stored in the Lucene Index
            </summary>
        </member>
        <member name="F:NKart.Examine.IndexTypes.ProductVariant">
            <summary>
            The product variant index type
            </summary>
        </member>
        <member name="F:NKart.Examine.IndexTypes.Order">
            <summary>
            The order index type
            </summary>
        </member>
        <member name="F:NKart.Examine.IndexTypes.Invoice">
            <summary>
            The invoice index type
            </summary>
        </member>
        <member name="F:NKart.Examine.IndexTypes.Customer">
            <summary>
            The customer index type
            </summary>
        </member>
    </members>
</doc>
